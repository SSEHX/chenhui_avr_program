
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039e  00800100  0000309c  00003130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000309c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ca  0080049e  0080049e  000034ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000034ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000680  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a5bc  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fa9  00000000  00000000  0000e178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005058  00000000  00000000  00010121  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013e8  00000000  00000000  0001517c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001285  00000000  00000000  00016564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a460  00000000  00000000  000177e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  00021c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__vector_9>
      28:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_10>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_12>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__vector_14>
      3c:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__vector_15>
      40:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__vector_20>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__vector_26>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__vector_29>
      78:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__vector_30>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__vector_32>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e9       	ldi	r30, 0x9C	; 156
      a0:	f0 e3       	ldi	r31, 0x30	; 48
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ae 39       	cpi	r26, 0x9E	; 158
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	ae e9       	ldi	r26, 0x9E	; 158
      b2:	b4 e0       	ldi	r27, 0x04	; 4
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a8 36       	cpi	r26, 0x68	; 104
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 ce 14 	call	0x299c	; 0x299c <main>
      c2:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <ADC_GPIO_Init>:
	/*while(!(ADCSRA &(0x1<< ADIF)));*/
	_delay_ms(20);
	
	
	return adc_val;
}
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	80 63       	ori	r24, 0x30	; 48
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	82 b3       	in	r24, 0x12	; 18
      d2:	80 63       	ori	r24, 0x30	; 48
      d4:	82 bb       	out	0x12, r24	; 18
      d6:	e2 e6       	ldi	r30, 0x62	; 98
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8f 71       	andi	r24, 0x1F	; 31
      de:	80 83       	st	Z, r24
      e0:	e1 e6       	ldi	r30, 0x61	; 97
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	8f 71       	andi	r24, 0x1F	; 31
      e8:	80 83       	st	Z, r24
      ea:	08 95       	ret

000000ec <ADC_Mode_Init>:
      ec:	16 b8       	out	0x06, r1	; 6
      ee:	80 e4       	ldi	r24, 0x40	; 64
      f0:	87 b9       	out	0x07, r24	; 7
      f2:	80 e8       	ldi	r24, 0x80	; 128
      f4:	88 b9       	out	0x08, r24	; 8
      f6:	86 b1       	in	r24, 0x06	; 6
      f8:	86 68       	ori	r24, 0x86	; 134
      fa:	86 b9       	out	0x06, r24	; 6
      fc:	08 95       	ret

000000fe <ADC_Init>:
      fe:	0e 94 65 00 	call	0xca	; 0xca <ADC_GPIO_Init>
     102:	0e 94 76 00 	call	0xec	; 0xec <ADC_Mode_Init>
     106:	08 95       	ret

00000108 <ADC_Get>:

unsigned int  ADC_Get(unsigned char n)
{
	ADCSRA &= ~(0x1<<ADEN);
     108:	37 98       	cbi	0x06, 7	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     10a:	97 e0       	ldi	r25, 0x07	; 7
     10c:	9a 95       	dec	r25
     10e:	f1 f7       	brne	.-4      	; 0x10c <ADC_Get+0x4>
     110:	00 c0       	rjmp	.+0      	; 0x112 <ADC_Get+0xa>
	_delay_us(2);	
	ADMUX = (ADMUX & 0xE0) | n;
     112:	97 b1       	in	r25, 0x07	; 7
     114:	90 7e       	andi	r25, 0xE0	; 224
     116:	89 2b       	or	r24, r25
     118:	87 b9       	out	0x07, r24	; 7
     11a:	87 e0       	ldi	r24, 0x07	; 7
     11c:	8a 95       	dec	r24
     11e:	f1 f7       	brne	.-4      	; 0x11c <ADC_Get+0x14>
     120:	00 c0       	rjmp	.+0      	; 0x122 <ADC_Get+0x1a>
	_delay_us(2);
	ADCSRA |= (0x1<<ADEN)|(1 << ADSC); //START
     122:	86 b1       	in	r24, 0x06	; 6
     124:	80 6c       	ori	r24, 0xC0	; 192
     126:	86 b9       	out	0x06, r24	; 6
	
	while(!(ADCSRA &(0x1<< ADIF)));
     128:	34 9b       	sbis	0x06, 4	; 6
     12a:	fe cf       	rjmp	.-4      	; 0x128 <ADC_Get+0x20>
	//if((ADCSRA &(0x1<< ADIF)))BEEP(1);
	ADCSRA |= (0x1<< ADIF);
     12c:	34 9a       	sbi	0x06, 4	; 6
     12e:	97 e0       	ldi	r25, 0x07	; 7
     130:	9a 95       	dec	r25
     132:	f1 f7       	brne	.-4      	; 0x130 <ADC_Get+0x28>
     134:	00 c0       	rjmp	.+0      	; 0x136 <ADC_Get+0x2e>
	_delay_us(2);	
	
	//LEDON;
	ADCSRA &= ~(0x1<<ADEN);
     136:	37 98       	cbi	0x06, 7	; 6
	//ADCSRA |= (0x1 << ADIF);
	return (ADCL | ADCH<<8);
     138:	84 b1       	in	r24, 0x04	; 4
     13a:	25 b1       	in	r18, 0x05	; 5
     13c:	90 e0       	ldi	r25, 0x00	; 0
}
     13e:	92 2b       	or	r25, r18
     140:	08 95       	ret

00000142 <__vector_21>:

SIGNAL(ADC_vect)
{
     142:	1f 92       	push	r1
     144:	0f 92       	push	r0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	0f 92       	push	r0
     14a:	11 24       	eor	r1, r1
     14c:	2f 93       	push	r18
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
	//if((ADCSRA &(0x1<< ADIF)))
	{
		ADCSRA |= (0x1 << ADIF);
     152:	34 9a       	sbi	0x06, 4	; 6
		adc_val = ADCL;
     154:	84 b1       	in	r24, 0x04	; 4
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <__data_end+0x1>
     15c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <__data_end>
		adc_val |= ADCH<<8;
     160:	25 b1       	in	r18, 0x05	; 5
     162:	92 2b       	or	r25, r18
     164:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <__data_end+0x1>
     168:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <__data_end>
		if(ADMUX&(0x1<< ADLAR))
     16c:	3d 9b       	sbis	0x07, 5	; 7
     16e:	0d c0       	rjmp	.+26     	; 0x18a <__vector_21+0x48>
			adc_val >>= 6;
     170:	00 24       	eor	r0, r0
     172:	88 0f       	add	r24, r24
     174:	99 1f       	adc	r25, r25
     176:	00 1c       	adc	r0, r0
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	00 1c       	adc	r0, r0
     17e:	89 2f       	mov	r24, r25
     180:	90 2d       	mov	r25, r0
     182:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <__data_end+0x1>
     186:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <__data_end>
	//BEEP(1);
	//LEDRUN;
	
	
	//ADCSRA |= (1 << ADSC);
}
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	2f 91       	pop	r18
     190:	0f 90       	pop	r0
     192:	0f be       	out	0x3f, r0	; 63
     194:	0f 90       	pop	r0
     196:	1f 90       	pop	r1
     198:	18 95       	reti

0000019a <BEEP_Init>:
¹¦ÄÜ£º·äÃùÆ÷ÏìÉù
*********************************/

void BEEP_Init(void)
{
	DDRB |= (1<<PB0);
     19a:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1<<PB0);
     19c:	c0 98       	cbi	0x18, 0	; 24
     19e:	08 95       	ret

000001a0 <BEEP>:
}

void BEEP(unsigned char sencond)//50*20ms = 1s
{
	unsigned char i;
	PORTB |= (1 << PB0);
     1a0:	c0 9a       	sbi	0x18, 0	; 24
	for (i = 0; i < sencond; i++)
     1a2:	88 23       	and	r24, r24
     1a4:	51 f0       	breq	.+20     	; 0x1ba <BEEP+0x1a>
     1a6:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a8:	ef ef       	ldi	r30, 0xFF	; 255
     1aa:	f7 ed       	ldi	r31, 0xD7	; 215
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <BEEP+0xc>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <BEEP+0x12>
     1b2:	00 00       	nop
     1b4:	9f 5f       	subi	r25, 0xFF	; 255
     1b6:	89 13       	cpse	r24, r25
     1b8:	f7 cf       	rjmp	.-18     	; 0x1a8 <BEEP+0x8>
	{
		_delay_ms(20);
	}
	PORTB &= ~(1 << PB0);
     1ba:	c0 98       	cbi	0x18, 0	; 24
     1bc:	08 95       	ret

000001be <EEPROM_Write_Buf>:
{
	unsigned char *tmp[2]={0};
	tmp[0] = count_chongxi >> 8;
	tmp[1] = count_chongxi;
	EEPROM_Write_Buf(44,2,tmp);
}
     1be:	1f ba       	out	0x1f, r1	; 31
     1c0:	66 23       	and	r22, r22
     1c2:	79 f0       	breq	.+30     	; 0x1e2 <EEPROM_Write_Buf+0x24>
     1c4:	98 2f       	mov	r25, r24
     1c6:	e4 2f       	mov	r30, r20
     1c8:	f5 2f       	mov	r31, r21
     1ca:	86 0f       	add	r24, r22
     1cc:	e1 99       	sbic	0x1c, 1	; 28
     1ce:	fe cf       	rjmp	.-4      	; 0x1cc <EEPROM_Write_Buf+0xe>
     1d0:	9e bb       	out	0x1e, r25	; 30
     1d2:	21 91       	ld	r18, Z+
     1d4:	2d bb       	out	0x1d, r18	; 29
     1d6:	e2 9a       	sbi	0x1c, 2	; 28
     1d8:	e1 98       	cbi	0x1c, 1	; 28
     1da:	e1 9a       	sbi	0x1c, 1	; 28
     1dc:	9f 5f       	subi	r25, 0xFF	; 255
     1de:	98 13       	cpse	r25, r24
     1e0:	f5 cf       	rjmp	.-22     	; 0x1cc <EEPROM_Write_Buf+0xe>
     1e2:	08 95       	ret

000001e4 <EEPROM_Read_Buf>:
     1e4:	e1 99       	sbic	0x1c, 1	; 28
     1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <EEPROM_Read_Buf>
     1e8:	1f ba       	out	0x1f, r1	; 31
     1ea:	66 23       	and	r22, r22
     1ec:	59 f0       	breq	.+22     	; 0x204 <EEPROM_Read_Buf+0x20>
     1ee:	98 2f       	mov	r25, r24
     1f0:	e4 2f       	mov	r30, r20
     1f2:	f5 2f       	mov	r31, r21
     1f4:	86 0f       	add	r24, r22
     1f6:	9e bb       	out	0x1e, r25	; 30
     1f8:	e0 9a       	sbi	0x1c, 0	; 28
     1fa:	2d b3       	in	r18, 0x1d	; 29
     1fc:	21 93       	st	Z+, r18
     1fe:	9f 5f       	subi	r25, 0xFF	; 255
     200:	98 13       	cpse	r25, r24
     202:	f9 cf       	rjmp	.-14     	; 0x1f6 <EEPROM_Read_Buf+0x12>
     204:	08 95       	ret

00000206 <Write_Init_EEPROM>:
     206:	45 ec       	ldi	r20, 0xC5	; 197
     208:	51 e0       	ldi	r21, 0x01	; 1
     20a:	62 e0       	ldi	r22, 0x02	; 2
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     214:	08 95       	ret

00000216 <Read_Init_EEPROM>:
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	ec 01       	movw	r28, r24
     21c:	ac 01       	movw	r20, r24
     21e:	62 e0       	ldi	r22, 0x02	; 2
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
     228:	ce 01       	movw	r24, r28
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <Check_Init>:
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	00 d0       	rcall	.+0      	; 0x236 <Check_Init+0x6>
     236:	00 d0       	rcall	.+0      	; 0x238 <Check_Init+0x8>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	19 82       	std	Y+1, r1	; 0x01
     23e:	1a 82       	std	Y+2, r1	; 0x02
     240:	1b 82       	std	Y+3, r1	; 0x03
     242:	1c 82       	std	Y+4, r1	; 0x04
     244:	ce 01       	movw	r24, r28
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	0e 94 0b 01 	call	0x216	; 0x216 <Read_Init_EEPROM>
     24c:	65 ec       	ldi	r22, 0xC5	; 197
     24e:	71 e0       	ldi	r23, 0x01	; 1
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <Write_STATUS_EEPROM>:
     266:	ac 01       	movw	r20, r24
     268:	62 e0       	ldi	r22, 0x02	; 2
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     272:	08 95       	ret

00000274 <Read_STATUS_EEPROM>:
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	ec 01       	movw	r28, r24
     27a:	ac 01       	movw	r20, r24
     27c:	62 e0       	ldi	r22, 0x02	; 2
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
     286:	ce 01       	movw	r24, r28
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <Write_TIME_EEPROM>:
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <Write_TIME_EEPROM+0x6>
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	99 83       	std	Y+1, r25	; 0x01
     29a:	8a 83       	std	Y+2, r24	; 0x02
     29c:	ae 01       	movw	r20, r28
     29e:	4f 5f       	subi	r20, 0xFF	; 255
     2a0:	5f 4f       	sbci	r21, 0xFF	; 255
     2a2:	62 e0       	ldi	r22, 0x02	; 2
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <Read_TIME_EEPROM>:
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <Read_TIME_EEPROM+0x6>
     2bc:	00 d0       	rcall	.+0      	; 0x2be <Read_TIME_EEPROM+0x8>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	19 82       	std	Y+1, r1	; 0x01
     2c4:	1a 82       	std	Y+2, r1	; 0x02
     2c6:	1b 82       	std	Y+3, r1	; 0x03
     2c8:	1c 82       	std	Y+4, r1	; 0x04
     2ca:	ae 01       	movw	r20, r28
     2cc:	4f 5f       	subi	r20, 0xFF	; 255
     2ce:	5f 4f       	sbci	r21, 0xFF	; 255
     2d0:	62 e0       	ldi	r22, 0x02	; 2
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	98 2f       	mov	r25, r24
     2e0:	88 27       	eor	r24, r24
     2e2:	2a 81       	ldd	r18, Y+2	; 0x02
     2e4:	82 2b       	or	r24, r18
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <Write_FLOW_EEPROM>:
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <Write_FLOW_EEPROM+0x6>
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	99 83       	std	Y+1, r25	; 0x01
     300:	8a 83       	std	Y+2, r24	; 0x02
     302:	ae 01       	movw	r20, r28
     304:	4f 5f       	subi	r20, 0xFF	; 255
     306:	5f 4f       	sbci	r21, 0xFF	; 255
     308:	62 e0       	ldi	r22, 0x02	; 2
     30a:	80 e1       	ldi	r24, 0x10	; 16
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <Read_FLOW_EEPROM>:
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <Read_FLOW_EEPROM+0x6>
     322:	00 d0       	rcall	.+0      	; 0x324 <Read_FLOW_EEPROM+0x8>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	19 82       	std	Y+1, r1	; 0x01
     32a:	1a 82       	std	Y+2, r1	; 0x02
     32c:	1b 82       	std	Y+3, r1	; 0x03
     32e:	1c 82       	std	Y+4, r1	; 0x04
     330:	ae 01       	movw	r20, r28
     332:	4f 5f       	subi	r20, 0xFF	; 255
     334:	5f 4f       	sbci	r21, 0xFF	; 255
     336:	62 e0       	ldi	r22, 0x02	; 2
     338:	80 e1       	ldi	r24, 0x10	; 16
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	98 2f       	mov	r25, r24
     346:	88 27       	eor	r24, r24
     348:	2a 81       	ldd	r18, Y+2	; 0x02
     34a:	82 2b       	or	r24, r18
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <Write_RAW_EEPROM>:
     35a:	ac 01       	movw	r20, r24
     35c:	64 e0       	ldi	r22, 0x04	; 4
     35e:	88 e1       	ldi	r24, 0x18	; 24
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     366:	08 95       	ret

00000368 <Read_RAW_EEPROM>:
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     36e:	ac 01       	movw	r20, r24
     370:	64 e0       	ldi	r22, 0x04	; 4
     372:	88 e1       	ldi	r24, 0x18	; 24
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
     37a:	ce 01       	movw	r24, r28
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <Write_PURE_EEPROM>:
     382:	ac 01       	movw	r20, r24
     384:	64 e0       	ldi	r22, 0x04	; 4
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     38e:	08 95       	ret

00000390 <Read_PURE_EEPROM>:
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
     396:	ac 01       	movw	r20, r24
     398:	64 e0       	ldi	r22, 0x04	; 4
     39a:	80 e2       	ldi	r24, 0x20	; 32
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
     3a2:	ce 01       	movw	r24, r28
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <Write_CMD_EEPROM>:
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	28 97       	sbiw	r28, 0x08	; 8
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	ae 01       	movw	r20, r28
     3c0:	4f 5f       	subi	r20, 0xFF	; 255
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	28 e0       	ldi	r18, 0x08	; 8
     3c6:	fa 01       	movw	r30, r20
     3c8:	11 92       	st	Z+, r1
     3ca:	2a 95       	dec	r18
     3cc:	e9 f7       	brne	.-6      	; 0x3c8 <Write_CMD_EEPROM+0x1e>
     3ce:	99 83       	std	Y+1, r25	; 0x01
     3d0:	1a 82       	std	Y+2, r1	; 0x02
     3d2:	8b 83       	std	Y+3, r24	; 0x03
     3d4:	9c 83       	std	Y+4, r25	; 0x04
     3d6:	62 e0       	ldi	r22, 0x02	; 2
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     3e0:	28 96       	adiw	r28, 0x08	; 8
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <Read_CMD_EEPROM>:
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <Read_CMD_EEPROM+0x6>
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <Read_CMD_EEPROM+0x8>
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	19 82       	std	Y+1, r1	; 0x01
     400:	1a 82       	std	Y+2, r1	; 0x02
     402:	1b 82       	std	Y+3, r1	; 0x03
     404:	1c 82       	std	Y+4, r1	; 0x04
     406:	ae 01       	movw	r20, r28
     408:	4f 5f       	subi	r20, 0xFF	; 255
     40a:	5f 4f       	sbci	r21, 0xFF	; 255
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	88 e2       	ldi	r24, 0x28	; 40
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	98 2f       	mov	r25, r24
     41c:	88 27       	eor	r24, r24
     41e:	2a 81       	ldd	r18, Y+2	; 0x02
     420:	82 2b       	or	r24, r18
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <Read_COUNT_CHONGXI_EEPROM>:
unsigned int Read_COUNT_CHONGXI_EEPROM()
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	00 d0       	rcall	.+0      	; 0x436 <Read_COUNT_CHONGXI_EEPROM+0x6>
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp[2] = {0};
     43a:	1a 82       	std	Y+2, r1	; 0x02
     43c:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_Read_Buf(44,2,tmp);
     43e:	ae 01       	movw	r20, r28
     440:	4f 5f       	subi	r20, 0xFF	; 255
     442:	5f 4f       	sbci	r21, 0xFF	; 255
     444:	62 e0       	ldi	r22, 0x02	; 2
     446:	8c e2       	ldi	r24, 0x2C	; 44
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
	return ((tmp[0]<<8) | tmp[1]);
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	98 2f       	mov	r25, r24
     454:	88 27       	eor	r24, r24
     456:	2a 81       	ldd	r18, Y+2	; 0x02

}
     458:	82 2b       	or	r24, r18
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <Write_YU_SUM_EEPROM>:

void Write_YU_SUM_EEPROM(unsigned int yu_sum_flow)
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	00 d0       	rcall	.+0      	; 0x46a <Write_YU_SUM_EEPROM+0x6>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp[2]={0};


	tmp[0] = yu_sum_flow >> 8;
     46e:	99 83       	std	Y+1, r25	; 0x01
	tmp[1] = yu_sum_flow;
     470:	8a 83       	std	Y+2, r24	; 0x02
	EEPROM_Write_Buf(48,2,tmp);
     472:	ae 01       	movw	r20, r28
     474:	4f 5f       	subi	r20, 0xFF	; 255
     476:	5f 4f       	sbci	r21, 0xFF	; 255
     478:	62 e0       	ldi	r22, 0x02	; 2
     47a:	80 e3       	ldi	r24, 0x30	; 48
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
}
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <Read_YU_SUM_EEPROM>:
unsigned int Read_YU_SUM_EEPROM()
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	00 d0       	rcall	.+0      	; 0x492 <Read_YU_SUM_EEPROM+0x6>
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp[2] = {0};
     496:	1a 82       	std	Y+2, r1	; 0x02
     498:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_Read_Buf(48,2,tmp);
     49a:	ae 01       	movw	r20, r28
     49c:	4f 5f       	subi	r20, 0xFF	; 255
     49e:	5f 4f       	sbci	r21, 0xFF	; 255
     4a0:	62 e0       	ldi	r22, 0x02	; 2
     4a2:	80 e3       	ldi	r24, 0x30	; 48
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
	return ((tmp[0]<<8) | tmp[1]);
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	98 2f       	mov	r25, r24
     4b0:	88 27       	eor	r24, r24
     4b2:	2a 81       	ldd	r18, Y+2	; 0x02

}
     4b4:	82 2b       	or	r24, r18
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <Write_VIUV_TIME_EEPROM>:




void Write_VIUV_TIME_EEPROM(unsigned char viuv_time)
{
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	28 97       	sbiw	r28, 0x08	; 8
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
	unsigned char viuv_time_tmp[8] = {0};
     4d8:	8e 01       	movw	r16, r28
     4da:	0f 5f       	subi	r16, 0xFF	; 255
     4dc:	1f 4f       	sbci	r17, 0xFF	; 255
     4de:	98 e0       	ldi	r25, 0x08	; 8
     4e0:	f8 01       	movw	r30, r16
     4e2:	11 92       	st	Z+, r1
     4e4:	9a 95       	dec	r25
     4e6:	e9 f7       	brne	.-6      	; 0x4e2 <Write_VIUV_TIME_EEPROM+0x22>
	itoa(viuv_time_tmp,viuv_time); 	
     4e8:	68 2f       	mov	r22, r24
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	c8 01       	movw	r24, r16
     4ee:	0e 94 b8 07 	call	0xf70	; 0xf70 <itoa>
	EEPROM_Write_Buf(52,4,viuv_time_tmp);
     4f2:	a8 01       	movw	r20, r16
     4f4:	64 e0       	ldi	r22, 0x04	; 4
     4f6:	84 e3       	ldi	r24, 0x34	; 52
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
}
     4fe:	28 96       	adiw	r28, 0x08	; 8
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	08 95       	ret

00000514 <Read__VIUV_TIME_EEPROM>:

unsigned int Read__VIUV_TIME_EEPROM(void)
{
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	28 97       	sbiw	r28, 0x08	; 8
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	unsigned char viuv_time_tmp[8] = {0};
     52c:	8e 01       	movw	r16, r28
     52e:	0f 5f       	subi	r16, 0xFF	; 255
     530:	1f 4f       	sbci	r17, 0xFF	; 255
     532:	88 e0       	ldi	r24, 0x08	; 8
     534:	f8 01       	movw	r30, r16
     536:	11 92       	st	Z+, r1
     538:	8a 95       	dec	r24
     53a:	e9 f7       	brne	.-6      	; 0x536 <Read__VIUV_TIME_EEPROM+0x22>
	EEPROM_Read_Buf(52,4,viuv_time_tmp);
     53c:	a8 01       	movw	r20, r16
     53e:	64 e0       	ldi	r22, 0x04	; 4
     540:	84 e3       	ldi	r24, 0x34	; 52
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
	return atoi(viuv_time_tmp);
     548:	c8 01       	movw	r24, r16
     54a:	0e 94 0c 18 	call	0x3018	; 0x3018 <atoi>
}
     54e:	28 96       	adiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <Write_Filte_CntV_EEPROM>:
#if 1
//60-72
void Write_Filte_CntV_EEPROM(unsigned char *filte_cntv)
{
	EEPROM_Write_Buf(60,2*Filte_num,filte_cntv);
     564:	ac 01       	movw	r20, r24
     566:	66 e0       	ldi	r22, 0x06	; 6
     568:	8c e3       	ldi	r24, 0x3C	; 60
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_Write_Buf>
     570:	08 95       	ret

00000572 <Read_Filte_CntV_EEPROM>:
}
unsigned char *Read_Filte_CntV_EEPROM(unsigned char *filte_cntv)
{
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ec 01       	movw	r28, r24
	EEPROM_Read_Buf(60,8,filte_cntv);
     578:	ac 01       	movw	r20, r24
     57a:	68 e0       	ldi	r22, 0x08	; 8
     57c:	8c e3       	ldi	r24, 0x3C	; 60
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EEPROM_Read_Buf>
	return filte_cntv;
}
     584:	ce 01       	movw	r24, r28
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <GPRS_PROT>:
		}
		Str_Add_Str(Rece_Data,0,&(GPRS_Receive[11]),len);
		//USART0_Transmit_nChar(Rece_Data,len);
		//while(1);
	return len;
}
     58c:	d3 9a       	sbi	0x1a, 3	; 26
     58e:	db 9a       	sbi	0x1b, 3	; 27
     590:	d2 9a       	sbi	0x1a, 2	; 26
     592:	c2 98       	cbi	0x18, 2	; 24
     594:	08 95       	ret

00000596 <GET_GPRS_Signal>:
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ca 99       	sbic	0x19, 2	; 25
     5a2:	73 c4       	rjmp	.+2278   	; 0xe8a <GET_GPRS_Signal+0x8f4>
     5a4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     5a8:	85 ff       	sbrs	r24, 5
     5aa:	09 c0       	rjmp	.+18     	; 0x5be <GET_GPRS_Signal+0x28>
     5ac:	2f ef       	ldi	r18, 0xFF	; 255
     5ae:	3f e3       	ldi	r19, 0x3F	; 63
     5b0:	45 e6       	ldi	r20, 0x65	; 101
     5b2:	21 50       	subi	r18, 0x01	; 1
     5b4:	30 40       	sbci	r19, 0x00	; 0
     5b6:	40 40       	sbci	r20, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <GET_GPRS_Signal+0x1c>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <GET_GPRS_Signal+0x26>
     5bc:	00 00       	nop
     5be:	c2 e0       	ldi	r28, 0x02	; 2
     5c0:	04 e0       	ldi	r16, 0x04	; 4
     5c2:	15 e0       	ldi	r17, 0x05	; 5
     5c4:	d4 e6       	ldi	r29, 0x64	; 100
     5c6:	f8 01       	movw	r30, r16
     5c8:	2d 2f       	mov	r18, r29
     5ca:	11 92       	st	Z+, r1
     5cc:	2a 95       	dec	r18
     5ce:	e9 f7       	brne	.-6      	; 0x5ca <GET_GPRS_Signal+0x34>
     5d0:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     5d4:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     5d8:	81 e8       	ldi	r24, 0x81	; 129
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     5e0:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     5e4:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     5e8:	c9 01       	movw	r24, r18
     5ea:	8a 75       	andi	r24, 0x5A	; 90
     5ec:	99 27       	eor	r25, r25
     5ee:	89 2b       	or	r24, r25
     5f0:	89 f4       	brne	.+34     	; 0x614 <GET_GPRS_Signal+0x7e>
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	9f e0       	ldi	r25, 0x0F	; 15
     5f6:	38 eb       	ldi	r19, 0xB8	; 184
     5f8:	3a 95       	dec	r19
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <GET_GPRS_Signal+0x62>
     5fc:	00 00       	nop
     5fe:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     602:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     606:	a9 01       	movw	r20, r18
     608:	4a 75       	andi	r20, 0x5A	; 90
     60a:	55 27       	eor	r21, r21
     60c:	45 2b       	or	r20, r21
     60e:	11 f4       	brne	.+4      	; 0x614 <GET_GPRS_Signal+0x7e>
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	89 f7       	brne	.-30     	; 0x5f6 <GET_GPRS_Signal+0x60>
     614:	24 fd       	sbrc	r18, 4
     616:	e0 c3       	rjmp	.+1984   	; 0xdd8 <GET_GPRS_Signal+0x842>
     618:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     61c:	86 fd       	sbrc	r24, 6
     61e:	dc c3       	rjmp	.+1976   	; 0xdd8 <GET_GPRS_Signal+0x842>
     620:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     624:	81 11       	cpse	r24, r1
     626:	d8 c3       	rjmp	.+1968   	; 0xdd8 <GET_GPRS_Signal+0x842>
     628:	23 fd       	sbrc	r18, 3
     62a:	d6 c3       	rjmp	.+1964   	; 0xdd8 <GET_GPRS_Signal+0x842>
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	8f ed       	ldi	r24, 0xDF	; 223
     630:	90 e1       	ldi	r25, 0x10	; 16
     632:	41 50       	subi	r20, 0x01	; 1
     634:	80 40       	sbci	r24, 0x00	; 0
     636:	90 40       	sbci	r25, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <GET_GPRS_Signal+0x9c>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <GET_GPRS_Signal+0xa6>
     63c:	00 00       	nop
     63e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     642:	81 ff       	sbrs	r24, 1
     644:	09 c0       	rjmp	.+18     	; 0x658 <GET_GPRS_Signal+0xc2>
     646:	ef ef       	ldi	r30, 0xFF	; 255
     648:	ff e1       	ldi	r31, 0x1F	; 31
     64a:	2a e0       	ldi	r18, 0x0A	; 10
     64c:	e1 50       	subi	r30, 0x01	; 1
     64e:	f0 40       	sbci	r31, 0x00	; 0
     650:	20 40       	sbci	r18, 0x00	; 0
     652:	e1 f7       	brne	.-8      	; 0x64c <GET_GPRS_Signal+0xb6>
     654:	00 c0       	rjmp	.+0      	; 0x656 <GET_GPRS_Signal+0xc0>
     656:	00 00       	nop
     658:	c1 50       	subi	r28, 0x01	; 1
     65a:	09 f4       	brne	.+2      	; 0x65e <GET_GPRS_Signal+0xc8>
     65c:	cb c3       	rjmp	.+1942   	; 0xdf4 <GET_GPRS_Signal+0x85e>
     65e:	b3 cf       	rjmp	.-154    	; 0x5c6 <GET_GPRS_Signal+0x30>
     660:	da 9a       	sbi	0x1b, 2	; 27
     662:	3f ef       	ldi	r19, 0xFF	; 255
     664:	4f eb       	ldi	r20, 0xBF	; 191
     666:	86 e0       	ldi	r24, 0x06	; 6
     668:	31 50       	subi	r19, 0x01	; 1
     66a:	40 40       	sbci	r20, 0x00	; 0
     66c:	80 40       	sbci	r24, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <GET_GPRS_Signal+0xd2>
     670:	00 c0       	rjmp	.+0      	; 0x672 <GET_GPRS_Signal+0xdc>
     672:	00 00       	nop
     674:	da 98       	cbi	0x1b, 2	; 27
     676:	9f ef       	ldi	r25, 0xFF	; 255
     678:	ef e3       	ldi	r30, 0x3F	; 63
     67a:	f5 e6       	ldi	r31, 0x65	; 101
     67c:	91 50       	subi	r25, 0x01	; 1
     67e:	e0 40       	sbci	r30, 0x00	; 0
     680:	f0 40       	sbci	r31, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <GET_GPRS_Signal+0xe6>
     684:	00 c0       	rjmp	.+0      	; 0x686 <GET_GPRS_Signal+0xf0>
     686:	00 00       	nop
     688:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     68c:	85 fd       	sbrc	r24, 5
     68e:	c5 c3       	rjmp	.+1930   	; 0xe1a <GET_GPRS_Signal+0x884>
     690:	86 e9       	ldi	r24, 0x96	; 150
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	ef ef       	ldi	r30, 0xFF	; 255
     696:	f7 ed       	ldi	r31, 0xD7	; 215
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <GET_GPRS_Signal+0x102>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <GET_GPRS_Signal+0x108>
     69e:	00 00       	nop
     6a0:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     6a4:	25 fd       	sbrc	r18, 5
     6a6:	b9 c3       	rjmp	.+1906   	; 0xe1a <GET_GPRS_Signal+0x884>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	a1 f7       	brne	.-24     	; 0x694 <GET_GPRS_Signal+0xfe>
     6ac:	b3 c3       	rjmp	.+1894   	; 0xe14 <GET_GPRS_Signal+0x87e>
     6ae:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     6b2:	86 ff       	sbrs	r24, 6
     6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <GET_GPRS_Signal+0x12e>
     6b6:	17 c0       	rjmp	.+46     	; 0x6e6 <GET_GPRS_Signal+0x150>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <BEEP>
     6be:	82 9b       	sbis	0x10, 2	; 16
     6c0:	cf cf       	rjmp	.-98     	; 0x660 <GET_GPRS_Signal+0xca>
     6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <GET_GPRS_Signal+0x150>
     6c4:	84 ef       	ldi	r24, 0xF4	; 244
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	ff ef       	ldi	r31, 0xFF	; 255
     6ca:	2f ea       	ldi	r18, 0xAF	; 175
     6cc:	31 e0       	ldi	r19, 0x01	; 1
     6ce:	f1 50       	subi	r31, 0x01	; 1
     6d0:	20 40       	sbci	r18, 0x00	; 0
     6d2:	30 40       	sbci	r19, 0x00	; 0
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <GET_GPRS_Signal+0x138>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <GET_GPRS_Signal+0x142>
     6d8:	00 00       	nop
     6da:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     6de:	26 fd       	sbrc	r18, 6
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <GET_GPRS_Signal+0x150>
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	89 f7       	brne	.-30     	; 0x6c8 <GET_GPRS_Signal+0x132>
     6e6:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <SCQ>
     6ea:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     6ee:	8f 7b       	andi	r24, 0xBF	; 191
     6f0:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
     6f4:	ca c3       	rjmp	.+1940   	; 0xe8a <GET_GPRS_Signal+0x8f4>
     6f6:	f8 01       	movw	r30, r16
     6f8:	2d 2f       	mov	r18, r29
     6fa:	11 92       	st	Z+, r1
     6fc:	2a 95       	dec	r18
     6fe:	e9 f7       	brne	.-6      	; 0x6fa <GET_GPRS_Signal+0x164>
     700:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     704:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     708:	80 e7       	ldi	r24, 0x70	; 112
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     710:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     714:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     718:	c9 01       	movw	r24, r18
     71a:	8a 75       	andi	r24, 0x5A	; 90
     71c:	99 27       	eor	r25, r25
     71e:	89 2b       	or	r24, r25
     720:	89 f4       	brne	.+34     	; 0x744 <GET_GPRS_Signal+0x1ae>
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	9f e0       	ldi	r25, 0x0F	; 15
     726:	38 eb       	ldi	r19, 0xB8	; 184
     728:	3a 95       	dec	r19
     72a:	f1 f7       	brne	.-4      	; 0x728 <GET_GPRS_Signal+0x192>
     72c:	00 00       	nop
     72e:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     732:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     736:	a9 01       	movw	r20, r18
     738:	4a 75       	andi	r20, 0x5A	; 90
     73a:	55 27       	eor	r21, r21
     73c:	45 2b       	or	r20, r21
     73e:	11 f4       	brne	.+4      	; 0x744 <GET_GPRS_Signal+0x1ae>
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	89 f7       	brne	.-30     	; 0x726 <GET_GPRS_Signal+0x190>
     744:	24 fd       	sbrc	r18, 4
     746:	6c c3       	rjmp	.+1752   	; 0xe20 <GET_GPRS_Signal+0x88a>
     748:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     74c:	86 fd       	sbrc	r24, 6
     74e:	68 c3       	rjmp	.+1744   	; 0xe20 <GET_GPRS_Signal+0x88a>
     750:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     754:	81 11       	cpse	r24, r1
     756:	64 c3       	rjmp	.+1736   	; 0xe20 <GET_GPRS_Signal+0x88a>
     758:	23 fd       	sbrc	r18, 3
     75a:	62 c3       	rjmp	.+1732   	; 0xe20 <GET_GPRS_Signal+0x88a>
     75c:	4f ef       	ldi	r20, 0xFF	; 255
     75e:	8f ed       	ldi	r24, 0xDF	; 223
     760:	90 e1       	ldi	r25, 0x10	; 16
     762:	41 50       	subi	r20, 0x01	; 1
     764:	80 40       	sbci	r24, 0x00	; 0
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <GET_GPRS_Signal+0x1cc>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <GET_GPRS_Signal+0x1d6>
     76c:	00 00       	nop
     76e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     772:	81 ff       	sbrs	r24, 1
     774:	09 c0       	rjmp	.+18     	; 0x788 <GET_GPRS_Signal+0x1f2>
     776:	ef ef       	ldi	r30, 0xFF	; 255
     778:	ff e1       	ldi	r31, 0x1F	; 31
     77a:	2a e0       	ldi	r18, 0x0A	; 10
     77c:	e1 50       	subi	r30, 0x01	; 1
     77e:	f0 40       	sbci	r31, 0x00	; 0
     780:	20 40       	sbci	r18, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <GET_GPRS_Signal+0x1e6>
     784:	00 c0       	rjmp	.+0      	; 0x786 <GET_GPRS_Signal+0x1f0>
     786:	00 00       	nop
     788:	c1 50       	subi	r28, 0x01	; 1
     78a:	09 f4       	brne	.+2      	; 0x78e <GET_GPRS_Signal+0x1f8>
     78c:	7e c3       	rjmp	.+1788   	; 0xe8a <GET_GPRS_Signal+0x8f4>
     78e:	b3 cf       	rjmp	.-154    	; 0x6f6 <GET_GPRS_Signal+0x160>
     790:	f8 01       	movw	r30, r16
     792:	2d 2f       	mov	r18, r29
     794:	11 92       	st	Z+, r1
     796:	2a 95       	dec	r18
     798:	e9 f7       	brne	.-6      	; 0x794 <GET_GPRS_Signal+0x1fe>
     79a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     79e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     7a2:	87 e6       	ldi	r24, 0x67	; 103
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     7aa:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     7ae:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     7b2:	c9 01       	movw	r24, r18
     7b4:	8a 75       	andi	r24, 0x5A	; 90
     7b6:	99 27       	eor	r25, r25
     7b8:	89 2b       	or	r24, r25
     7ba:	89 f4       	brne	.+34     	; 0x7de <GET_GPRS_Signal+0x248>
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	9f e0       	ldi	r25, 0x0F	; 15
     7c0:	38 eb       	ldi	r19, 0xB8	; 184
     7c2:	3a 95       	dec	r19
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <GET_GPRS_Signal+0x22c>
     7c6:	00 00       	nop
     7c8:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     7cc:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     7d0:	a9 01       	movw	r20, r18
     7d2:	4a 75       	andi	r20, 0x5A	; 90
     7d4:	55 27       	eor	r21, r21
     7d6:	45 2b       	or	r20, r21
     7d8:	11 f4       	brne	.+4      	; 0x7de <GET_GPRS_Signal+0x248>
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	89 f7       	brne	.-30     	; 0x7c0 <GET_GPRS_Signal+0x22a>
     7de:	24 fd       	sbrc	r18, 4
     7e0:	2d c3       	rjmp	.+1626   	; 0xe3c <GET_GPRS_Signal+0x8a6>
     7e2:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     7e6:	86 fd       	sbrc	r24, 6
     7e8:	29 c3       	rjmp	.+1618   	; 0xe3c <GET_GPRS_Signal+0x8a6>
     7ea:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     7ee:	81 11       	cpse	r24, r1
     7f0:	25 c3       	rjmp	.+1610   	; 0xe3c <GET_GPRS_Signal+0x8a6>
     7f2:	23 fd       	sbrc	r18, 3
     7f4:	23 c3       	rjmp	.+1606   	; 0xe3c <GET_GPRS_Signal+0x8a6>
     7f6:	4f ef       	ldi	r20, 0xFF	; 255
     7f8:	8f ed       	ldi	r24, 0xDF	; 223
     7fa:	90 e1       	ldi	r25, 0x10	; 16
     7fc:	41 50       	subi	r20, 0x01	; 1
     7fe:	80 40       	sbci	r24, 0x00	; 0
     800:	90 40       	sbci	r25, 0x00	; 0
     802:	e1 f7       	brne	.-8      	; 0x7fc <GET_GPRS_Signal+0x266>
     804:	00 c0       	rjmp	.+0      	; 0x806 <GET_GPRS_Signal+0x270>
     806:	00 00       	nop
     808:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     80c:	81 ff       	sbrs	r24, 1
     80e:	09 c0       	rjmp	.+18     	; 0x822 <GET_GPRS_Signal+0x28c>
     810:	ef ef       	ldi	r30, 0xFF	; 255
     812:	ff e1       	ldi	r31, 0x1F	; 31
     814:	2a e0       	ldi	r18, 0x0A	; 10
     816:	e1 50       	subi	r30, 0x01	; 1
     818:	f0 40       	sbci	r31, 0x00	; 0
     81a:	20 40       	sbci	r18, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <GET_GPRS_Signal+0x280>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <GET_GPRS_Signal+0x28a>
     820:	00 00       	nop
     822:	c1 50       	subi	r28, 0x01	; 1
     824:	09 f4       	brne	.+2      	; 0x828 <GET_GPRS_Signal+0x292>
     826:	31 c3       	rjmp	.+1634   	; 0xe8a <GET_GPRS_Signal+0x8f4>
     828:	b3 cf       	rjmp	.-154    	; 0x790 <GET_GPRS_Signal+0x1fa>
     82a:	3f ef       	ldi	r19, 0xFF	; 255
     82c:	4f e5       	ldi	r20, 0x5F	; 95
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	31 50       	subi	r19, 0x01	; 1
     832:	40 40       	sbci	r20, 0x00	; 0
     834:	80 40       	sbci	r24, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <GET_GPRS_Signal+0x29a>
     838:	00 c0       	rjmp	.+0      	; 0x83a <GET_GPRS_Signal+0x2a4>
     83a:	00 00       	nop
     83c:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     840:	88 23       	and	r24, r24
     842:	5c f4       	brge	.+22     	; 0x85a <GET_GPRS_Signal+0x2c4>
     844:	22 c3       	rjmp	.+1604   	; 0xe8a <GET_GPRS_Signal+0x8f4>
     846:	9f ef       	ldi	r25, 0xFF	; 255
     848:	ef e5       	ldi	r30, 0x5F	; 95
     84a:	f3 e0       	ldi	r31, 0x03	; 3
     84c:	91 50       	subi	r25, 0x01	; 1
     84e:	e0 40       	sbci	r30, 0x00	; 0
     850:	f0 40       	sbci	r31, 0x00	; 0
     852:	e1 f7       	brne	.-8      	; 0x84c <GET_GPRS_Signal+0x2b6>
     854:	00 c0       	rjmp	.+0      	; 0x856 <GET_GPRS_Signal+0x2c0>
     856:	00 00       	nop
     858:	07 c0       	rjmp	.+14     	; 0x868 <GET_GPRS_Signal+0x2d2>
     85a:	0f 2e       	mov	r0, r31
     85c:	f3 e0       	ldi	r31, 0x03	; 3
     85e:	ff 2e       	mov	r15, r31
     860:	f0 2d       	mov	r31, r0
     862:	04 e0       	ldi	r16, 0x04	; 4
     864:	15 e0       	ldi	r17, 0x05	; 5
     866:	d4 e6       	ldi	r29, 0x64	; 100
     868:	c2 e0       	ldi	r28, 0x02	; 2
     86a:	f8 01       	movw	r30, r16
     86c:	2d 2f       	mov	r18, r29
     86e:	11 92       	st	Z+, r1
     870:	2a 95       	dec	r18
     872:	e9 f7       	brne	.-6      	; 0x86e <GET_GPRS_Signal+0x2d8>
     874:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     878:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     87c:	81 e8       	ldi	r24, 0x81	; 129
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     884:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     888:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     88c:	c9 01       	movw	r24, r18
     88e:	8a 75       	andi	r24, 0x5A	; 90
     890:	99 27       	eor	r25, r25
     892:	89 2b       	or	r24, r25
     894:	89 f4       	brne	.+34     	; 0x8b8 <GET_GPRS_Signal+0x322>
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	9f e0       	ldi	r25, 0x0F	; 15
     89a:	38 eb       	ldi	r19, 0xB8	; 184
     89c:	3a 95       	dec	r19
     89e:	f1 f7       	brne	.-4      	; 0x89c <GET_GPRS_Signal+0x306>
     8a0:	00 00       	nop
     8a2:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     8a6:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     8aa:	a9 01       	movw	r20, r18
     8ac:	4a 75       	andi	r20, 0x5A	; 90
     8ae:	55 27       	eor	r21, r21
     8b0:	45 2b       	or	r20, r21
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <GET_GPRS_Signal+0x322>
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	89 f7       	brne	.-30     	; 0x89a <GET_GPRS_Signal+0x304>
     8b8:	24 fd       	sbrc	r18, 4
     8ba:	24 c0       	rjmp	.+72     	; 0x904 <GET_GPRS_Signal+0x36e>
     8bc:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     8c0:	86 fd       	sbrc	r24, 6
     8c2:	20 c0       	rjmp	.+64     	; 0x904 <GET_GPRS_Signal+0x36e>
     8c4:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     8c8:	81 11       	cpse	r24, r1
     8ca:	1c c0       	rjmp	.+56     	; 0x904 <GET_GPRS_Signal+0x36e>
     8cc:	23 fd       	sbrc	r18, 3
     8ce:	1a c0       	rjmp	.+52     	; 0x904 <GET_GPRS_Signal+0x36e>
     8d0:	4f ef       	ldi	r20, 0xFF	; 255
     8d2:	8f ed       	ldi	r24, 0xDF	; 223
     8d4:	90 e1       	ldi	r25, 0x10	; 16
     8d6:	41 50       	subi	r20, 0x01	; 1
     8d8:	80 40       	sbci	r24, 0x00	; 0
     8da:	90 40       	sbci	r25, 0x00	; 0
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <GET_GPRS_Signal+0x340>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <GET_GPRS_Signal+0x34a>
     8e0:	00 00       	nop
     8e2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     8e6:	81 ff       	sbrs	r24, 1
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <GET_GPRS_Signal+0x366>
     8ea:	ef ef       	ldi	r30, 0xFF	; 255
     8ec:	ff e1       	ldi	r31, 0x1F	; 31
     8ee:	2a e0       	ldi	r18, 0x0A	; 10
     8f0:	e1 50       	subi	r30, 0x01	; 1
     8f2:	f0 40       	sbci	r31, 0x00	; 0
     8f4:	20 40       	sbci	r18, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <GET_GPRS_Signal+0x35a>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <GET_GPRS_Signal+0x364>
     8fa:	00 00       	nop
     8fc:	c1 50       	subi	r28, 0x01	; 1
     8fe:	09 f4       	brne	.+2      	; 0x902 <GET_GPRS_Signal+0x36c>
     900:	a8 c2       	rjmp	.+1360   	; 0xe52 <GET_GPRS_Signal+0x8bc>
     902:	b3 cf       	rjmp	.-154    	; 0x86a <GET_GPRS_Signal+0x2d4>
     904:	0f 2e       	mov	r0, r31
     906:	f3 e0       	ldi	r31, 0x03	; 3
     908:	ff 2e       	mov	r15, r31
     90a:	f0 2d       	mov	r31, r0
     90c:	04 e0       	ldi	r16, 0x04	; 4
     90e:	15 e0       	ldi	r17, 0x05	; 5
     910:	d4 e6       	ldi	r29, 0x64	; 100
     912:	09 c0       	rjmp	.+18     	; 0x926 <GET_GPRS_Signal+0x390>
     914:	3f ef       	ldi	r19, 0xFF	; 255
     916:	4f e5       	ldi	r20, 0x5F	; 95
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	31 50       	subi	r19, 0x01	; 1
     91c:	40 40       	sbci	r20, 0x00	; 0
     91e:	80 40       	sbci	r24, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <GET_GPRS_Signal+0x384>
     922:	00 c0       	rjmp	.+0      	; 0x924 <GET_GPRS_Signal+0x38e>
     924:	00 00       	nop
     926:	c2 e0       	ldi	r28, 0x02	; 2
     928:	f8 01       	movw	r30, r16
     92a:	2d 2f       	mov	r18, r29
     92c:	11 92       	st	Z+, r1
     92e:	2a 95       	dec	r18
     930:	e9 f7       	brne	.-6      	; 0x92c <GET_GPRS_Signal+0x396>
     932:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     936:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     93a:	8a e7       	ldi	r24, 0x7A	; 122
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     942:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     946:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     94a:	c9 01       	movw	r24, r18
     94c:	8a 75       	andi	r24, 0x5A	; 90
     94e:	99 27       	eor	r25, r25
     950:	89 2b       	or	r24, r25
     952:	89 f4       	brne	.+34     	; 0x976 <GET_GPRS_Signal+0x3e0>
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	9f e0       	ldi	r25, 0x0F	; 15
     958:	38 eb       	ldi	r19, 0xB8	; 184
     95a:	3a 95       	dec	r19
     95c:	f1 f7       	brne	.-4      	; 0x95a <GET_GPRS_Signal+0x3c4>
     95e:	00 00       	nop
     960:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     964:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     968:	a9 01       	movw	r20, r18
     96a:	4a 75       	andi	r20, 0x5A	; 90
     96c:	55 27       	eor	r21, r21
     96e:	45 2b       	or	r20, r21
     970:	11 f4       	brne	.+4      	; 0x976 <GET_GPRS_Signal+0x3e0>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	89 f7       	brne	.-30     	; 0x958 <GET_GPRS_Signal+0x3c2>
     976:	24 fd       	sbrc	r18, 4
     978:	24 c0       	rjmp	.+72     	; 0x9c2 <GET_GPRS_Signal+0x42c>
     97a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     97e:	86 fd       	sbrc	r24, 6
     980:	20 c0       	rjmp	.+64     	; 0x9c2 <GET_GPRS_Signal+0x42c>
     982:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     986:	81 11       	cpse	r24, r1
     988:	1c c0       	rjmp	.+56     	; 0x9c2 <GET_GPRS_Signal+0x42c>
     98a:	23 fd       	sbrc	r18, 3
     98c:	1a c0       	rjmp	.+52     	; 0x9c2 <GET_GPRS_Signal+0x42c>
     98e:	4f ef       	ldi	r20, 0xFF	; 255
     990:	8f ed       	ldi	r24, 0xDF	; 223
     992:	90 e1       	ldi	r25, 0x10	; 16
     994:	41 50       	subi	r20, 0x01	; 1
     996:	80 40       	sbci	r24, 0x00	; 0
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <GET_GPRS_Signal+0x3fe>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <GET_GPRS_Signal+0x408>
     99e:	00 00       	nop
     9a0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     9a4:	81 ff       	sbrs	r24, 1
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <GET_GPRS_Signal+0x424>
     9a8:	ef ef       	ldi	r30, 0xFF	; 255
     9aa:	ff e1       	ldi	r31, 0x1F	; 31
     9ac:	2a e0       	ldi	r18, 0x0A	; 10
     9ae:	e1 50       	subi	r30, 0x01	; 1
     9b0:	f0 40       	sbci	r31, 0x00	; 0
     9b2:	20 40       	sbci	r18, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <GET_GPRS_Signal+0x418>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <GET_GPRS_Signal+0x422>
     9b8:	00 00       	nop
     9ba:	c1 50       	subi	r28, 0x01	; 1
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <GET_GPRS_Signal+0x42a>
     9be:	4d c2       	rjmp	.+1178   	; 0xe5a <GET_GPRS_Signal+0x8c4>
     9c0:	b3 cf       	rjmp	.-154    	; 0x928 <GET_GPRS_Signal+0x392>
     9c2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     9c6:	84 ff       	sbrs	r24, 4
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <GET_GPRS_Signal+0x43e>
     9ca:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <gprs_flag>
     9ce:	8e 7f       	andi	r24, 0xFE	; 254
     9d0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <gprs_flag>
     9d4:	0f 2e       	mov	r0, r31
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	ff 2e       	mov	r15, r31
     9da:	f0 2d       	mov	r31, r0
     9dc:	04 e0       	ldi	r16, 0x04	; 4
     9de:	15 e0       	ldi	r17, 0x05	; 5
     9e0:	d4 e6       	ldi	r29, 0x64	; 100
     9e2:	09 c0       	rjmp	.+18     	; 0x9f6 <GET_GPRS_Signal+0x460>
     9e4:	3f ef       	ldi	r19, 0xFF	; 255
     9e6:	4f e5       	ldi	r20, 0x5F	; 95
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	31 50       	subi	r19, 0x01	; 1
     9ec:	40 40       	sbci	r20, 0x00	; 0
     9ee:	80 40       	sbci	r24, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <GET_GPRS_Signal+0x454>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <GET_GPRS_Signal+0x45e>
     9f4:	00 00       	nop
     9f6:	c2 e0       	ldi	r28, 0x02	; 2
     9f8:	f8 01       	movw	r30, r16
     9fa:	2d 2f       	mov	r18, r29
     9fc:	11 92       	st	Z+, r1
     9fe:	2a 95       	dec	r18
     a00:	e9 f7       	brne	.-6      	; 0x9fc <GET_GPRS_Signal+0x466>
     a02:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     a06:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     a0a:	80 e7       	ldi	r24, 0x70	; 112
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     a12:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     a16:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     a1a:	c9 01       	movw	r24, r18
     a1c:	8a 75       	andi	r24, 0x5A	; 90
     a1e:	99 27       	eor	r25, r25
     a20:	89 2b       	or	r24, r25
     a22:	89 f4       	brne	.+34     	; 0xa46 <GET_GPRS_Signal+0x4b0>
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	9f e0       	ldi	r25, 0x0F	; 15
     a28:	38 eb       	ldi	r19, 0xB8	; 184
     a2a:	3a 95       	dec	r19
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <GET_GPRS_Signal+0x494>
     a2e:	00 00       	nop
     a30:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     a34:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     a38:	a9 01       	movw	r20, r18
     a3a:	4a 75       	andi	r20, 0x5A	; 90
     a3c:	55 27       	eor	r21, r21
     a3e:	45 2b       	or	r20, r21
     a40:	11 f4       	brne	.+4      	; 0xa46 <GET_GPRS_Signal+0x4b0>
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	89 f7       	brne	.-30     	; 0xa28 <GET_GPRS_Signal+0x492>
     a46:	24 fd       	sbrc	r18, 4
     a48:	24 c0       	rjmp	.+72     	; 0xa92 <GET_GPRS_Signal+0x4fc>
     a4a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     a4e:	86 fd       	sbrc	r24, 6
     a50:	20 c0       	rjmp	.+64     	; 0xa92 <GET_GPRS_Signal+0x4fc>
     a52:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     a56:	81 11       	cpse	r24, r1
     a58:	1c c0       	rjmp	.+56     	; 0xa92 <GET_GPRS_Signal+0x4fc>
     a5a:	23 fd       	sbrc	r18, 3
     a5c:	1a c0       	rjmp	.+52     	; 0xa92 <GET_GPRS_Signal+0x4fc>
     a5e:	4f ef       	ldi	r20, 0xFF	; 255
     a60:	8f ed       	ldi	r24, 0xDF	; 223
     a62:	90 e1       	ldi	r25, 0x10	; 16
     a64:	41 50       	subi	r20, 0x01	; 1
     a66:	80 40       	sbci	r24, 0x00	; 0
     a68:	90 40       	sbci	r25, 0x00	; 0
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <GET_GPRS_Signal+0x4ce>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <GET_GPRS_Signal+0x4d8>
     a6e:	00 00       	nop
     a70:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     a74:	81 ff       	sbrs	r24, 1
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <GET_GPRS_Signal+0x4f4>
     a78:	ef ef       	ldi	r30, 0xFF	; 255
     a7a:	ff e1       	ldi	r31, 0x1F	; 31
     a7c:	2a e0       	ldi	r18, 0x0A	; 10
     a7e:	e1 50       	subi	r30, 0x01	; 1
     a80:	f0 40       	sbci	r31, 0x00	; 0
     a82:	20 40       	sbci	r18, 0x00	; 0
     a84:	e1 f7       	brne	.-8      	; 0xa7e <GET_GPRS_Signal+0x4e8>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <GET_GPRS_Signal+0x4f2>
     a88:	00 00       	nop
     a8a:	c1 50       	subi	r28, 0x01	; 1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <GET_GPRS_Signal+0x4fa>
     a8e:	e9 c1       	rjmp	.+978    	; 0xe62 <GET_GPRS_Signal+0x8cc>
     a90:	b3 cf       	rjmp	.-154    	; 0x9f8 <GET_GPRS_Signal+0x462>
     a92:	0f 2e       	mov	r0, r31
     a94:	f3 e0       	ldi	r31, 0x03	; 3
     a96:	ff 2e       	mov	r15, r31
     a98:	f0 2d       	mov	r31, r0
     a9a:	04 e0       	ldi	r16, 0x04	; 4
     a9c:	15 e0       	ldi	r17, 0x05	; 5
     a9e:	d4 e6       	ldi	r29, 0x64	; 100
     aa0:	09 c0       	rjmp	.+18     	; 0xab4 <GET_GPRS_Signal+0x51e>
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f e5       	ldi	r20, 0x5F	; 95
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	31 50       	subi	r19, 0x01	; 1
     aaa:	40 40       	sbci	r20, 0x00	; 0
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <GET_GPRS_Signal+0x512>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <GET_GPRS_Signal+0x51c>
     ab2:	00 00       	nop
     ab4:	c2 e0       	ldi	r28, 0x02	; 2
     ab6:	f8 01       	movw	r30, r16
     ab8:	2d 2f       	mov	r18, r29
     aba:	11 92       	st	Z+, r1
     abc:	2a 95       	dec	r18
     abe:	e9 f7       	brne	.-6      	; 0xaba <GET_GPRS_Signal+0x524>
     ac0:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     ac4:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     ac8:	87 e6       	ldi	r24, 0x67	; 103
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     ad0:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     ad4:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     ad8:	c9 01       	movw	r24, r18
     ada:	8a 75       	andi	r24, 0x5A	; 90
     adc:	99 27       	eor	r25, r25
     ade:	89 2b       	or	r24, r25
     ae0:	89 f4       	brne	.+34     	; 0xb04 <GET_GPRS_Signal+0x56e>
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	9f e0       	ldi	r25, 0x0F	; 15
     ae6:	38 eb       	ldi	r19, 0xB8	; 184
     ae8:	3a 95       	dec	r19
     aea:	f1 f7       	brne	.-4      	; 0xae8 <GET_GPRS_Signal+0x552>
     aec:	00 00       	nop
     aee:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     af2:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     af6:	a9 01       	movw	r20, r18
     af8:	4a 75       	andi	r20, 0x5A	; 90
     afa:	55 27       	eor	r21, r21
     afc:	45 2b       	or	r20, r21
     afe:	11 f4       	brne	.+4      	; 0xb04 <GET_GPRS_Signal+0x56e>
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	89 f7       	brne	.-30     	; 0xae6 <GET_GPRS_Signal+0x550>
     b04:	24 fd       	sbrc	r18, 4
     b06:	24 c0       	rjmp	.+72     	; 0xb50 <GET_GPRS_Signal+0x5ba>
     b08:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     b0c:	86 fd       	sbrc	r24, 6
     b0e:	20 c0       	rjmp	.+64     	; 0xb50 <GET_GPRS_Signal+0x5ba>
     b10:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     b14:	81 11       	cpse	r24, r1
     b16:	1c c0       	rjmp	.+56     	; 0xb50 <GET_GPRS_Signal+0x5ba>
     b18:	23 fd       	sbrc	r18, 3
     b1a:	1a c0       	rjmp	.+52     	; 0xb50 <GET_GPRS_Signal+0x5ba>
     b1c:	4f ef       	ldi	r20, 0xFF	; 255
     b1e:	8f ed       	ldi	r24, 0xDF	; 223
     b20:	90 e1       	ldi	r25, 0x10	; 16
     b22:	41 50       	subi	r20, 0x01	; 1
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	90 40       	sbci	r25, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <GET_GPRS_Signal+0x58c>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <GET_GPRS_Signal+0x596>
     b2c:	00 00       	nop
     b2e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     b32:	81 ff       	sbrs	r24, 1
     b34:	09 c0       	rjmp	.+18     	; 0xb48 <GET_GPRS_Signal+0x5b2>
     b36:	ef ef       	ldi	r30, 0xFF	; 255
     b38:	ff e1       	ldi	r31, 0x1F	; 31
     b3a:	2a e0       	ldi	r18, 0x0A	; 10
     b3c:	e1 50       	subi	r30, 0x01	; 1
     b3e:	f0 40       	sbci	r31, 0x00	; 0
     b40:	20 40       	sbci	r18, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <GET_GPRS_Signal+0x5a6>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <GET_GPRS_Signal+0x5b0>
     b46:	00 00       	nop
     b48:	c1 50       	subi	r28, 0x01	; 1
     b4a:	09 f4       	brne	.+2      	; 0xb4e <GET_GPRS_Signal+0x5b8>
     b4c:	8e c1       	rjmp	.+796    	; 0xe6a <GET_GPRS_Signal+0x8d4>
     b4e:	b3 cf       	rjmp	.-154    	; 0xab6 <GET_GPRS_Signal+0x520>
     b50:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <gprs_flag>
     b54:	81 fd       	sbrc	r24, 1
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <GET_GPRS_Signal+0x5d8>
     b58:	68 c0       	rjmp	.+208    	; 0xc2a <GET_GPRS_Signal+0x694>
     b5a:	3f ef       	ldi	r19, 0xFF	; 255
     b5c:	4f e5       	ldi	r20, 0x5F	; 95
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	31 50       	subi	r19, 0x01	; 1
     b62:	40 40       	sbci	r20, 0x00	; 0
     b64:	80 40       	sbci	r24, 0x00	; 0
     b66:	e1 f7       	brne	.-8      	; 0xb60 <GET_GPRS_Signal+0x5ca>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <GET_GPRS_Signal+0x5d4>
     b6a:	00 00       	nop
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <GET_GPRS_Signal+0x5e6>
     b6e:	c3 e0       	ldi	r28, 0x03	; 3
     b70:	04 e0       	ldi	r16, 0x04	; 4
     b72:	15 e0       	ldi	r17, 0x05	; 5
     b74:	0f 2e       	mov	r0, r31
     b76:	f4 e6       	ldi	r31, 0x64	; 100
     b78:	ff 2e       	mov	r15, r31
     b7a:	f0 2d       	mov	r31, r0
     b7c:	d2 e0       	ldi	r29, 0x02	; 2
     b7e:	f8 01       	movw	r30, r16
     b80:	2f 2d       	mov	r18, r15
     b82:	11 92       	st	Z+, r1
     b84:	2a 95       	dec	r18
     b86:	e9 f7       	brne	.-6      	; 0xb82 <GET_GPRS_Signal+0x5ec>
     b88:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     b8c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     b90:	8a e5       	ldi	r24, 0x5A	; 90
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     b98:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     b9c:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     ba0:	c9 01       	movw	r24, r18
     ba2:	8a 75       	andi	r24, 0x5A	; 90
     ba4:	99 27       	eor	r25, r25
     ba6:	89 2b       	or	r24, r25
     ba8:	89 f4       	brne	.+34     	; 0xbcc <GET_GPRS_Signal+0x636>
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	9f e0       	ldi	r25, 0x0F	; 15
     bae:	38 eb       	ldi	r19, 0xB8	; 184
     bb0:	3a 95       	dec	r19
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <GET_GPRS_Signal+0x61a>
     bb4:	00 00       	nop
     bb6:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     bba:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     bbe:	a9 01       	movw	r20, r18
     bc0:	4a 75       	andi	r20, 0x5A	; 90
     bc2:	55 27       	eor	r21, r21
     bc4:	45 2b       	or	r20, r21
     bc6:	11 f4       	brne	.+4      	; 0xbcc <GET_GPRS_Signal+0x636>
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	89 f7       	brne	.-30     	; 0xbae <GET_GPRS_Signal+0x618>
     bcc:	24 fd       	sbrc	r18, 4
     bce:	24 c0       	rjmp	.+72     	; 0xc18 <GET_GPRS_Signal+0x682>
     bd0:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     bd4:	86 fd       	sbrc	r24, 6
     bd6:	20 c0       	rjmp	.+64     	; 0xc18 <GET_GPRS_Signal+0x682>
     bd8:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     bdc:	81 11       	cpse	r24, r1
     bde:	1c c0       	rjmp	.+56     	; 0xc18 <GET_GPRS_Signal+0x682>
     be0:	23 fd       	sbrc	r18, 3
     be2:	1a c0       	rjmp	.+52     	; 0xc18 <GET_GPRS_Signal+0x682>
     be4:	4f ef       	ldi	r20, 0xFF	; 255
     be6:	8f ed       	ldi	r24, 0xDF	; 223
     be8:	90 e1       	ldi	r25, 0x10	; 16
     bea:	41 50       	subi	r20, 0x01	; 1
     bec:	80 40       	sbci	r24, 0x00	; 0
     bee:	90 40       	sbci	r25, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <GET_GPRS_Signal+0x654>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <GET_GPRS_Signal+0x65e>
     bf4:	00 00       	nop
     bf6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     bfa:	81 ff       	sbrs	r24, 1
     bfc:	09 c0       	rjmp	.+18     	; 0xc10 <GET_GPRS_Signal+0x67a>
     bfe:	ef ef       	ldi	r30, 0xFF	; 255
     c00:	ff e1       	ldi	r31, 0x1F	; 31
     c02:	2a e0       	ldi	r18, 0x0A	; 10
     c04:	e1 50       	subi	r30, 0x01	; 1
     c06:	f0 40       	sbci	r31, 0x00	; 0
     c08:	20 40       	sbci	r18, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <GET_GPRS_Signal+0x66e>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <GET_GPRS_Signal+0x678>
     c0e:	00 00       	nop
     c10:	d1 50       	subi	r29, 0x01	; 1
     c12:	09 f4       	brne	.+2      	; 0xc16 <GET_GPRS_Signal+0x680>
     c14:	2e c1       	rjmp	.+604    	; 0xe72 <GET_GPRS_Signal+0x8dc>
     c16:	b3 cf       	rjmp	.-154    	; 0xb7e <GET_GPRS_Signal+0x5e8>
     c18:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     c1c:	84 ff       	sbrs	r24, 4
     c1e:	05 c0       	rjmp	.+10     	; 0xc2a <GET_GPRS_Signal+0x694>
     c20:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <gprs_flag>
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <gprs_flag>
     c2a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <gprs_flag>
     c2e:	82 fd       	sbrc	r24, 2
     c30:	0b c0       	rjmp	.+22     	; 0xc48 <GET_GPRS_Signal+0x6b2>
     c32:	2b c1       	rjmp	.+598    	; 0xe8a <GET_GPRS_Signal+0x8f4>
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	4f ed       	ldi	r20, 0xDF	; 223
     c38:	80 e1       	ldi	r24, 0x10	; 16
     c3a:	31 50       	subi	r19, 0x01	; 1
     c3c:	40 40       	sbci	r20, 0x00	; 0
     c3e:	80 40       	sbci	r24, 0x00	; 0
     c40:	e1 f7       	brne	.-8      	; 0xc3a <GET_GPRS_Signal+0x6a4>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <GET_GPRS_Signal+0x6ae>
     c44:	00 00       	nop
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <GET_GPRS_Signal+0x6c0>
     c48:	c3 e0       	ldi	r28, 0x03	; 3
     c4a:	04 e0       	ldi	r16, 0x04	; 4
     c4c:	15 e0       	ldi	r17, 0x05	; 5
     c4e:	0f 2e       	mov	r0, r31
     c50:	f4 e6       	ldi	r31, 0x64	; 100
     c52:	ff 2e       	mov	r15, r31
     c54:	f0 2d       	mov	r31, r0
     c56:	d2 e0       	ldi	r29, 0x02	; 2
     c58:	f8 01       	movw	r30, r16
     c5a:	2f 2d       	mov	r18, r15
     c5c:	11 92       	st	Z+, r1
     c5e:	2a 95       	dec	r18
     c60:	e9 f7       	brne	.-6      	; 0xc5c <GET_GPRS_Signal+0x6c6>
     c62:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     c66:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     c6a:	82 e4       	ldi	r24, 0x42	; 66
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     c72:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     c76:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     c7a:	c9 01       	movw	r24, r18
     c7c:	8a 75       	andi	r24, 0x5A	; 90
     c7e:	99 27       	eor	r25, r25
     c80:	89 2b       	or	r24, r25
     c82:	89 f4       	brne	.+34     	; 0xca6 <GET_GPRS_Signal+0x710>
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	9f e0       	ldi	r25, 0x0F	; 15
     c88:	38 eb       	ldi	r19, 0xB8	; 184
     c8a:	3a 95       	dec	r19
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <GET_GPRS_Signal+0x6f4>
     c8e:	00 00       	nop
     c90:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     c94:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     c98:	a9 01       	movw	r20, r18
     c9a:	4a 75       	andi	r20, 0x5A	; 90
     c9c:	55 27       	eor	r21, r21
     c9e:	45 2b       	or	r20, r21
     ca0:	11 f4       	brne	.+4      	; 0xca6 <GET_GPRS_Signal+0x710>
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	89 f7       	brne	.-30     	; 0xc88 <GET_GPRS_Signal+0x6f2>
     ca6:	24 fd       	sbrc	r18, 4
     ca8:	24 c0       	rjmp	.+72     	; 0xcf2 <GET_GPRS_Signal+0x75c>
     caa:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     cae:	86 fd       	sbrc	r24, 6
     cb0:	20 c0       	rjmp	.+64     	; 0xcf2 <GET_GPRS_Signal+0x75c>
     cb2:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     cb6:	81 11       	cpse	r24, r1
     cb8:	1c c0       	rjmp	.+56     	; 0xcf2 <GET_GPRS_Signal+0x75c>
     cba:	23 fd       	sbrc	r18, 3
     cbc:	1a c0       	rjmp	.+52     	; 0xcf2 <GET_GPRS_Signal+0x75c>
     cbe:	4f ef       	ldi	r20, 0xFF	; 255
     cc0:	8f ed       	ldi	r24, 0xDF	; 223
     cc2:	90 e1       	ldi	r25, 0x10	; 16
     cc4:	41 50       	subi	r20, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <GET_GPRS_Signal+0x72e>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <GET_GPRS_Signal+0x738>
     cce:	00 00       	nop
     cd0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     cd4:	81 ff       	sbrs	r24, 1
     cd6:	09 c0       	rjmp	.+18     	; 0xcea <GET_GPRS_Signal+0x754>
     cd8:	ef ef       	ldi	r30, 0xFF	; 255
     cda:	ff e1       	ldi	r31, 0x1F	; 31
     cdc:	2a e0       	ldi	r18, 0x0A	; 10
     cde:	e1 50       	subi	r30, 0x01	; 1
     ce0:	f0 40       	sbci	r31, 0x00	; 0
     ce2:	20 40       	sbci	r18, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <GET_GPRS_Signal+0x748>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <GET_GPRS_Signal+0x752>
     ce8:	00 00       	nop
     cea:	d1 50       	subi	r29, 0x01	; 1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <GET_GPRS_Signal+0x75a>
     cee:	c5 c0       	rjmp	.+394    	; 0xe7a <GET_GPRS_Signal+0x8e4>
     cf0:	b3 cf       	rjmp	.-154    	; 0xc58 <GET_GPRS_Signal+0x6c2>
     cf2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     cf6:	84 fd       	sbrc	r24, 4
     cf8:	0b c0       	rjmp	.+22     	; 0xd10 <GET_GPRS_Signal+0x77a>
     cfa:	c7 c0       	rjmp	.+398    	; 0xe8a <GET_GPRS_Signal+0x8f4>
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	4f ed       	ldi	r20, 0xDF	; 223
     d00:	80 e1       	ldi	r24, 0x10	; 16
     d02:	31 50       	subi	r19, 0x01	; 1
     d04:	40 40       	sbci	r20, 0x00	; 0
     d06:	80 40       	sbci	r24, 0x00	; 0
     d08:	e1 f7       	brne	.-8      	; 0xd02 <GET_GPRS_Signal+0x76c>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <GET_GPRS_Signal+0x776>
     d0c:	00 00       	nop
     d0e:	07 c0       	rjmp	.+14     	; 0xd1e <GET_GPRS_Signal+0x788>
     d10:	c3 e0       	ldi	r28, 0x03	; 3
     d12:	04 e0       	ldi	r16, 0x04	; 4
     d14:	15 e0       	ldi	r17, 0x05	; 5
     d16:	0f 2e       	mov	r0, r31
     d18:	f4 e6       	ldi	r31, 0x64	; 100
     d1a:	ff 2e       	mov	r15, r31
     d1c:	f0 2d       	mov	r31, r0
     d1e:	d2 e0       	ldi	r29, 0x02	; 2
     d20:	f8 01       	movw	r30, r16
     d22:	2f 2d       	mov	r18, r15
     d24:	11 92       	st	Z+, r1
     d26:	2a 95       	dec	r18
     d28:	e9 f7       	brne	.-6      	; 0xd24 <GET_GPRS_Signal+0x78e>
     d2a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     d2e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     d32:	83 e3       	ldi	r24, 0x33	; 51
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
     d3a:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     d3e:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     d42:	c9 01       	movw	r24, r18
     d44:	8a 75       	andi	r24, 0x5A	; 90
     d46:	99 27       	eor	r25, r25
     d48:	89 2b       	or	r24, r25
     d4a:	89 f4       	brne	.+34     	; 0xd6e <GET_GPRS_Signal+0x7d8>
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	9f e0       	ldi	r25, 0x0F	; 15
     d50:	38 eb       	ldi	r19, 0xB8	; 184
     d52:	3a 95       	dec	r19
     d54:	f1 f7       	brne	.-4      	; 0xd52 <GET_GPRS_Signal+0x7bc>
     d56:	00 00       	nop
     d58:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     d5c:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
     d60:	a9 01       	movw	r20, r18
     d62:	4a 75       	andi	r20, 0x5A	; 90
     d64:	55 27       	eor	r21, r21
     d66:	45 2b       	or	r20, r21
     d68:	11 f4       	brne	.+4      	; 0xd6e <GET_GPRS_Signal+0x7d8>
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	89 f7       	brne	.-30     	; 0xd50 <GET_GPRS_Signal+0x7ba>
     d6e:	24 fd       	sbrc	r18, 4
     d70:	24 c0       	rjmp	.+72     	; 0xdba <GET_GPRS_Signal+0x824>
     d72:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     d76:	86 fd       	sbrc	r24, 6
     d78:	20 c0       	rjmp	.+64     	; 0xdba <GET_GPRS_Signal+0x824>
     d7a:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     d7e:	81 11       	cpse	r24, r1
     d80:	1c c0       	rjmp	.+56     	; 0xdba <GET_GPRS_Signal+0x824>
     d82:	23 fd       	sbrc	r18, 3
     d84:	1a c0       	rjmp	.+52     	; 0xdba <GET_GPRS_Signal+0x824>
     d86:	4f ef       	ldi	r20, 0xFF	; 255
     d88:	8f ed       	ldi	r24, 0xDF	; 223
     d8a:	90 e1       	ldi	r25, 0x10	; 16
     d8c:	41 50       	subi	r20, 0x01	; 1
     d8e:	80 40       	sbci	r24, 0x00	; 0
     d90:	90 40       	sbci	r25, 0x00	; 0
     d92:	e1 f7       	brne	.-8      	; 0xd8c <GET_GPRS_Signal+0x7f6>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <GET_GPRS_Signal+0x800>
     d96:	00 00       	nop
     d98:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     d9c:	81 ff       	sbrs	r24, 1
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <GET_GPRS_Signal+0x81c>
     da0:	ef ef       	ldi	r30, 0xFF	; 255
     da2:	ff e1       	ldi	r31, 0x1F	; 31
     da4:	2a e0       	ldi	r18, 0x0A	; 10
     da6:	e1 50       	subi	r30, 0x01	; 1
     da8:	f0 40       	sbci	r31, 0x00	; 0
     daa:	20 40       	sbci	r18, 0x00	; 0
     dac:	e1 f7       	brne	.-8      	; 0xda6 <GET_GPRS_Signal+0x810>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <GET_GPRS_Signal+0x81a>
     db0:	00 00       	nop
     db2:	d1 50       	subi	r29, 0x01	; 1
     db4:	09 f4       	brne	.+2      	; 0xdb8 <GET_GPRS_Signal+0x822>
     db6:	65 c0       	rjmp	.+202    	; 0xe82 <GET_GPRS_Signal+0x8ec>
     db8:	b3 cf       	rjmp	.-154    	; 0xd20 <GET_GPRS_Signal+0x78a>
     dba:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
     dbe:	84 ff       	sbrs	r24, 4
     dc0:	64 c0       	rjmp	.+200    	; 0xe8a <GET_GPRS_Signal+0x8f4>
     dc2:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
     dc6:	80 68       	ori	r24, 0x80	; 128
     dc8:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
     dcc:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <gprs_flag>
     dd0:	8b 7f       	andi	r24, 0xFB	; 251
     dd2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <gprs_flag>
     dd6:	59 c0       	rjmp	.+178    	; 0xe8a <GET_GPRS_Signal+0x8f4>
     dd8:	3f ef       	ldi	r19, 0xFF	; 255
     dda:	4f ea       	ldi	r20, 0xAF	; 175
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	31 50       	subi	r19, 0x01	; 1
     de0:	40 40       	sbci	r20, 0x00	; 0
     de2:	80 40       	sbci	r24, 0x00	; 0
     de4:	e1 f7       	brne	.-8      	; 0xdde <GET_GPRS_Signal+0x848>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <GET_GPRS_Signal+0x852>
     de8:	00 00       	nop
     dea:	c2 e0       	ldi	r28, 0x02	; 2
     dec:	04 e0       	ldi	r16, 0x04	; 4
     dee:	15 e0       	ldi	r17, 0x05	; 5
     df0:	d4 e6       	ldi	r29, 0x64	; 100
     df2:	81 cc       	rjmp	.-1790   	; 0x6f6 <GET_GPRS_Signal+0x160>
     df4:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     df8:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
     dfc:	9f ef       	ldi	r25, 0xFF	; 255
     dfe:	ef e5       	ldi	r30, 0x5F	; 95
     e00:	f3 e0       	ldi	r31, 0x03	; 3
     e02:	91 50       	subi	r25, 0x01	; 1
     e04:	e0 40       	sbci	r30, 0x00	; 0
     e06:	f0 40       	sbci	r31, 0x00	; 0
     e08:	e1 f7       	brne	.-8      	; 0xe02 <GET_GPRS_Signal+0x86c>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <GET_GPRS_Signal+0x876>
     e0c:	00 00       	nop
     e0e:	82 9b       	sbis	0x10, 2	; 16
     e10:	27 cc       	rjmp	.-1970   	; 0x660 <GET_GPRS_Signal+0xca>
     e12:	69 cc       	rjmp	.-1838   	; 0x6e6 <GET_GPRS_Signal+0x150>
     e14:	82 99       	sbic	0x10, 2	; 16
     e16:	50 cc       	rjmp	.-1888   	; 0x6b8 <GET_GPRS_Signal+0x122>
     e18:	66 cc       	rjmp	.-1844   	; 0x6e6 <GET_GPRS_Signal+0x150>
     e1a:	82 99       	sbic	0x10, 2	; 16
     e1c:	48 cc       	rjmp	.-1904   	; 0x6ae <GET_GPRS_Signal+0x118>
     e1e:	63 cc       	rjmp	.-1850   	; 0x6e6 <GET_GPRS_Signal+0x150>
     e20:	2f ef       	ldi	r18, 0xFF	; 255
     e22:	3f ea       	ldi	r19, 0xAF	; 175
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	30 40       	sbci	r19, 0x00	; 0
     e2a:	40 40       	sbci	r20, 0x00	; 0
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <GET_GPRS_Signal+0x890>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <GET_GPRS_Signal+0x89a>
     e30:	00 00       	nop
     e32:	c2 e0       	ldi	r28, 0x02	; 2
     e34:	04 e0       	ldi	r16, 0x04	; 4
     e36:	15 e0       	ldi	r17, 0x05	; 5
     e38:	d4 e6       	ldi	r29, 0x64	; 100
     e3a:	aa cc       	rjmp	.-1708   	; 0x790 <GET_GPRS_Signal+0x1fa>
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	9b e6       	ldi	r25, 0x6B	; 107
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <GET_GPRS_Signal+0x8aa>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <GET_GPRS_Signal+0x8b0>
     e46:	00 00       	nop
     e48:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
     e4c:	88 23       	and	r24, r24
     e4e:	e9 f0       	breq	.+58     	; 0xe8a <GET_GPRS_Signal+0x8f4>
     e50:	ec cc       	rjmp	.-1576   	; 0x82a <GET_GPRS_Signal+0x294>
     e52:	fa 94       	dec	r15
     e54:	f1 10       	cpse	r15, r1
     e56:	f7 cc       	rjmp	.-1554   	; 0x846 <GET_GPRS_Signal+0x2b0>
     e58:	55 cd       	rjmp	.-1366   	; 0x904 <GET_GPRS_Signal+0x36e>
     e5a:	fa 94       	dec	r15
     e5c:	f1 10       	cpse	r15, r1
     e5e:	5a cd       	rjmp	.-1356   	; 0x914 <GET_GPRS_Signal+0x37e>
     e60:	b0 cd       	rjmp	.-1184   	; 0x9c2 <GET_GPRS_Signal+0x42c>
     e62:	fa 94       	dec	r15
     e64:	f1 10       	cpse	r15, r1
     e66:	be cd       	rjmp	.-1156   	; 0x9e4 <GET_GPRS_Signal+0x44e>
     e68:	14 ce       	rjmp	.-984    	; 0xa92 <GET_GPRS_Signal+0x4fc>
     e6a:	fa 94       	dec	r15
     e6c:	f1 10       	cpse	r15, r1
     e6e:	19 ce       	rjmp	.-974    	; 0xaa2 <GET_GPRS_Signal+0x50c>
     e70:	6f ce       	rjmp	.-802    	; 0xb50 <GET_GPRS_Signal+0x5ba>
     e72:	c1 50       	subi	r28, 0x01	; 1
     e74:	09 f0       	breq	.+2      	; 0xe78 <GET_GPRS_Signal+0x8e2>
     e76:	71 ce       	rjmp	.-798    	; 0xb5a <GET_GPRS_Signal+0x5c4>
     e78:	cf ce       	rjmp	.-610    	; 0xc18 <GET_GPRS_Signal+0x682>
     e7a:	c1 50       	subi	r28, 0x01	; 1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <GET_GPRS_Signal+0x8ea>
     e7e:	da ce       	rjmp	.-588    	; 0xc34 <GET_GPRS_Signal+0x69e>
     e80:	38 cf       	rjmp	.-400    	; 0xcf2 <GET_GPRS_Signal+0x75c>
     e82:	c1 50       	subi	r28, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <GET_GPRS_Signal+0x8f2>
     e86:	3a cf       	rjmp	.-396    	; 0xcfc <GET_GPRS_Signal+0x766>
     e88:	98 cf       	rjmp	.-208    	; 0xdba <GET_GPRS_Signal+0x824>
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	08 95       	ret

00000e96 <swap>:
     e96:	fc 01       	movw	r30, r24
     e98:	db 01       	movw	r26, r22
     e9a:	90 81       	ld	r25, Z
     e9c:	8c 91       	ld	r24, X
     e9e:	98 27       	eor	r25, r24
     ea0:	90 83       	st	Z, r25
     ea2:	2c 91       	ld	r18, X
     ea4:	92 27       	eor	r25, r18
     ea6:	9c 93       	st	X, r25
     ea8:	80 81       	ld	r24, Z
     eaa:	98 27       	eor	r25, r24
     eac:	90 83       	st	Z, r25
     eae:	08 95       	ret

00000eb0 <revstr>:
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	ec 01       	movw	r28, r24
     ebe:	61 50       	subi	r22, 0x01	; 1
     ec0:	71 09       	sbc	r23, r1
     ec2:	68 0f       	add	r22, r24
     ec4:	79 1f       	adc	r23, r25
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	89 f0       	breq	.+34     	; 0xeec <revstr+0x3c>
     eca:	86 17       	cp	r24, r22
     ecc:	97 07       	cpc	r25, r23
     ece:	70 f4       	brcc	.+28     	; 0xeec <revstr+0x3c>
     ed0:	8b 01       	movw	r16, r22
     ed2:	01 50       	subi	r16, 0x01	; 1
     ed4:	11 09       	sbc	r17, r1
     ed6:	7c 01       	movw	r14, r24
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	e2 1a       	sub	r14, r18
     edc:	f2 0a       	sbc	r15, r18
     ede:	0e 94 4b 07 	call	0xe96	; 0xe96 <swap>
     ee2:	c7 01       	movw	r24, r14
     ee4:	b8 01       	movw	r22, r16
     ee6:	e0 16       	cp	r14, r16
     ee8:	f1 06       	cpc	r15, r17
     eea:	90 f3       	brcs	.-28     	; 0xed0 <revstr+0x20>
     eec:	ce 01       	movw	r24, r28
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	08 95       	ret

00000efc <itoc>:
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	ab 01       	movw	r20, r22
     f06:	67 2b       	or	r22, r23
     f08:	71 f1       	breq	.+92     	; 0xf66 <itoc+0x6a>
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	fe 01       	movw	r30, r28
     f0e:	e1 0f       	add	r30, r17
     f10:	f1 1d       	adc	r31, r1
     f12:	9a 01       	movw	r18, r20
     f14:	ad ec       	ldi	r26, 0xCD	; 205
     f16:	bc ec       	ldi	r27, 0xCC	; 204
     f18:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__umulhisi3>
     f1c:	96 95       	lsr	r25
     f1e:	87 95       	ror	r24
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	96 95       	lsr	r25
     f26:	87 95       	ror	r24
     f28:	9c 01       	movw	r18, r24
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	9a 01       	movw	r18, r20
     f40:	28 1b       	sub	r18, r24
     f42:	39 0b       	sbc	r19, r25
     f44:	c9 01       	movw	r24, r18
     f46:	80 5d       	subi	r24, 0xD0	; 208
     f48:	80 83       	st	Z, r24
     f4a:	9a 01       	movw	r18, r20
     f4c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__umulhisi3>
     f50:	ac 01       	movw	r20, r24
     f52:	56 95       	lsr	r21
     f54:	47 95       	ror	r20
     f56:	56 95       	lsr	r21
     f58:	47 95       	ror	r20
     f5a:	56 95       	lsr	r21
     f5c:	47 95       	ror	r20
     f5e:	1f 5f       	subi	r17, 0xFF	; 255
     f60:	41 15       	cp	r20, r1
     f62:	51 05       	cpc	r21, r1
     f64:	99 f6       	brne	.-90     	; 0xf0c <itoc+0x10>
     f66:	ce 01       	movw	r24, r28
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	08 95       	ret

00000f70 <itoa>:
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
     f76:	0e 94 7e 07 	call	0xefc	; 0xefc <itoc>
     f7a:	fe 01       	movw	r30, r28
     f7c:	01 90       	ld	r0, Z+
     f7e:	00 20       	and	r0, r0
     f80:	e9 f7       	brne	.-6      	; 0xf7c <itoa+0xc>
     f82:	31 97       	sbiw	r30, 0x01	; 1
     f84:	bf 01       	movw	r22, r30
     f86:	6c 1b       	sub	r22, r28
     f88:	7d 0b       	sbc	r23, r29
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <revstr>
     f90:	ce 01       	movw	r24, r28
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <ShortTurl>:
/************************************************************************/
/* ·µ»ØÊý¾Ý³¤¶È:·µ»Ø0Êý¾Ý´íÎó                                           */
/************************************************************************/

inline unsigned char ShortTurl(unsigned char *Send_Data, unsigned int Send_Len,unsigned char *Rece_Data)
{
     f98:	6f 92       	push	r6
     f9a:	7f 92       	push	r7
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	65 97       	sbiw	r28, 0x15	; 21
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	8c 01       	movw	r16, r24
	//LEDON;
		
	unsigned char len = 0x0;
#if 1	
	if((LCD_Ico & (0x1 << 7)))
     fc6:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <LCD_Ico>
     fca:	99 23       	and	r25, r25
     fcc:	0c f0       	brlt	.+2      	; 0xfd0 <ShortTurl+0x38>
     fce:	4f c2       	rjmp	.+1182   	; 0x146e <__stack+0x36f>
     fd0:	7a 01       	movw	r14, r20
     fd2:	a7 2e       	mov	r10, r23
     fd4:	b6 2e       	mov	r11, r22
     fd6:	38 01       	movw	r6, r16
     fd8:	02 e0       	ldi	r16, 0x02	; 2
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
	{
		memset(GPRS_Receive,0,100);
     fda:	0f 2e       	mov	r0, r31
     fdc:	f4 e0       	ldi	r31, 0x04	; 4
     fde:	cf 2e       	mov	r12, r31
     fe0:	f5 e0       	ldi	r31, 0x05	; 5
     fe2:	df 2e       	mov	r13, r31
     fe4:	f0 2d       	mov	r31, r0
     fe6:	14 e6       	ldi	r17, 0x64	; 100
     fe8:	d6 01       	movw	r26, r12
     fea:	e1 2f       	mov	r30, r17
     fec:	1d 92       	st	X+, r1
     fee:	ea 95       	dec	r30
     ff0:	e9 f7       	brne	.-6      	; 0xfec <ShortTurl+0x54>
		timeout = 0xFFF;
		GPRS_Receive_Flag = 0;
     ff2:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
     ff6:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
		USART1_Transmit_String(cmd);
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
		while((!(GPRS_Receive_Flag &((0x1<<4)|(0x1<<1)|(0x1<<3)|((0x1<<6)))))&& (timeout --))
    1002:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1006:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    100a:	9c 01       	movw	r18, r24
    100c:	2a 75       	andi	r18, 0x5A	; 90
    100e:	33 27       	eor	r19, r19
    1010:	23 2b       	or	r18, r19
    1012:	91 f4       	brne	.+36     	; 0x1038 <ShortTurl+0xa0>
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	3f e0       	ldi	r19, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1018:	f8 eb       	ldi	r31, 0xB8	; 184
    101a:	fa 95       	dec	r31
    101c:	f1 f7       	brne	.-4      	; 0x101a <ShortTurl+0x82>
    101e:	00 00       	nop
    1020:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1024:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    1028:	ac 01       	movw	r20, r24
    102a:	4a 75       	andi	r20, 0x5A	; 90
    102c:	55 27       	eor	r21, r21
    102e:	45 2b       	or	r20, r21
    1030:	19 f4       	brne	.+6      	; 0x1038 <ShortTurl+0xa0>
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	31 09       	sbc	r19, r1
    1036:	81 f7       	brne	.-32     	; 0x1018 <ShortTurl+0x80>
			_delay_us(50);
		if(GPRS_Receive_Flag&(0x1<<4))
    1038:	84 fd       	sbrc	r24, 4
    103a:	23 c0       	rjmp	.+70     	; 0x1082 <ShortTurl+0xea>
		{
			return 0;
		}
		if(	LCD_Ico &(0x01 << 6) )
    103c:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <LCD_Ico>
    1040:	26 fd       	sbrc	r18, 6
    1042:	1f c0       	rjmp	.+62     	; 0x1082 <ShortTurl+0xea>
		{
			return 0 ;
		}
		if(SCQ != 0)
    1044:	20 91 a2 04 	lds	r18, 0x04A2	; 0x8004a2 <SCQ>
    1048:	21 11       	cpse	r18, r1
    104a:	1b c0       	rjmp	.+54     	; 0x1082 <ShortTurl+0xea>
		{
			return 0;
		}
		if(GPRS_Receive_Flag&(0x1<<3))
    104c:	83 fd       	sbrc	r24, 3
    104e:	19 c0       	rjmp	.+50     	; 0x1082 <ShortTurl+0xea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1050:	2f ef       	ldi	r18, 0xFF	; 255
    1052:	8f ed       	ldi	r24, 0xDF	; 223
    1054:	90 e1       	ldi	r25, 0x10	; 16
    1056:	21 50       	subi	r18, 0x01	; 1
    1058:	80 40       	sbci	r24, 0x00	; 0
    105a:	90 40       	sbci	r25, 0x00	; 0
    105c:	e1 f7       	brne	.-8      	; 0x1056 <ShortTurl+0xbe>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <ShortTurl+0xc8>
    1060:	00 00       	nop
		_delay_ms(500);
		if(GPRS_Receive_Flag&(0x01<<9))
		{
			//_delay_ms(3000);
		}
		if(GPRS_Receive_Flag&(0x01<<1))
    1062:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1066:	81 ff       	sbrs	r24, 1
    1068:	09 c0       	rjmp	.+18     	; 0x107c <ShortTurl+0xe4>
    106a:	af ef       	ldi	r26, 0xFF	; 255
    106c:	bf e1       	ldi	r27, 0x1F	; 31
    106e:	ea e0       	ldi	r30, 0x0A	; 10
    1070:	a1 50       	subi	r26, 0x01	; 1
    1072:	b0 40       	sbci	r27, 0x00	; 0
    1074:	e0 40       	sbci	r30, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <ShortTurl+0xd8>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <ShortTurl+0xe2>
    107a:	00 00       	nop
    107c:	01 50       	subi	r16, 0x01	; 1
}
inline unsigned char GPRS_Send_Cmd(unsigned char *cmd)
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
    107e:	09 f0       	breq	.+2      	; 0x1082 <ShortTurl+0xea>
    1080:	b3 cf       	rjmp	.-154    	; 0xfe8 <ShortTurl+0x50>
    1082:	ff ef       	ldi	r31, 0xFF	; 255
    1084:	2f e1       	ldi	r18, 0x1F	; 31
    1086:	8a e0       	ldi	r24, 0x0A	; 10
    1088:	f1 50       	subi	r31, 0x01	; 1
    108a:	20 40       	sbci	r18, 0x00	; 0
    108c:	80 40       	sbci	r24, 0x00	; 0
    108e:	e1 f7       	brne	.-8      	; 0x1088 <ShortTurl+0xf0>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <ShortTurl+0xfa>
    1092:	00 00       	nop
    1094:	02 e0       	ldi	r16, 0x02	; 2
	{
		memset(GPRS_Receive,0,100);
    1096:	0f 2e       	mov	r0, r31
    1098:	f4 e0       	ldi	r31, 0x04	; 4
    109a:	cf 2e       	mov	r12, r31
    109c:	f5 e0       	ldi	r31, 0x05	; 5
    109e:	df 2e       	mov	r13, r31
    10a0:	f0 2d       	mov	r31, r0
    10a2:	14 e6       	ldi	r17, 0x64	; 100
    10a4:	d6 01       	movw	r26, r12
    10a6:	e1 2f       	mov	r30, r17
    10a8:	1d 92       	st	X+, r1
    10aa:	ea 95       	dec	r30
    10ac:	e9 f7       	brne	.-6      	; 0x10a8 <ShortTurl+0x110>
		timeout = 0xFFF;
		GPRS_Receive_Flag = 0;
    10ae:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
    10b2:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
		USART1_Transmit_String(cmd);
    10b6:	81 e8       	ldi	r24, 0x81	; 129
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
		while((!(GPRS_Receive_Flag &((0x1<<4)|(0x1<<1)|(0x1<<3)|((0x1<<6)))))&& (timeout --))
    10be:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    10c2:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    10c6:	cf 01       	movw	r24, r30
    10c8:	8a 75       	andi	r24, 0x5A	; 90
    10ca:	99 27       	eor	r25, r25
    10cc:	89 2b       	or	r24, r25
    10ce:	91 f4       	brne	.+36     	; 0x10f4 <ShortTurl+0x15c>
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	3f e0       	ldi	r19, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d4:	f8 eb       	ldi	r31, 0xB8	; 184
    10d6:	fa 95       	dec	r31
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <ShortTurl+0x13e>
    10da:	00 00       	nop
    10dc:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    10e0:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    10e4:	cf 01       	movw	r24, r30
    10e6:	8a 75       	andi	r24, 0x5A	; 90
    10e8:	99 27       	eor	r25, r25
    10ea:	89 2b       	or	r24, r25
    10ec:	19 f4       	brne	.+6      	; 0x10f4 <ShortTurl+0x15c>
    10ee:	21 50       	subi	r18, 0x01	; 1
    10f0:	31 09       	sbc	r19, r1
    10f2:	81 f7       	brne	.-32     	; 0x10d4 <ShortTurl+0x13c>
			_delay_us(50);
		if(GPRS_Receive_Flag&(0x1<<4))
    10f4:	e4 fd       	sbrc	r30, 4
    10f6:	c1 c1       	rjmp	.+898    	; 0x147a <__stack+0x37b>
		{
			return 0;
		}
		if(	LCD_Ico &(0x01 << 6) )
    10f8:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    10fc:	86 fd       	sbrc	r24, 6
    10fe:	bd c1       	rjmp	.+890    	; 0x147a <__stack+0x37b>
		{
			return 0 ;
		}
		if(SCQ != 0)
    1100:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
    1104:	81 11       	cpse	r24, r1
    1106:	b9 c1       	rjmp	.+882    	; 0x147a <__stack+0x37b>
		{
			return 0;
		}
		if(GPRS_Receive_Flag&(0x1<<3))
    1108:	e3 fd       	sbrc	r30, 3
    110a:	b7 c1       	rjmp	.+878    	; 0x147a <__stack+0x37b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	8f ed       	ldi	r24, 0xDF	; 223
    1110:	90 e1       	ldi	r25, 0x10	; 16
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	80 40       	sbci	r24, 0x00	; 0
    1116:	90 40       	sbci	r25, 0x00	; 0
    1118:	e1 f7       	brne	.-8      	; 0x1112 <__stack+0x13>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <__stack+0x1d>
    111c:	00 00       	nop
		_delay_ms(500);
		if(GPRS_Receive_Flag&(0x01<<9))
		{
			//_delay_ms(3000);
		}
		if(GPRS_Receive_Flag&(0x01<<1))
    111e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1122:	81 ff       	sbrs	r24, 1
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <__stack+0x39>
    1126:	af ef       	ldi	r26, 0xFF	; 255
    1128:	bf e1       	ldi	r27, 0x1F	; 31
    112a:	ea e0       	ldi	r30, 0x0A	; 10
    112c:	a1 50       	subi	r26, 0x01	; 1
    112e:	b0 40       	sbci	r27, 0x00	; 0
    1130:	e0 40       	sbci	r30, 0x00	; 0
    1132:	e1 f7       	brne	.-8      	; 0x112c <__stack+0x2d>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <__stack+0x37>
    1136:	00 00       	nop
    1138:	01 50       	subi	r16, 0x01	; 1
}
inline unsigned char GPRS_Send_Cmd(unsigned char *cmd)
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
    113a:	09 f4       	brne	.+2      	; 0x113e <__stack+0x3f>
    113c:	99 c0       	rjmp	.+306    	; 0x1270 <__stack+0x171>
    113e:	b2 cf       	rjmp	.-156    	; 0x10a4 <ShortTurl+0x10c>
	_delay_ms(200);
		//USART0_Transmit_String("------------TCPCONET");
	unsigned char n = 2 ,i;
	while(n--)
	{
		memset(GPRS_Receive,0,100);
    1140:	d6 01       	movw	r26, r12
    1142:	e8 2d       	mov	r30, r8
    1144:	1d 92       	st	X+, r1
    1146:	ea 95       	dec	r30
    1148:	e9 f7       	brne	.-6      	; 0x1144 <__stack+0x45>
		timeout = 0xFFF;
		GPRS_Receive_Flag = 0;
    114a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
    114e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
    1152:	ff ef       	ldi	r31, 0xFF	; 255
    1154:	2f ea       	ldi	r18, 0xAF	; 175
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	f1 50       	subi	r31, 0x01	; 1
    115a:	20 40       	sbci	r18, 0x00	; 0
    115c:	80 40       	sbci	r24, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <__stack+0x59>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <__stack+0x63>
    1162:	00 00       	nop
		//BEEP(1);
		_delay_ms(50);
		
//		GPRS_Send_Cmd(sendnet);
#if 1		
		USART1_Transmit_String(sendnet);
    1164:	8e e0       	ldi	r24, 0x0E	; 14
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
		while((!(GPRS_Receive_Flag&((0x1<<4)|(0x1<<1))))&&(timeout --))
    116c:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1170:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    1174:	c9 01       	movw	r24, r18
    1176:	82 71       	andi	r24, 0x12	; 18
    1178:	99 27       	eor	r25, r25
    117a:	89 2b       	or	r24, r25
    117c:	91 f4       	brne	.+36     	; 0x11a2 <__stack+0xa3>
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	af ef       	ldi	r26, 0xFF	; 255
    1182:	bb e6       	ldi	r27, 0x6B	; 107
    1184:	11 97       	sbiw	r26, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <__stack+0x85>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <__stack+0x8b>
    118a:	00 00       	nop
    118c:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1190:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    1194:	a9 01       	movw	r20, r18
    1196:	42 71       	andi	r20, 0x12	; 18
    1198:	55 27       	eor	r21, r21
    119a:	45 2b       	or	r20, r21
    119c:	11 f4       	brne	.+4      	; 0x11a2 <__stack+0xa3>
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	79 f7       	brne	.-34     	; 0x1180 <__stack+0x81>
		{
			_delay_ms(10);
		}
#endif

		if(GPRS_Receive_Flag&(0x1<<4))break;
    11a2:	24 fd       	sbrc	r18, 4
    11a4:	86 c1       	rjmp	.+780    	; 0x14b2 <__stack+0x3b3>
    11a6:	bf ef       	ldi	r27, 0xFF	; 255
    11a8:	ef e1       	ldi	r30, 0x1F	; 31
    11aa:	fa e0       	ldi	r31, 0x0A	; 10
    11ac:	b1 50       	subi	r27, 0x01	; 1
    11ae:	e0 40       	sbci	r30, 0x00	; 0
    11b0:	f0 40       	sbci	r31, 0x00	; 0
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <__stack+0xad>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <__stack+0xb7>
    11b6:	00 00       	nop
    11b8:	9a 94       	dec	r9
		unsigned char timeout = 800;
	//GPRS_Send_Cmd(sendtcpclose);
	_delay_ms(200);
		//USART0_Transmit_String("------------TCPCONET");
	unsigned char n = 2 ,i;
	while(n--)
    11ba:	91 10       	cpse	r9, r1
    11bc:	c1 cf       	rjmp	.-126    	; 0x1140 <__stack+0x41>
    11be:	74 c1       	rjmp	.+744    	; 0x14a8 <__stack+0x3a9>
		_delay_ms(50);
		
//		GPRS_Send_Cmd(sendnet);
#if 1		
		USART1_Transmit_String(sendnet);
		while((!(GPRS_Receive_Flag&((0x1<<4)|(0x1<<1))))&&(timeout --))
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	af ef       	ldi	r26, 0xFF	; 255
    11c4:	bb e6       	ldi	r27, 0x6B	; 107
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <__stack+0xc7>
    11ca:	00 c0       	rjmp	.+0      	; 0x11cc <__stack+0xcd>
    11cc:	00 00       	nop
	}
	
	
	//BEEP(10);
	timeout = 800;
	while(!(GPRS_Receive_Flag & 1<<7) && timeout--)
    11ce:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    11d2:	97 fd       	sbrc	r25, 7
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <__stack+0xdd>
    11d6:	81 50       	subi	r24, 0x01	; 1
    11d8:	a1 f7       	brne	.-24     	; 0x11c2 <__stack+0xc3>
    11da:	4a c0       	rjmp	.+148    	; 0x1270 <__stack+0x171>
	
	if((GPRS_Receive_Flag & 1<<7))
	{
		//	_delay_ms(200);
		//	LEDON;
			BEEP(10);//Á¬½Ó³É¹¦ÏìÒ»Éù10ms
    11dc:	8a e0       	ldi	r24, 0x0A	; 10
    11de:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <BEEP>
    11e2:	bf ef       	ldi	r27, 0xFF	; 255
    11e4:	ef e1       	ldi	r30, 0x1F	; 31
    11e6:	fa e0       	ldi	r31, 0x0A	; 10
    11e8:	b1 50       	subi	r27, 0x01	; 1
    11ea:	e0 40       	sbci	r30, 0x00	; 0
    11ec:	f0 40       	sbci	r31, 0x00	; 0
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <__stack+0xe9>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <__stack+0xf3>
    11f2:	00 00       	nop
	if(!Check_CRC16(Send_Data,0,Send_Len-4))
		LEDON;
#endif

	
		unsigned char sendcipsend[15] = "AT+CIPSEND=";
    11f4:	8c e0       	ldi	r24, 0x0C	; 12
    11f6:	ec ea       	ldi	r30, 0xAC	; 172
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	de 01       	movw	r26, r28
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	01 90       	ld	r0, Z+
    1200:	0d 92       	st	X+, r0
    1202:	8a 95       	dec	r24
    1204:	e1 f7       	brne	.-8      	; 0x11fe <__stack+0xff>
    1206:	fe 01       	movw	r30, r28
    1208:	3d 96       	adiw	r30, 0x0d	; 13
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	df 01       	movw	r26, r30
    120e:	1d 92       	st	X+, r1
    1210:	8a 95       	dec	r24
    1212:	e9 f7       	brne	.-6      	; 0x120e <__stack+0x10f>
		unsigned char send_len[2]  = {0};
    1214:	1d 8a       	std	Y+21, r1	; 0x15
    1216:	1c 8a       	std	Y+20, r1	; 0x14
#if 1
		itoc(send_len,Send_Len);
    1218:	6b 2d       	mov	r22, r11
    121a:	7a 2d       	mov	r23, r10
    121c:	ce 01       	movw	r24, r28
    121e:	44 96       	adiw	r24, 0x14	; 20
    1220:	0e 94 7e 07 	call	0xefc	; 0xefc <itoc>
		revstr(send_len,2);
    1224:	62 e0       	ldi	r22, 0x02	; 2
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	ce 01       	movw	r24, r28
    122a:	44 96       	adiw	r24, 0x14	; 20
    122c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <revstr>
#else
		itoa(send_len,Send_Len);
#endif
		Str_Add_Str(sendcipsend,11,send_len,2);
    1230:	22 e0       	ldi	r18, 0x02	; 2
    1232:	ae 01       	movw	r20, r28
    1234:	4c 5e       	subi	r20, 0xEC	; 236
    1236:	5f 4f       	sbci	r21, 0xFF	; 255
    1238:	6b e0       	ldi	r22, 0x0B	; 11
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
		Str_Add_Str(sendcipsend,13,"\r\n",2);
    1242:	22 e0       	ldi	r18, 0x02	; 2
    1244:	4a e9       	ldi	r20, 0x9A	; 154
    1246:	54 e0       	ldi	r21, 0x04	; 4
    1248:	6d e0       	ldi	r22, 0x0D	; 13
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1252:	0f 2e       	mov	r0, r31
    1254:	f3 e0       	ldi	r31, 0x03	; 3
    1256:	af 2e       	mov	r10, r31
    1258:	f0 2d       	mov	r31, r0
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
	{
		memset(GPRS_Receive,0,100);
    125a:	0f 2e       	mov	r0, r31
    125c:	f4 e0       	ldi	r31, 0x04	; 4
    125e:	cf 2e       	mov	r12, r31
    1260:	f5 e0       	ldi	r31, 0x05	; 5
    1262:	df 2e       	mov	r13, r31
    1264:	f0 2d       	mov	r31, r0
    1266:	0f 2e       	mov	r0, r31
    1268:	f4 e6       	ldi	r31, 0x64	; 100
    126a:	9f 2e       	mov	r9, r31
    126c:	f0 2d       	mov	r31, r0
    126e:	6d c0       	rjmp	.+218    	; 0x134a <__stack+0x24b>
    1270:	bf ef       	ldi	r27, 0xFF	; 255
    1272:	ef e1       	ldi	r30, 0x1F	; 31
    1274:	fa e0       	ldi	r31, 0x0A	; 10
    1276:	b1 50       	subi	r27, 0x01	; 1
    1278:	e0 40       	sbci	r30, 0x00	; 0
    127a:	f0 40       	sbci	r31, 0x00	; 0
    127c:	e1 f7       	brne	.-8      	; 0x1276 <__stack+0x177>
    127e:	00 c0       	rjmp	.+0      	; 0x1280 <__stack+0x181>
    1280:	00 00       	nop
	if((LCD_Ico & (0x1 << 7)))
	{
		
			GPRS_Send_Cmd(sendtcpclose);//¶Ï¿ª·þÎñÆ÷Á¬½Ó£¬ÒÔÃâÁ¬½Ó´íÎó
			_delay_ms(300);
			len = GPRS_Connect_Tcp();
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	1b c1       	rjmp	.+566    	; 0x14bc <__stack+0x3bd>
		Str_Add_Str(sendcipsend,11,send_len,2);
		Str_Add_Str(sendcipsend,13,"\r\n",2);
	
		//USART0_Transmit_String(sendcipsend);
		unsigned char i = 2;
		while(i--)
    1286:	12 e0       	ldi	r17, 0x02	; 2
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
	{
		memset(GPRS_Receive,0,100);
    1288:	d6 01       	movw	r26, r12
    128a:	e9 2d       	mov	r30, r9
    128c:	1d 92       	st	X+, r1
    128e:	ea 95       	dec	r30
    1290:	e9 f7       	brne	.-6      	; 0x128c <__stack+0x18d>
		timeout = 0xFFF;
		GPRS_Receive_Flag = 0;
    1292:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
    1296:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
		USART1_Transmit_String(cmd);
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
		while((!(GPRS_Receive_Flag &((0x1<<4)|(0x1<<1)|(0x1<<3)|((0x1<<6)))))&& (timeout --))
    12a2:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    12a6:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    12aa:	c9 01       	movw	r24, r18
    12ac:	8a 75       	andi	r24, 0x5A	; 90
    12ae:	99 27       	eor	r25, r25
    12b0:	89 2b       	or	r24, r25
    12b2:	89 f4       	brne	.+34     	; 0x12d6 <__stack+0x1d7>
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	9f e0       	ldi	r25, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b8:	f8 eb       	ldi	r31, 0xB8	; 184
    12ba:	fa 95       	dec	r31
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <__stack+0x1bb>
    12be:	00 00       	nop
    12c0:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    12c4:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    12c8:	a9 01       	movw	r20, r18
    12ca:	4a 75       	andi	r20, 0x5A	; 90
    12cc:	55 27       	eor	r21, r21
    12ce:	45 2b       	or	r20, r21
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <__stack+0x1d7>
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	89 f7       	brne	.-30     	; 0x12b8 <__stack+0x1b9>
			_delay_us(50);
		if(GPRS_Receive_Flag&(0x1<<4))
    12d6:	24 fd       	sbrc	r18, 4
    12d8:	23 c0       	rjmp	.+70     	; 0x1320 <__stack+0x221>
		{
			return 0;
		}
		if(	LCD_Ico &(0x01 << 6) )
    12da:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    12de:	86 fd       	sbrc	r24, 6
    12e0:	1f c0       	rjmp	.+62     	; 0x1320 <__stack+0x221>
		{
			return 0 ;
		}
		if(SCQ != 0)
    12e2:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
    12e6:	81 11       	cpse	r24, r1
    12e8:	1b c0       	rjmp	.+54     	; 0x1320 <__stack+0x221>
		{
			return 0;
		}
		if(GPRS_Receive_Flag&(0x1<<3))
    12ea:	23 fd       	sbrc	r18, 3
    12ec:	19 c0       	rjmp	.+50     	; 0x1320 <__stack+0x221>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ee:	2f ef       	ldi	r18, 0xFF	; 255
    12f0:	8f ed       	ldi	r24, 0xDF	; 223
    12f2:	90 e1       	ldi	r25, 0x10	; 16
    12f4:	21 50       	subi	r18, 0x01	; 1
    12f6:	80 40       	sbci	r24, 0x00	; 0
    12f8:	90 40       	sbci	r25, 0x00	; 0
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <__stack+0x1f5>
    12fc:	00 c0       	rjmp	.+0      	; 0x12fe <__stack+0x1ff>
    12fe:	00 00       	nop
		_delay_ms(500);
		if(GPRS_Receive_Flag&(0x01<<9))
		{
			//_delay_ms(3000);
		}
		if(GPRS_Receive_Flag&(0x01<<1))
    1300:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1304:	81 ff       	sbrs	r24, 1
    1306:	09 c0       	rjmp	.+18     	; 0x131a <__stack+0x21b>
    1308:	af ef       	ldi	r26, 0xFF	; 255
    130a:	bf e1       	ldi	r27, 0x1F	; 31
    130c:	ea e0       	ldi	r30, 0x0A	; 10
    130e:	a1 50       	subi	r26, 0x01	; 1
    1310:	b0 40       	sbci	r27, 0x00	; 0
    1312:	e0 40       	sbci	r30, 0x00	; 0
    1314:	e1 f7       	brne	.-8      	; 0x130e <__stack+0x20f>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <__stack+0x219>
    1318:	00 00       	nop
    131a:	11 50       	subi	r17, 0x01	; 1
}
inline unsigned char GPRS_Send_Cmd(unsigned char *cmd)
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
    131c:	09 f0       	breq	.+2      	; 0x1320 <__stack+0x221>
    131e:	b4 cf       	rjmp	.-152    	; 0x1288 <__stack+0x189>
			{
				unsigned char timeout = 500;
				while(!(GPRS_Receive_Flag & 1<<3) & timeout --)
				_delay_ms(10);
		
				USART1_Transmit_nChar(Send_Data,Send_Len);
    1320:	6b 2d       	mov	r22, r11
    1322:	c3 01       	movw	r24, r6
    1324:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <USART1_Transmit_nChar>
				timeout	= 1000;
				while (!(GPRS_Receive_Flag & 1<<2) && timeout --)
    1328:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    132c:	82 fd       	sbrc	r24, 2
    132e:	10 c0       	rjmp	.+32     	; 0x1350 <__stack+0x251>
    1330:	88 ee       	ldi	r24, 0xE8	; 232
    1332:	af ef       	ldi	r26, 0xFF	; 255
    1334:	bb e6       	ldi	r27, 0x6B	; 107
    1336:	11 97       	sbiw	r26, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <__stack+0x237>
    133a:	00 c0       	rjmp	.+0      	; 0x133c <__stack+0x23d>
    133c:	00 00       	nop
    133e:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    1342:	92 fd       	sbrc	r25, 2
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <__stack+0x251>
    1346:	81 50       	subi	r24, 0x01	; 1
    1348:	a1 f7       	brne	.-24     	; 0x1332 <__stack+0x233>
    134a:	aa 94       	dec	r10
		Str_Add_Str(sendcipsend,11,send_len,2);
		Str_Add_Str(sendcipsend,13,"\r\n",2);
	
		//USART0_Transmit_String(sendcipsend);
		unsigned char i = 2;
		while(i--)
    134c:	a1 10       	cpse	r10, r1
    134e:	9b cf       	rjmp	.-202    	; 0x1286 <__stack+0x187>
				}
			}
		}
		//			Êý¾ÝµÄ×Ü³¤¶È	Êý¾Ý³¤¶È
		unsigned char len = 0,revice_len = 0;
		unsigned char len_tmp[4] = {0};
    1350:	18 8a       	std	Y+16, r1	; 0x10
    1352:	19 8a       	std	Y+17, r1	; 0x11
    1354:	1a 8a       	std	Y+18, r1	; 0x12
    1356:	1b 8a       	std	Y+19, r1	; 0x13
			
//2B 43 49 50 52 43 56 3A 32 32 2C BB 66 66 80 00 12 41 31 31 31 31 31 31 33 00 09 00 10 18 35 FC FF 
		Str_Add_Str(len_tmp,0,&GPRS_Receive[8],2);
    1358:	22 e0       	ldi	r18, 0x02	; 2
    135a:	4c e0       	ldi	r20, 0x0C	; 12
    135c:	55 e0       	ldi	r21, 0x05	; 5
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	ce 01       	movw	r24, r28
    1362:	40 96       	adiw	r24, 0x10	; 16
    1364:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
		len = atoi(len_tmp);
    1368:	ce 01       	movw	r24, r28
    136a:	40 96       	adiw	r24, 0x10	; 16
    136c:	0e 94 0c 18 	call	0x3018	; 0x3018 <atoi>
    1370:	8c 01       	movw	r16, r24
    1372:	98 2e       	mov	r9, r24
		if((revice_len == len) > 20)
		{	
			//BEEP(10);
			//LEDON;
		}
		Str_Add_Str(Rece_Data,0,&(GPRS_Receive[11]),len);
    1374:	28 2f       	mov	r18, r24
    1376:	4f e0       	ldi	r20, 0x0F	; 15
    1378:	55 e0       	ldi	r21, 0x05	; 5
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	c7 01       	movw	r24, r14
    137e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1382:	68 94       	set
    1384:	bb 24       	eor	r11, r11
    1386:	b1 f8       	bld	r11, 1
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
	{
		memset(GPRS_Receive,0,100);
    1388:	0f 2e       	mov	r0, r31
    138a:	f4 e0       	ldi	r31, 0x04	; 4
    138c:	cf 2e       	mov	r12, r31
    138e:	f5 e0       	ldi	r31, 0x05	; 5
    1390:	df 2e       	mov	r13, r31
    1392:	f0 2d       	mov	r31, r0
    1394:	0f 2e       	mov	r0, r31
    1396:	f4 e6       	ldi	r31, 0x64	; 100
    1398:	af 2e       	mov	r10, r31
    139a:	f0 2d       	mov	r31, r0
    139c:	f6 01       	movw	r30, r12
    139e:	2a 2d       	mov	r18, r10
    13a0:	11 92       	st	Z+, r1
    13a2:	2a 95       	dec	r18
    13a4:	e9 f7       	brne	.-6      	; 0x13a0 <__stack+0x2a1>
		timeout = 0xFFF;
		GPRS_Receive_Flag = 0;
    13a6:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <GPRS_Receive_Flag+0x1>
    13aa:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <GPRS_Receive_Flag>
		USART1_Transmit_String(cmd);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <USART1_Transmit_String>
		while((!(GPRS_Receive_Flag &((0x1<<4)|(0x1<<1)|(0x1<<3)|((0x1<<6)))))&& (timeout --))
    13b6:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    13ba:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    13be:	ca 01       	movw	r24, r20
    13c0:	8a 75       	andi	r24, 0x5A	; 90
    13c2:	99 27       	eor	r25, r25
    13c4:	89 2b       	or	r24, r25
    13c6:	91 f4       	brne	.+36     	; 0x13ec <__stack+0x2ed>
    13c8:	2f ef       	ldi	r18, 0xFF	; 255
    13ca:	3f e0       	ldi	r19, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13cc:	88 eb       	ldi	r24, 0xB8	; 184
    13ce:	8a 95       	dec	r24
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <__stack+0x2cf>
    13d2:	00 00       	nop
    13d4:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    13d8:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    13dc:	ca 01       	movw	r24, r20
    13de:	8a 75       	andi	r24, 0x5A	; 90
    13e0:	99 27       	eor	r25, r25
    13e2:	89 2b       	or	r24, r25
    13e4:	19 f4       	brne	.+6      	; 0x13ec <__stack+0x2ed>
    13e6:	21 50       	subi	r18, 0x01	; 1
    13e8:	31 09       	sbc	r19, r1
    13ea:	81 f7       	brne	.-32     	; 0x13cc <__stack+0x2cd>
			_delay_us(50);
		if(GPRS_Receive_Flag&(0x1<<4))
    13ec:	44 fd       	sbrc	r20, 4
    13ee:	23 c0       	rjmp	.+70     	; 0x1436 <__stack+0x337>
		{
			return 0;
		}
		if(	LCD_Ico &(0x01 << 6) )
    13f0:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    13f4:	86 fd       	sbrc	r24, 6
    13f6:	1f c0       	rjmp	.+62     	; 0x1436 <__stack+0x337>
		{
			return 0 ;
		}
		if(SCQ != 0)
    13f8:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
    13fc:	81 11       	cpse	r24, r1
    13fe:	1b c0       	rjmp	.+54     	; 0x1436 <__stack+0x337>
		{
			return 0;
		}
		if(GPRS_Receive_Flag&(0x1<<3))
    1400:	43 fd       	sbrc	r20, 3
    1402:	19 c0       	rjmp	.+50     	; 0x1436 <__stack+0x337>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	af ed       	ldi	r26, 0xDF	; 223
    1408:	b0 e1       	ldi	r27, 0x10	; 16
    140a:	91 50       	subi	r25, 0x01	; 1
    140c:	a0 40       	sbci	r26, 0x00	; 0
    140e:	b0 40       	sbci	r27, 0x00	; 0
    1410:	e1 f7       	brne	.-8      	; 0x140a <__stack+0x30b>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <__stack+0x315>
    1414:	00 00       	nop
		_delay_ms(500);
		if(GPRS_Receive_Flag&(0x01<<9))
		{
			//_delay_ms(3000);
		}
		if(GPRS_Receive_Flag&(0x01<<1))
    1416:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    141a:	81 ff       	sbrs	r24, 1
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <__stack+0x331>
    141e:	ef ef       	ldi	r30, 0xFF	; 255
    1420:	ff e1       	ldi	r31, 0x1F	; 31
    1422:	2a e0       	ldi	r18, 0x0A	; 10
    1424:	e1 50       	subi	r30, 0x01	; 1
    1426:	f0 40       	sbci	r31, 0x00	; 0
    1428:	20 40       	sbci	r18, 0x00	; 0
    142a:	e1 f7       	brne	.-8      	; 0x1424 <__stack+0x325>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <__stack+0x32f>
    142e:	00 00       	nop
    1430:	ba 94       	dec	r11
}
inline unsigned char GPRS_Send_Cmd(unsigned char *cmd)
{
	unsigned char n = 2;
	unsigned int timeout;//³¬Ê±²Ù×÷
	while(n--)
    1432:	b1 10       	cpse	r11, r1
    1434:	b3 cf       	rjmp	.-154    	; 0x139c <__stack+0x29d>
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	9f e1       	ldi	r25, 0x1F	; 31
    143a:	aa e0       	ldi	r26, 0x0A	; 10
    143c:	81 50       	subi	r24, 0x01	; 1
    143e:	90 40       	sbci	r25, 0x00	; 0
    1440:	a0 40       	sbci	r26, 0x00	; 0
    1442:	e1 f7       	brne	.-8      	; 0x143c <__stack+0x33d>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <__stack+0x347>
    1446:	00 00       	nop
				//BEEP(10);
				//GPRS_Send_Cmd(sendat);
				len = GPRS_Send_Data(Send_Data,Send_Len,Rece_Data);
				GPRS_Send_Cmd(sendtcpclose);	
				_delay_ms(300);
				if(len > 20)
    1448:	b4 e1       	ldi	r27, 0x14	; 20
    144a:	b9 15       	cp	r27, r9
    144c:	90 f4       	brcc	.+36     	; 0x1472 <__stack+0x373>
				{
				//	USART0_Transmit_nChar(Rece_Data,len);
				//	LEDOFF;				
					if(Check_CRC16(Rece_Data,0,(len-4)))
    144e:	a8 01       	movw	r20, r16
    1450:	55 27       	eor	r21, r21
    1452:	44 50       	subi	r20, 0x04	; 4
    1454:	51 09       	sbc	r21, r1
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	c7 01       	movw	r24, r14
    145c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <Check_CRC16>
    1460:	89 2b       	or	r24, r25
    1462:	49 f0       	breq	.+18     	; 0x1476 <__stack+0x377>
					{
	
						BEEP(1000);//crcÑéÖ¤Ê§°Ü
    1464:	88 ee       	ldi	r24, 0xE8	; 232
    1466:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <BEEP>
						return 0;
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	27 c0       	rjmp	.+78     	; 0x14bc <__stack+0x3bd>

inline unsigned char ShortTurl(unsigned char *Send_Data, unsigned int Send_Len,unsigned char *Rece_Data)
{
	//LEDON;
		
	unsigned char len = 0x0;
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	25 c0       	rjmp	.+74     	; 0x14bc <__stack+0x3bd>
		//	_delay_ms( 300);
			{
				//_delay_ms(200);
				//BEEP(10);
				//GPRS_Send_Cmd(sendat);
				len = GPRS_Send_Data(Send_Data,Send_Len,Rece_Data);
    1472:	80 2f       	mov	r24, r16
    1474:	23 c0       	rjmp	.+70     	; 0x14bc <__stack+0x3bd>
					{
	
						BEEP(1000);//crcÑéÖ¤Ê§°Ü
						return 0;
					}
					return len;
    1476:	80 2f       	mov	r24, r16
    1478:	21 c0       	rjmp	.+66     	; 0x14bc <__stack+0x3bd>
    147a:	ef ef       	ldi	r30, 0xFF	; 255
    147c:	ff eb       	ldi	r31, 0xBF	; 191
    147e:	26 e0       	ldi	r18, 0x06	; 6
    1480:	e1 50       	subi	r30, 0x01	; 1
    1482:	f0 40       	sbci	r31, 0x00	; 0
    1484:	20 40       	sbci	r18, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <__stack+0x381>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <__stack+0x38b>
    148a:	00 00       	nop
    148c:	68 94       	set
    148e:	99 24       	eor	r9, r9
    1490:	91 f8       	bld	r9, 1
	_delay_ms(200);
		//USART0_Transmit_String("------------TCPCONET");
	unsigned char n = 2 ,i;
	while(n--)
	{
		memset(GPRS_Receive,0,100);
    1492:	0f 2e       	mov	r0, r31
    1494:	f4 e0       	ldi	r31, 0x04	; 4
    1496:	cf 2e       	mov	r12, r31
    1498:	f5 e0       	ldi	r31, 0x05	; 5
    149a:	df 2e       	mov	r13, r31
    149c:	f0 2d       	mov	r31, r0
    149e:	0f 2e       	mov	r0, r31
    14a0:	f4 e6       	ldi	r31, 0x64	; 100
    14a2:	8f 2e       	mov	r8, r31
    14a4:	f0 2d       	mov	r31, r0
    14a6:	4c ce       	rjmp	.-872    	; 0x1140 <__stack+0x41>
	}
	
	
	//BEEP(10);
	timeout = 800;
	while(!(GPRS_Receive_Flag & 1<<7) && timeout--)
    14a8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    14ac:	87 ff       	sbrs	r24, 7
    14ae:	88 ce       	rjmp	.-752    	; 0x11c0 <__stack+0xc1>
    14b0:	95 ce       	rjmp	.-726    	; 0x11dc <__stack+0xdd>
    14b2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    14b6:	87 ff       	sbrs	r24, 7
    14b8:	83 ce       	rjmp	.-762    	; 0x11c0 <__stack+0xc1>
    14ba:	90 ce       	rjmp	.-736    	; 0x11dc <__stack+0xdd>
//			GPRS_Send_Cmd(sendtcpclose);
	
	}
#endif 
	return len;
}
    14bc:	65 96       	adiw	r28, 0x15	; 21
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	9f 90       	pop	r9
    14de:	8f 90       	pop	r8
    14e0:	7f 90       	pop	r7
    14e2:	6f 90       	pop	r6
    14e4:	08 95       	ret

000014e6 <TM1726_start>:

unsigned char drp_num = 0;
unsigned char error_ico = 0;
inline void reset_lcd(void)
{
	memset(LCDNUM,0,18);
    14e6:	d8 9a       	sbi	0x1b, 0	; 27
    14e8:	d9 9a       	sbi	0x1b, 1	; 27
    14ea:	85 e2       	ldi	r24, 0x25	; 37
    14ec:	8a 95       	dec	r24
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <TM1726_start+0x6>
    14f0:	d8 98       	cbi	0x1b, 0	; 27
    14f2:	85 e2       	ldi	r24, 0x25	; 37
    14f4:	8a 95       	dec	r24
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <TM1726_start+0xe>
    14f8:	d9 98       	cbi	0x1b, 1	; 27
    14fa:	85 e2       	ldi	r24, 0x25	; 37
    14fc:	8a 95       	dec	r24
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <TM1726_start+0x16>
    1500:	08 95       	ret

00001502 <TM1726_stop>:
    1502:	d8 98       	cbi	0x1b, 0	; 27
    1504:	d9 9a       	sbi	0x1b, 1	; 27
    1506:	85 e2       	ldi	r24, 0x25	; 37
    1508:	8a 95       	dec	r24
    150a:	f1 f7       	brne	.-4      	; 0x1508 <TM1726_stop+0x6>
    150c:	d8 9a       	sbi	0x1b, 0	; 27
    150e:	85 e2       	ldi	r24, 0x25	; 37
    1510:	8a 95       	dec	r24
    1512:	f1 f7       	brne	.-4      	; 0x1510 <TM1726_stop+0xe>
    1514:	d9 98       	cbi	0x1b, 1	; 27
    1516:	85 e2       	ldi	r24, 0x25	; 37
    1518:	8a 95       	dec	r24
    151a:	f1 f7       	brne	.-4      	; 0x1518 <TM1726_stop+0x16>
    151c:	08 95       	ret

0000151e <WRITE_DATA_1726>:
    151e:	d8 98       	cbi	0x1b, 0	; 27
    1520:	d9 98       	cbi	0x1b, 1	; 27
    1522:	24 e0       	ldi	r18, 0x04	; 4
    1524:	2a 95       	dec	r18
    1526:	f1 f7       	brne	.-4      	; 0x1524 <WRITE_DATA_1726+0x6>
    1528:	98 e0       	ldi	r25, 0x08	; 8
    152a:	d9 98       	cbi	0x1b, 1	; 27
    152c:	80 fd       	sbrc	r24, 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <WRITE_DATA_1726+0x16>
    1530:	d8 98       	cbi	0x1b, 0	; 27
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <WRITE_DATA_1726+0x18>
    1534:	d8 9a       	sbi	0x1b, 0	; 27
    1536:	24 e0       	ldi	r18, 0x04	; 4
    1538:	2a 95       	dec	r18
    153a:	f1 f7       	brne	.-4      	; 0x1538 <WRITE_DATA_1726+0x1a>
    153c:	d9 9a       	sbi	0x1b, 1	; 27
    153e:	86 95       	lsr	r24
    1540:	91 50       	subi	r25, 0x01	; 1
    1542:	99 f7       	brne	.-26     	; 0x152a <WRITE_DATA_1726+0xc>
    1544:	d9 98       	cbi	0x1b, 1	; 27
    1546:	d8 98       	cbi	0x1b, 0	; 27
    1548:	08 95       	ret

0000154a <WRITE_ALLRAM_1726>:
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	d8 2f       	mov	r29, r24
    1550:	d8 9a       	sbi	0x1b, 0	; 27
    1552:	d9 9a       	sbi	0x1b, 1	; 27
    1554:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TM1726_start>
    1558:	84 e0       	ldi	r24, 0x04	; 4
    155a:	8a 95       	dec	r24
    155c:	f1 f7       	brne	.-4      	; 0x155a <WRITE_ALLRAM_1726+0x10>
    155e:	80 ec       	ldi	r24, 0xC0	; 192
    1560:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    1564:	c2 e1       	ldi	r28, 0x12	; 18
    1566:	d8 9a       	sbi	0x1b, 0	; 27
    1568:	d9 9a       	sbi	0x1b, 1	; 27
    156a:	dd 23       	and	r29, r29
    156c:	21 f0       	breq	.+8      	; 0x1576 <WRITE_ALLRAM_1726+0x2c>
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    1574:	03 c0       	rjmp	.+6      	; 0x157c <WRITE_ALLRAM_1726+0x32>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    157c:	c1 50       	subi	r28, 0x01	; 1
    157e:	99 f7       	brne	.-26     	; 0x1566 <WRITE_ALLRAM_1726+0x1c>
    1580:	0e 94 81 0a 	call	0x1502	; 0x1502 <TM1726_stop>
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <REFRESH_ALLRAM_1726>:
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	d8 9a       	sbi	0x1b, 0	; 27
    1594:	d9 9a       	sbi	0x1b, 1	; 27
    1596:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TM1726_start>
    159a:	84 e0       	ldi	r24, 0x04	; 4
    159c:	8a 95       	dec	r24
    159e:	f1 f7       	brne	.-4      	; 0x159c <REFRESH_ALLRAM_1726+0x12>
    15a0:	80 ec       	ldi	r24, 0xC0	; 192
    15a2:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    15a6:	c4 ee       	ldi	r28, 0xE4	; 228
    15a8:	d4 e0       	ldi	r29, 0x04	; 4
    15aa:	06 ef       	ldi	r16, 0xF6	; 246
    15ac:	14 e0       	ldi	r17, 0x04	; 4
    15ae:	d8 9a       	sbi	0x1b, 0	; 27
    15b0:	d9 9a       	sbi	0x1b, 1	; 27
    15b2:	89 91       	ld	r24, Y+
    15b4:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    15b8:	c0 17       	cp	r28, r16
    15ba:	d1 07       	cpc	r29, r17
    15bc:	c1 f7       	brne	.-16     	; 0x15ae <REFRESH_ALLRAM_1726+0x24>
    15be:	0e 94 81 0a 	call	0x1502	; 0x1502 <TM1726_stop>
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	08 95       	ret

000015cc <INIT_1726>:
    15cc:	d8 9a       	sbi	0x1b, 0	; 27
    15ce:	d9 9a       	sbi	0x1b, 1	; 27
    15d0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TM1726_start>
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	8a 95       	dec	r24
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <INIT_1726+0xa>
    15da:	87 e3       	ldi	r24, 0x37	; 55
    15dc:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    15e0:	0e 94 81 0a 	call	0x1502	; 0x1502 <TM1726_stop>
    15e4:	08 95       	ret

000015e6 <WRITE_1DATA_1726>:
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	d8 2f       	mov	r29, r24
    15ec:	c6 2f       	mov	r28, r22
    15ee:	d8 9a       	sbi	0x1b, 0	; 27
    15f0:	d9 9a       	sbi	0x1b, 1	; 27
    15f2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TM1726_start>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9b e6       	ldi	r25, 0x6B	; 107
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <WRITE_1DATA_1726+0x14>
    15fe:	00 c0       	rjmp	.+0      	; 0x1600 <WRITE_1DATA_1726+0x1a>
    1600:	00 00       	nop
    1602:	80 ec       	ldi	r24, 0xC0	; 192
    1604:	8d 0f       	add	r24, r29
    1606:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    160a:	d8 9a       	sbi	0x1b, 0	; 27
    160c:	d9 9a       	sbi	0x1b, 1	; 27
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	9b e6       	ldi	r25, 0x6B	; 107
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <WRITE_1DATA_1726+0x2c>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <WRITE_1DATA_1726+0x32>
    1618:	00 00       	nop
    161a:	8c 2f       	mov	r24, r28
    161c:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    1620:	0e 94 81 0a 	call	0x1502	; 0x1502 <TM1726_stop>
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <signal_ico>:
    162a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    162e:	88 23       	and	r24, r24
    1630:	34 f4       	brge	.+12     	; 0x163e <signal_ico+0x14>
    1632:	e4 ee       	ldi	r30, 0xE4	; 228
    1634:	f4 e0       	ldi	r31, 0x04	; 4
    1636:	81 81       	ldd	r24, Z+1	; 0x01
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	81 83       	std	Z+1, r24	; 0x01
    163c:	08 95       	ret
    163e:	e4 ee       	ldi	r30, 0xE4	; 228
    1640:	f4 e0       	ldi	r31, 0x04	; 4
    1642:	81 81       	ldd	r24, Z+1	; 0x01
    1644:	8e 7f       	andi	r24, 0xFE	; 254
    1646:	81 83       	std	Z+1, r24	; 0x01
    1648:	08 95       	ret

0000164a <hydropenia_ico>:
    164a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    164e:	84 ff       	sbrs	r24, 4
    1650:	06 c0       	rjmp	.+12     	; 0x165e <hydropenia_ico+0x14>
    1652:	e4 ee       	ldi	r30, 0xE4	; 228
    1654:	f4 e0       	ldi	r31, 0x04	; 4
    1656:	86 85       	ldd	r24, Z+14	; 0x0e
    1658:	80 61       	ori	r24, 0x10	; 16
    165a:	86 87       	std	Z+14, r24	; 0x0e
    165c:	08 95       	ret
    165e:	e4 ee       	ldi	r30, 0xE4	; 228
    1660:	f4 e0       	ldi	r31, 0x04	; 4
    1662:	86 85       	ldd	r24, Z+14	; 0x0e
    1664:	8f 7e       	andi	r24, 0xEF	; 239
    1666:	86 87       	std	Z+14, r24	; 0x0e
    1668:	08 95       	ret

0000166a <leakage_ico>:
    166a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    166e:	85 ff       	sbrs	r24, 5
    1670:	06 c0       	rjmp	.+12     	; 0x167e <leakage_ico+0x14>
    1672:	e4 ee       	ldi	r30, 0xE4	; 228
    1674:	f4 e0       	ldi	r31, 0x04	; 4
    1676:	85 85       	ldd	r24, Z+13	; 0x0d
    1678:	80 61       	ori	r24, 0x10	; 16
    167a:	85 87       	std	Z+13, r24	; 0x0d
    167c:	08 95       	ret
    167e:	e4 ee       	ldi	r30, 0xE4	; 228
    1680:	f4 e0       	ldi	r31, 0x04	; 4
    1682:	85 85       	ldd	r24, Z+13	; 0x0d
    1684:	8f 7e       	andi	r24, 0xEF	; 239
    1686:	85 87       	std	Z+13, r24	; 0x0d
    1688:	08 95       	ret

0000168a <pure_water_ico>:
    168a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    168e:	83 ff       	sbrs	r24, 3
    1690:	06 c0       	rjmp	.+12     	; 0x169e <pure_water_ico+0x14>
    1692:	e4 ee       	ldi	r30, 0xE4	; 228
    1694:	f4 e0       	ldi	r31, 0x04	; 4
    1696:	82 85       	ldd	r24, Z+10	; 0x0a
    1698:	80 61       	ori	r24, 0x10	; 16
    169a:	82 87       	std	Z+10, r24	; 0x0a
    169c:	08 95       	ret
    169e:	e4 ee       	ldi	r30, 0xE4	; 228
    16a0:	f4 e0       	ldi	r31, 0x04	; 4
    16a2:	82 85       	ldd	r24, Z+10	; 0x0a
    16a4:	8f 7e       	andi	r24, 0xEF	; 239
    16a6:	82 87       	std	Z+10, r24	; 0x0a
    16a8:	08 95       	ret

000016aa <raw_water_ico>:
    16aa:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    16ae:	82 ff       	sbrs	r24, 2
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <raw_water_ico+0x14>
    16b2:	e4 ee       	ldi	r30, 0xE4	; 228
    16b4:	f4 e0       	ldi	r31, 0x04	; 4
    16b6:	81 89       	ldd	r24, Z+17	; 0x11
    16b8:	80 61       	ori	r24, 0x10	; 16
    16ba:	81 8b       	std	Z+17, r24	; 0x11
    16bc:	08 95       	ret
    16be:	e4 ee       	ldi	r30, 0xE4	; 228
    16c0:	f4 e0       	ldi	r31, 0x04	; 4
    16c2:	81 89       	ldd	r24, Z+17	; 0x11
    16c4:	8f 7e       	andi	r24, 0xEF	; 239
    16c6:	81 8b       	std	Z+17, r24	; 0x11
    16c8:	08 95       	ret

000016ca <flow_ico>:
    16ca:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    16ce:	81 ff       	sbrs	r24, 1
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <flow_ico+0x14>
    16d2:	e4 ee       	ldi	r30, 0xE4	; 228
    16d4:	f4 e0       	ldi	r31, 0x04	; 4
    16d6:	80 85       	ldd	r24, Z+8	; 0x08
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	80 87       	std	Z+8, r24	; 0x08
    16dc:	08 95       	ret
    16de:	e4 ee       	ldi	r30, 0xE4	; 228
    16e0:	f4 e0       	ldi	r31, 0x04	; 4
    16e2:	80 85       	ldd	r24, Z+8	; 0x08
    16e4:	8e 7f       	andi	r24, 0xFE	; 254
    16e6:	80 87       	std	Z+8, r24	; 0x08
    16e8:	08 95       	ret

000016ea <time_ico>:
    16ea:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    16ee:	80 ff       	sbrs	r24, 0
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <time_ico+0x14>
    16f2:	e4 ee       	ldi	r30, 0xE4	; 228
    16f4:	f4 e0       	ldi	r31, 0x04	; 4
    16f6:	80 81       	ld	r24, Z
    16f8:	81 60       	ori	r24, 0x01	; 1
    16fa:	80 83       	st	Z, r24
    16fc:	08 95       	ret
    16fe:	e4 ee       	ldi	r30, 0xE4	; 228
    1700:	f4 e0       	ldi	r31, 0x04	; 4
    1702:	80 81       	ld	r24, Z
    1704:	8e 7f       	andi	r24, 0xFE	; 254
    1706:	80 83       	st	Z, r24
    1708:	08 95       	ret

0000170a <null_ico>:
    170a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    170e:	88 23       	and	r24, r24
    1710:	34 f4       	brge	.+12     	; 0x171e <null_ico+0x14>
    1712:	e4 ee       	ldi	r30, 0xE4	; 228
    1714:	f4 e0       	ldi	r31, 0x04	; 4
    1716:	81 85       	ldd	r24, Z+9	; 0x09
    1718:	81 60       	ori	r24, 0x01	; 1
    171a:	81 87       	std	Z+9, r24	; 0x09
    171c:	08 95       	ret
    171e:	e4 ee       	ldi	r30, 0xE4	; 228
    1720:	f4 e0       	ldi	r31, 0x04	; 4
    1722:	81 85       	ldd	r24, Z+9	; 0x09
    1724:	8e 7f       	andi	r24, 0xFE	; 254
    1726:	81 87       	std	Z+9, r24	; 0x09
    1728:	08 95       	ret

0000172a <signal>:
    172a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    172e:	88 23       	and	r24, r24
    1730:	1c f0       	brlt	.+6      	; 0x1738 <signal+0xe>
    1732:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <SCQ>
    1736:	0c c0       	rjmp	.+24     	; 0x1750 <signal+0x26>
    1738:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <SCQ>
    173c:	88 23       	and	r24, r24
    173e:	41 f0       	breq	.+16     	; 0x1750 <signal+0x26>
    1740:	e4 ee       	ldi	r30, 0xE4	; 228
    1742:	f4 e0       	ldi	r31, 0x04	; 4
    1744:	92 81       	ldd	r25, Z+2	; 0x02
    1746:	91 60       	ori	r25, 0x01	; 1
    1748:	92 83       	std	Z+2, r25	; 0x02
    174a:	89 30       	cpi	r24, 0x09	; 9
    174c:	40 f4       	brcc	.+16     	; 0x175e <signal+0x34>
    174e:	0d c0       	rjmp	.+26     	; 0x176a <signal+0x40>
    1750:	e4 ee       	ldi	r30, 0xE4	; 228
    1752:	f4 e0       	ldi	r31, 0x04	; 4
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	82 83       	std	Z+2, r24	; 0x02
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	06 c0       	rjmp	.+12     	; 0x176a <signal+0x40>
    175e:	e4 ee       	ldi	r30, 0xE4	; 228
    1760:	f4 e0       	ldi	r31, 0x04	; 4
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	91 60       	ori	r25, 0x01	; 1
    1766:	93 83       	std	Z+3, r25	; 0x03
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <signal+0x4a>
    176a:	e4 ee       	ldi	r30, 0xE4	; 228
    176c:	f4 e0       	ldi	r31, 0x04	; 4
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	9e 7f       	andi	r25, 0xFE	; 254
    1772:	93 83       	std	Z+3, r25	; 0x03
    1774:	81 31       	cpi	r24, 0x11	; 17
    1776:	30 f0       	brcs	.+12     	; 0x1784 <signal+0x5a>
    1778:	e4 ee       	ldi	r30, 0xE4	; 228
    177a:	f4 e0       	ldi	r31, 0x04	; 4
    177c:	94 81       	ldd	r25, Z+4	; 0x04
    177e:	91 60       	ori	r25, 0x01	; 1
    1780:	94 83       	std	Z+4, r25	; 0x04
    1782:	05 c0       	rjmp	.+10     	; 0x178e <signal+0x64>
    1784:	e4 ee       	ldi	r30, 0xE4	; 228
    1786:	f4 e0       	ldi	r31, 0x04	; 4
    1788:	94 81       	ldd	r25, Z+4	; 0x04
    178a:	9e 7f       	andi	r25, 0xFE	; 254
    178c:	94 83       	std	Z+4, r25	; 0x04
    178e:	89 31       	cpi	r24, 0x19	; 25
    1790:	30 f0       	brcs	.+12     	; 0x179e <signal+0x74>
    1792:	e4 ee       	ldi	r30, 0xE4	; 228
    1794:	f4 e0       	ldi	r31, 0x04	; 4
    1796:	85 81       	ldd	r24, Z+5	; 0x05
    1798:	81 60       	ori	r24, 0x01	; 1
    179a:	85 83       	std	Z+5, r24	; 0x05
    179c:	08 95       	ret
    179e:	e4 ee       	ldi	r30, 0xE4	; 228
    17a0:	f4 e0       	ldi	r31, 0x04	; 4
    17a2:	85 81       	ldd	r24, Z+5	; 0x05
    17a4:	8e 7f       	andi	r24, 0xFE	; 254
    17a6:	85 83       	std	Z+5, r24	; 0x05
    17a8:	08 95       	ret

000017aa <ico>:
    17aa:	0e 94 15 0b 	call	0x162a	; 0x162a <signal_ico>
    17ae:	0e 94 25 0b 	call	0x164a	; 0x164a <hydropenia_ico>
    17b2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <time_ico>
    17b6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <flow_ico>
    17ba:	0e 94 55 0b 	call	0x16aa	; 0x16aa <raw_water_ico>
    17be:	0e 94 35 0b 	call	0x166a	; 0x166a <leakage_ico>
    17c2:	0e 94 45 0b 	call	0x168a	; 0x168a <pure_water_ico>
    17c6:	0e 94 85 0b 	call	0x170a	; 0x170a <null_ico>
    17ca:	08 95       	ret

000017cc <Write_addr_data>:
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	c8 2f       	mov	r28, r24
    17da:	16 2f       	mov	r17, r22
    17dc:	7a 01       	movw	r14, r20
    17de:	d8 9a       	sbi	0x1b, 0	; 27
    17e0:	d9 9a       	sbi	0x1b, 1	; 27
    17e2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TM1726_start>
    17e6:	84 e0       	ldi	r24, 0x04	; 4
    17e8:	8a 95       	dec	r24
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <Write_addr_data+0x1c>
    17ec:	80 ec       	ldi	r24, 0xC0	; 192
    17ee:	8c 0f       	add	r24, r28
    17f0:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    17f4:	11 23       	and	r17, r17
    17f6:	81 f0       	breq	.+32     	; 0x1818 <Write_addr_data+0x4c>
    17f8:	e7 01       	movw	r28, r14
    17fa:	11 50       	subi	r17, 0x01	; 1
    17fc:	01 2f       	mov	r16, r17
    17fe:	10 e0       	ldi	r17, 0x00	; 0
    1800:	0f 5f       	subi	r16, 0xFF	; 255
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	0e 0d       	add	r16, r14
    1806:	1f 1d       	adc	r17, r15
    1808:	d8 9a       	sbi	0x1b, 0	; 27
    180a:	d9 9a       	sbi	0x1b, 1	; 27
    180c:	89 91       	ld	r24, Y+
    180e:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
    1812:	c0 17       	cp	r28, r16
    1814:	d1 07       	cpc	r29, r17
    1816:	c1 f7       	brne	.-16     	; 0x1808 <Write_addr_data+0x3c>
    1818:	0e 94 81 0a 	call	0x1502	; 0x1502 <TM1726_stop>
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	08 95       	ret

0000182a <drip>:
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <loop.2447>
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	61 f1       	breq	.+88     	; 0x188e <drip+0x64>
    1836:	28 f4       	brcc	.+10     	; 0x1842 <drip+0x18>
    1838:	88 23       	and	r24, r24
    183a:	59 f0       	breq	.+22     	; 0x1852 <drip+0x28>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	c1 f0       	breq	.+48     	; 0x1870 <drip+0x46>
    1840:	61 c0       	rjmp	.+194    	; 0x1904 <drip+0xda>
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	09 f4       	brne	.+2      	; 0x1848 <drip+0x1e>
    1846:	41 c0       	rjmp	.+130    	; 0x18ca <drip+0xa0>
    1848:	88 f1       	brcs	.+98     	; 0x18ac <drip+0x82>
    184a:	85 30       	cpi	r24, 0x05	; 5
    184c:	09 f4       	brne	.+2      	; 0x1850 <drip+0x26>
    184e:	4c c0       	rjmp	.+152    	; 0x18e8 <drip+0xbe>
    1850:	59 c0       	rjmp	.+178    	; 0x1904 <drip+0xda>
    1852:	c4 ee       	ldi	r28, 0xE4	; 228
    1854:	d4 e0       	ldi	r29, 0x04	; 4
    1856:	68 89       	ldd	r22, Y+16	; 0x10
    1858:	6f 7e       	andi	r22, 0xEF	; 239
    185a:	68 8b       	std	Y+16, r22	; 0x10
    185c:	80 e1       	ldi	r24, 0x10	; 16
    185e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WRITE_1DATA_1726>
    1862:	6c 85       	ldd	r22, Y+12	; 0x0c
    1864:	60 61       	ori	r22, 0x10	; 16
    1866:	6c 87       	std	Y+12, r22	; 0x0c
    1868:	8c e0       	ldi	r24, 0x0C	; 12
    186a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WRITE_1DATA_1726>
    186e:	4a c0       	rjmp	.+148    	; 0x1904 <drip+0xda>
    1870:	e4 ee       	ldi	r30, 0xE4	; 228
    1872:	f4 e0       	ldi	r31, 0x04	; 4
    1874:	83 85       	ldd	r24, Z+11	; 0x0b
    1876:	80 61       	ori	r24, 0x10	; 16
    1878:	83 87       	std	Z+11, r24	; 0x0b
    187a:	84 85       	ldd	r24, Z+12	; 0x0c
    187c:	8f 7e       	andi	r24, 0xEF	; 239
    187e:	84 87       	std	Z+12, r24	; 0x0c
    1880:	4f ee       	ldi	r20, 0xEF	; 239
    1882:	54 e0       	ldi	r21, 0x04	; 4
    1884:	62 e0       	ldi	r22, 0x02	; 2
    1886:	8b e0       	ldi	r24, 0x0B	; 11
    1888:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Write_addr_data>
    188c:	3b c0       	rjmp	.+118    	; 0x1904 <drip+0xda>
    188e:	c4 ee       	ldi	r28, 0xE4	; 228
    1890:	d4 e0       	ldi	r29, 0x04	; 4
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	6f 7e       	andi	r22, 0xEF	; 239
    1896:	6b 87       	std	Y+11, r22	; 0x0b
    1898:	8b e0       	ldi	r24, 0x0B	; 11
    189a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WRITE_1DATA_1726>
    189e:	6f 81       	ldd	r22, Y+7	; 0x07
    18a0:	61 60       	ori	r22, 0x01	; 1
    18a2:	6f 83       	std	Y+7, r22	; 0x07
    18a4:	87 e0       	ldi	r24, 0x07	; 7
    18a6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WRITE_1DATA_1726>
    18aa:	2c c0       	rjmp	.+88     	; 0x1904 <drip+0xda>
    18ac:	e4 ee       	ldi	r30, 0xE4	; 228
    18ae:	f4 e0       	ldi	r31, 0x04	; 4
    18b0:	87 81       	ldd	r24, Z+7	; 0x07
    18b2:	8e 7f       	andi	r24, 0xFE	; 254
    18b4:	87 83       	std	Z+7, r24	; 0x07
    18b6:	86 81       	ldd	r24, Z+6	; 0x06
    18b8:	81 60       	ori	r24, 0x01	; 1
    18ba:	86 83       	std	Z+6, r24	; 0x06
    18bc:	4a ee       	ldi	r20, 0xEA	; 234
    18be:	54 e0       	ldi	r21, 0x04	; 4
    18c0:	62 e0       	ldi	r22, 0x02	; 2
    18c2:	86 e0       	ldi	r24, 0x06	; 6
    18c4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Write_addr_data>
    18c8:	1d c0       	rjmp	.+58     	; 0x1904 <drip+0xda>
    18ca:	c4 ee       	ldi	r28, 0xE4	; 228
    18cc:	d4 e0       	ldi	r29, 0x04	; 4
    18ce:	6e 81       	ldd	r22, Y+6	; 0x06
    18d0:	6e 7f       	andi	r22, 0xFE	; 254
    18d2:	6e 83       	std	Y+6, r22	; 0x06
    18d4:	86 e0       	ldi	r24, 0x06	; 6
    18d6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WRITE_1DATA_1726>
    18da:	6f 85       	ldd	r22, Y+15	; 0x0f
    18dc:	60 61       	ori	r22, 0x10	; 16
    18de:	6f 87       	std	Y+15, r22	; 0x0f
    18e0:	8f e0       	ldi	r24, 0x0F	; 15
    18e2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WRITE_1DATA_1726>
    18e6:	0e c0       	rjmp	.+28     	; 0x1904 <drip+0xda>
    18e8:	e4 ee       	ldi	r30, 0xE4	; 228
    18ea:	f4 e0       	ldi	r31, 0x04	; 4
    18ec:	87 85       	ldd	r24, Z+15	; 0x0f
    18ee:	8f 7e       	andi	r24, 0xEF	; 239
    18f0:	87 87       	std	Z+15, r24	; 0x0f
    18f2:	80 89       	ldd	r24, Z+16	; 0x10
    18f4:	80 61       	ori	r24, 0x10	; 16
    18f6:	80 8b       	std	Z+16, r24	; 0x10
    18f8:	43 ef       	ldi	r20, 0xF3	; 243
    18fa:	54 e0       	ldi	r21, 0x04	; 4
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	8f e0       	ldi	r24, 0x0F	; 15
    1900:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Write_addr_data>
    1904:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <loop.2447>
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	86 30       	cpi	r24, 0x06	; 6
    190c:	18 f4       	brcc	.+6      	; 0x1914 <drip+0xea>
    190e:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <loop.2447>
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <drip+0xee>
    1914:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <loop.2447>
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <time_set>:
}
void time_set(unsigned char *time)
{
    191e:	dc 01       	movw	r26, r24
		unsigned char len = strlen(time);
    1920:	fc 01       	movw	r30, r24
    1922:	01 90       	ld	r0, Z+
    1924:	00 20       	and	r0, r0
    1926:	e9 f7       	brne	.-6      	; 0x1922 <time_set+0x4>
    1928:	31 97       	sbiw	r30, 0x01	; 1
    192a:	e8 1b       	sub	r30, r24
    192c:	e6 30       	cpi	r30, 0x06	; 6
    192e:	08 f0       	brcs	.+2      	; 0x1932 <time_set+0x14>
    1930:	e5 e0       	ldi	r30, 0x05	; 5
		if(len> 5)
			len = 5;
		//len = 3;
		switch(len)
    1932:	e2 30       	cpi	r30, 0x02	; 2
    1934:	79 f0       	breq	.+30     	; 0x1954 <time_set+0x36>
    1936:	28 f4       	brcc	.+10     	; 0x1942 <time_set+0x24>
    1938:	ee 23       	and	r30, r30
    193a:	41 f0       	breq	.+16     	; 0x194c <time_set+0x2e>
    193c:	e1 30       	cpi	r30, 0x01	; 1
    193e:	41 f0       	breq	.+16     	; 0x1950 <time_set+0x32>
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <time_set+0x42>
    1942:	e3 30       	cpi	r30, 0x03	; 3
    1944:	49 f0       	breq	.+18     	; 0x1958 <time_set+0x3a>
    1946:	e4 30       	cpi	r30, 0x04	; 4
    1948:	49 f0       	breq	.+18     	; 0x195c <time_set+0x3e>
    194a:	0a c0       	rjmp	.+20     	; 0x1960 <time_set+0x42>
		{
			case 0:
				LCDNUM[0]=0x00;
    194c:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <LCDNUM>
			case 1:
				LCDNUM[1]=0x00;
    1950:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <LCDNUM+0x1>
			case 2:
				LCDNUM[2]=0x00;
    1954:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <LCDNUM+0x2>
			case 3:
				LCDNUM[3]=0x00;
    1958:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <LCDNUM+0x3>
			case 4:
				LCDNUM[4]=0x00;
    195c:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <LCDNUM+0x4>
			default: break;
		}
		switch(len)
    1960:	e3 30       	cpi	r30, 0x03	; 3
    1962:	e1 f0       	breq	.+56     	; 0x199c <time_set+0x7e>
    1964:	28 f4       	brcc	.+10     	; 0x1970 <time_set+0x52>
    1966:	e1 30       	cpi	r30, 0x01	; 1
    1968:	59 f1       	breq	.+86     	; 0x19c0 <time_set+0xa2>
    196a:	e2 30       	cpi	r30, 0x02	; 2
    196c:	01 f1       	breq	.+64     	; 0x19ae <time_set+0x90>
    196e:	08 95       	ret
    1970:	e4 30       	cpi	r30, 0x04	; 4
    1972:	59 f0       	breq	.+22     	; 0x198a <time_set+0x6c>
    1974:	e5 30       	cpi	r30, 0x05	; 5
    1976:	59 f5       	brne	.+86     	; 0x19ce <time_set+0xb0>
		{
			case 5:
				LCDNUM[4]=SMGL[*(time+4)-0x30];
    1978:	14 96       	adiw	r26, 0x04	; 4
    197a:	ec 91       	ld	r30, X
    197c:	14 97       	sbiw	r26, 0x04	; 4
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	ea 5a       	subi	r30, 0xAA	; 170
    1982:	fe 4f       	sbci	r31, 0xFE	; 254
    1984:	80 81       	ld	r24, Z
    1986:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <LCDNUM+0x4>
			case 4:
				LCDNUM[3]=SMGL[*(time+3)-0x30];
    198a:	13 96       	adiw	r26, 0x03	; 3
    198c:	ec 91       	ld	r30, X
    198e:	13 97       	sbiw	r26, 0x03	; 3
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	ea 5a       	subi	r30, 0xAA	; 170
    1994:	fe 4f       	sbci	r31, 0xFE	; 254
    1996:	80 81       	ld	r24, Z
    1998:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <LCDNUM+0x3>
			case 3:
				LCDNUM[2]=SMGL[*(time+2)-0x30];
    199c:	12 96       	adiw	r26, 0x02	; 2
    199e:	ec 91       	ld	r30, X
    19a0:	12 97       	sbiw	r26, 0x02	; 2
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	ea 5a       	subi	r30, 0xAA	; 170
    19a6:	fe 4f       	sbci	r31, 0xFE	; 254
    19a8:	80 81       	ld	r24, Z
    19aa:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <LCDNUM+0x2>
			case 2:
				LCDNUM[1]=SMGL[*(time+1)-0x30];
    19ae:	11 96       	adiw	r26, 0x01	; 1
    19b0:	ec 91       	ld	r30, X
    19b2:	11 97       	sbiw	r26, 0x01	; 1
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	ea 5a       	subi	r30, 0xAA	; 170
    19b8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ba:	80 81       	ld	r24, Z
    19bc:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <LCDNUM+0x1>
			case 1:
				LCDNUM[0]=SMGL[*(time+ 0)-0x30];
    19c0:	ec 91       	ld	r30, X
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	ea 5a       	subi	r30, 0xAA	; 170
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	80 81       	ld	r24, Z
    19ca:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <LCDNUM>
    19ce:	08 95       	ret

000019d0 <flow_set>:
			default: break;
		}
}
void flow_set(unsigned char *flow)
{
    19d0:	fc 01       	movw	r30, r24
		unsigned char len = strlen(flow);
    19d2:	dc 01       	movw	r26, r24
    19d4:	0d 90       	ld	r0, X+
    19d6:	00 20       	and	r0, r0
    19d8:	e9 f7       	brne	.-6      	; 0x19d4 <flow_set+0x4>
    19da:	11 97       	sbiw	r26, 0x01	; 1
    19dc:	9a 2f       	mov	r25, r26
    19de:	9e 1b       	sub	r25, r30
    19e0:	96 30       	cpi	r25, 0x06	; 6
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <flow_set+0x16>
    19e4:	95 e0       	ldi	r25, 0x05	; 5
		if(len > 5)
			len = 5;
		switch(len)
    19e6:	92 30       	cpi	r25, 0x02	; 2
    19e8:	79 f0       	breq	.+30     	; 0x1a08 <flow_set+0x38>
    19ea:	28 f4       	brcc	.+10     	; 0x19f6 <flow_set+0x26>
    19ec:	99 23       	and	r25, r25
    19ee:	41 f0       	breq	.+16     	; 0x1a00 <flow_set+0x30>
    19f0:	91 30       	cpi	r25, 0x01	; 1
    19f2:	41 f0       	breq	.+16     	; 0x1a04 <flow_set+0x34>
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <flow_set+0x44>
    19f6:	93 30       	cpi	r25, 0x03	; 3
    19f8:	49 f0       	breq	.+18     	; 0x1a0c <flow_set+0x3c>
    19fa:	94 30       	cpi	r25, 0x04	; 4
    19fc:	49 f0       	breq	.+18     	; 0x1a10 <flow_set+0x40>
    19fe:	0a c0       	rjmp	.+20     	; 0x1a14 <flow_set+0x44>
		{
			case 0:
				LCDNUM[9]=0x00;
    1a00:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <LCDNUM+0x9>
			case 1:
				LCDNUM[8]=0x00;
    1a04:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <LCDNUM+0x8>
			case 2:
				LCDNUM[7]=0x00;
    1a08:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <LCDNUM+0x7>
			case 3:
				LCDNUM[6]=0x00;
    1a0c:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <LCDNUM+0x6>
			case 4:
				LCDNUM[5]=0x00;
    1a10:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <LCDNUM+0x5>
			default: break;
		}
		//len = 3;
		switch(len)
    1a14:	93 30       	cpi	r25, 0x03	; 3
    1a16:	e1 f0       	breq	.+56     	; 0x1a50 <flow_set+0x80>
    1a18:	28 f4       	brcc	.+10     	; 0x1a24 <flow_set+0x54>
    1a1a:	91 30       	cpi	r25, 0x01	; 1
    1a1c:	79 f1       	breq	.+94     	; 0x1a7c <flow_set+0xac>
    1a1e:	92 30       	cpi	r25, 0x02	; 2
    1a20:	11 f1       	breq	.+68     	; 0x1a66 <flow_set+0x96>
    1a22:	08 95       	ret
    1a24:	94 30       	cpi	r25, 0x04	; 4
    1a26:	49 f0       	breq	.+18     	; 0x1a3a <flow_set+0x6a>
    1a28:	95 30       	cpi	r25, 0x05	; 5
    1a2a:	91 f5       	brne	.+100    	; 0x1a90 <flow_set+0xc0>
		{
			case 5:
				LCDNUM[5]=SMGL[*(flow+ len - 5)-0x30];
    1a2c:	a0 81       	ld	r26, Z
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	aa 5a       	subi	r26, 0xAA	; 170
    1a32:	be 4f       	sbci	r27, 0xFE	; 254
    1a34:	8c 91       	ld	r24, X
    1a36:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <LCDNUM+0x5>
			case 4:
				LCDNUM[6]=SMGL[*(flow+ len - 4)-0x30];
    1a3a:	df 01       	movw	r26, r30
    1a3c:	a9 0f       	add	r26, r25
    1a3e:	b1 1d       	adc	r27, r1
    1a40:	14 97       	sbiw	r26, 0x04	; 4
    1a42:	ac 91       	ld	r26, X
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	aa 5a       	subi	r26, 0xAA	; 170
    1a48:	be 4f       	sbci	r27, 0xFE	; 254
    1a4a:	8c 91       	ld	r24, X
    1a4c:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <LCDNUM+0x6>
			case 3:
				LCDNUM[7]=SMGL[*(flow+ len - 3)-0x30];
    1a50:	df 01       	movw	r26, r30
    1a52:	a9 0f       	add	r26, r25
    1a54:	b1 1d       	adc	r27, r1
    1a56:	13 97       	sbiw	r26, 0x03	; 3
    1a58:	ac 91       	ld	r26, X
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	aa 5a       	subi	r26, 0xAA	; 170
    1a5e:	be 4f       	sbci	r27, 0xFE	; 254
    1a60:	8c 91       	ld	r24, X
    1a62:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <LCDNUM+0x7>
			case 2:
				LCDNUM[8]=SMGL[*(flow+ len - 2)-0x30];
    1a66:	df 01       	movw	r26, r30
    1a68:	a9 0f       	add	r26, r25
    1a6a:	b1 1d       	adc	r27, r1
    1a6c:	12 97       	sbiw	r26, 0x02	; 2
    1a6e:	ac 91       	ld	r26, X
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	aa 5a       	subi	r26, 0xAA	; 170
    1a74:	be 4f       	sbci	r27, 0xFE	; 254
    1a76:	8c 91       	ld	r24, X
    1a78:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <LCDNUM+0x8>
			case 1:
				LCDNUM[9]=SMGL[*(flow+ len - 1)-0x30];
    1a7c:	e9 0f       	add	r30, r25
    1a7e:	f1 1d       	adc	r31, r1
    1a80:	31 97       	sbiw	r30, 0x01	; 1
    1a82:	e0 81       	ld	r30, Z
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	ea 5a       	subi	r30, 0xAA	; 170
    1a88:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <LCDNUM+0x9>
    1a90:	08 95       	ret

00001a92 <LCD_Init>:

char SCQ = 0;
unsigned char LCD_Ico = 0;//0:Ê±¼ä,1:Á÷Á¿,2:Ô­Ë®,3:´¿Ë®,4:È±Ë®,5:Â©Ë®,6:ÐÅºÅ,7:¸½Íø
static void LCD_GPIO_Init(void)//PA0 
{
	DDRA |= (0x3<<0);
    1a92:	8a b3       	in	r24, 0x1a	; 26
    1a94:	83 60       	ori	r24, 0x03	; 3
    1a96:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (0x3<<0);
    1a98:	8b b3       	in	r24, 0x1b	; 27
    1a9a:	83 60       	ori	r24, 0x03	; 3
    1a9c:	8b bb       	out	0x1b, r24	; 27
	
	DDRC |= (0x7<<1);
    1a9e:	84 b3       	in	r24, 0x14	; 20
    1aa0:	8e 60       	ori	r24, 0x0E	; 14
    1aa2:	84 bb       	out	0x14, r24	; 20
	PORTA |= (0x7<<1);	
    1aa4:	8b b3       	in	r24, 0x1b	; 27
    1aa6:	8e 60       	ori	r24, 0x0E	; 14
    1aa8:	8b bb       	out	0x1b, r24	; 27
}
void LCD_Init(void)
{
	LCD_GPIO_Init();
	INIT_1726();
    1aaa:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <INIT_1726>
    1aae:	2f ef       	ldi	r18, 0xFF	; 255
    1ab0:	8f eb       	ldi	r24, 0xBF	; 191
    1ab2:	96 e0       	ldi	r25, 0x06	; 6
    1ab4:	21 50       	subi	r18, 0x01	; 1
    1ab6:	80 40       	sbci	r24, 0x00	; 0
    1ab8:	90 40       	sbci	r25, 0x00	; 0
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <LCD_Init+0x22>
    1abc:	00 c0       	rjmp	.+0      	; 0x1abe <LCD_Init+0x2c>
    1abe:	00 00       	nop
	_delay_ms(200);
	HT1721C_BL_1;	
    1ac0:	1a 9a       	sbi	0x03, 2	; 3
	WRITE_ALLRAM_1726(1);	
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	0e 94 a5 0a 	call	0x154a	; 0x154a <WRITE_ALLRAM_1726>
    1ac8:	2f ef       	ldi	r18, 0xFF	; 255
    1aca:	8f eb       	ldi	r24, 0xBF	; 191
    1acc:	91 e2       	ldi	r25, 0x21	; 33
    1ace:	21 50       	subi	r18, 0x01	; 1
    1ad0:	80 40       	sbci	r24, 0x00	; 0
    1ad2:	90 40       	sbci	r25, 0x00	; 0
    1ad4:	e1 f7       	brne	.-8      	; 0x1ace <LCD_Init+0x3c>
    1ad6:	00 c0       	rjmp	.+0      	; 0x1ad8 <LCD_Init+0x46>
    1ad8:	00 00       	nop
	_delay_ms(1000);
	//WRITE_ALLRAM_1726(0);
	
	flow_set(&Device[3]);//ÏÔÊ¾Éè±¸Âë
    1ada:	85 ee       	ldi	r24, 0xE5	; 229
    1adc:	93 e0       	ldi	r25, 0x03	; 3
    1ade:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <flow_set>
	REFRESH_ALLRAM_1726();
    1ae2:	0e 94 c5 0a 	call	0x158a	; 0x158a <REFRESH_ALLRAM_1726>
    1ae6:	08 95       	ret

00001ae8 <pure_water_set>:
// 			LCDNUM[6] |= (0x01);
// 		else
// 			LCDNUM[6] &= ~(0x01);
}
void pure_water_set(unsigned char *pure_water)
{
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
		//USART1_Transmit((strlen(pure_water)));
		unsigned char len = strlen(pure_water);
    1aec:	fc 01       	movw	r30, r24
    1aee:	01 90       	ld	r0, Z+
    1af0:	00 20       	and	r0, r0
    1af2:	e9 f7       	brne	.-6      	; 0x1aee <pure_water_set+0x6>
    1af4:	31 97       	sbiw	r30, 0x01	; 1
    1af6:	e8 1b       	sub	r30, r24
    1af8:	e5 30       	cpi	r30, 0x05	; 5
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <pure_water_set+0x16>
    1afc:	e4 e0       	ldi	r30, 0x04	; 4
		//len = 3;
		if(len > 4)
			len = 4;
		switch(len)
    1afe:	e1 30       	cpi	r30, 0x01	; 1
    1b00:	41 f0       	breq	.+16     	; 0x1b12 <pure_water_set+0x2a>
    1b02:	28 f0       	brcs	.+10     	; 0x1b0e <pure_water_set+0x26>
    1b04:	e2 30       	cpi	r30, 0x02	; 2
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <pure_water_set+0x2e>
    1b08:	e3 30       	cpi	r30, 0x03	; 3
    1b0a:	39 f0       	breq	.+14     	; 0x1b1a <pure_water_set+0x32>
    1b0c:	08 c0       	rjmp	.+16     	; 0x1b1e <pure_water_set+0x36>
		{
			case 0:
				LCDNUM[10]=0x00;
    1b0e:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <LCDNUM+0xa>
			case 1:
				LCDNUM[11]=0x00;
    1b12:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <LCDNUM+0xb>
			case 2:
				LCDNUM[12]=0x00;
    1b16:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <LCDNUM+0xc>
			case 3:
				LCDNUM[13]=0x00;
    1b1a:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <LCDNUM+0xd>
			default: break;
		}
		switch(len)
    1b1e:	e2 30       	cpi	r30, 0x02	; 2
    1b20:	d9 f0       	breq	.+54     	; 0x1b58 <pure_water_set+0x70>
    1b22:	18 f4       	brcc	.+6      	; 0x1b2a <pure_water_set+0x42>
    1b24:	e1 30       	cpi	r30, 0x01	; 1
    1b26:	19 f1       	breq	.+70     	; 0x1b6e <pure_water_set+0x86>
    1b28:	2d c0       	rjmp	.+90     	; 0x1b84 <pure_water_set+0x9c>
    1b2a:	e3 30       	cpi	r30, 0x03	; 3
    1b2c:	51 f0       	breq	.+20     	; 0x1b42 <pure_water_set+0x5a>
    1b2e:	e4 30       	cpi	r30, 0x04	; 4
    1b30:	49 f5       	brne	.+82     	; 0x1b84 <pure_water_set+0x9c>
		{
			case 4:
				LCDNUM[13]=SMG[*(pure_water+len-4)-0x30];
    1b32:	ec 01       	movw	r28, r24
    1b34:	a8 81       	ld	r26, Y
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	a0 5a       	subi	r26, 0xA0	; 160
    1b3a:	be 4f       	sbci	r27, 0xFE	; 254
    1b3c:	2c 91       	ld	r18, X
    1b3e:	20 93 f1 04 	sts	0x04F1, r18	; 0x8004f1 <LCDNUM+0xd>
			case 3:
				LCDNUM[12]=SMG[*(pure_water+len-3)-0x30];
    1b42:	dc 01       	movw	r26, r24
    1b44:	ae 0f       	add	r26, r30
    1b46:	b1 1d       	adc	r27, r1
    1b48:	13 97       	sbiw	r26, 0x03	; 3
    1b4a:	ac 91       	ld	r26, X
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	a0 5a       	subi	r26, 0xA0	; 160
    1b50:	be 4f       	sbci	r27, 0xFE	; 254
    1b52:	2c 91       	ld	r18, X
    1b54:	20 93 f0 04 	sts	0x04F0, r18	; 0x8004f0 <LCDNUM+0xc>
			case 2:
				LCDNUM[11]=SMG[*(pure_water+len-2)-0x30];
    1b58:	dc 01       	movw	r26, r24
    1b5a:	ae 0f       	add	r26, r30
    1b5c:	b1 1d       	adc	r27, r1
    1b5e:	12 97       	sbiw	r26, 0x02	; 2
    1b60:	ac 91       	ld	r26, X
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	a0 5a       	subi	r26, 0xA0	; 160
    1b66:	be 4f       	sbci	r27, 0xFE	; 254
    1b68:	2c 91       	ld	r18, X
    1b6a:	20 93 ef 04 	sts	0x04EF, r18	; 0x8004ef <LCDNUM+0xb>
			case 1:
				LCDNUM[10]=SMG[*(pure_water+len-1)-0x30];
    1b6e:	8e 0f       	add	r24, r30
    1b70:	91 1d       	adc	r25, r1
    1b72:	fc 01       	movw	r30, r24
    1b74:	31 97       	sbiw	r30, 0x01	; 1
    1b76:	e0 81       	ld	r30, Z
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	e0 5a       	subi	r30, 0xA0	; 160
    1b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <LCDNUM+0xa>
// 			LCDNUM[11] |= (0x10);
// 		if(drp_num == 1)
// 			LCDNUM[12] |= (0x10);
// 		if(error_ico & (0x1<<1))
// 			LCDNUM[13] |= (0x10);
}
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <raw_water_set>:
void raw_water_set(unsigned char *raw_water)
{
    1b8a:	dc 01       	movw	r26, r24
	
		unsigned char len = strlen(raw_water);
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	01 90       	ld	r0, Z+
    1b90:	00 20       	and	r0, r0
    1b92:	e9 f7       	brne	.-6      	; 0x1b8e <raw_water_set+0x4>
    1b94:	31 97       	sbiw	r30, 0x01	; 1
    1b96:	e8 1b       	sub	r30, r24
    1b98:	e5 30       	cpi	r30, 0x05	; 5
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <raw_water_set+0x14>
    1b9c:	e4 e0       	ldi	r30, 0x04	; 4
		//len = 3;
		if(len > 4)
			len = 4;
			switch(len)
    1b9e:	e1 30       	cpi	r30, 0x01	; 1
    1ba0:	41 f0       	breq	.+16     	; 0x1bb2 <raw_water_set+0x28>
    1ba2:	28 f0       	brcs	.+10     	; 0x1bae <raw_water_set+0x24>
    1ba4:	e2 30       	cpi	r30, 0x02	; 2
    1ba6:	39 f0       	breq	.+14     	; 0x1bb6 <raw_water_set+0x2c>
    1ba8:	e3 30       	cpi	r30, 0x03	; 3
    1baa:	39 f0       	breq	.+14     	; 0x1bba <raw_water_set+0x30>
    1bac:	08 c0       	rjmp	.+16     	; 0x1bbe <raw_water_set+0x34>
		{
			case 0:
				LCDNUM[17]=0x00;
    1bae:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <LCDNUM+0x11>
			case 1:
				LCDNUM[16]=0x00;
    1bb2:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <LCDNUM+0x10>
			case 2:
				LCDNUM[15]=0x00;
    1bb6:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <LCDNUM+0xf>
			case 3:
				LCDNUM[14]=0x00;
    1bba:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <LCDNUM+0xe>
			default: break;
		}
		switch(len)
    1bbe:	e2 30       	cpi	r30, 0x02	; 2
    1bc0:	d1 f0       	breq	.+52     	; 0x1bf6 <raw_water_set+0x6c>
    1bc2:	18 f4       	brcc	.+6      	; 0x1bca <raw_water_set+0x40>
    1bc4:	e1 30       	cpi	r30, 0x01	; 1
    1bc6:	01 f1       	breq	.+64     	; 0x1c08 <raw_water_set+0x7e>
    1bc8:	08 95       	ret
    1bca:	e3 30       	cpi	r30, 0x03	; 3
    1bcc:	59 f0       	breq	.+22     	; 0x1be4 <raw_water_set+0x5a>
    1bce:	e4 30       	cpi	r30, 0x04	; 4
    1bd0:	11 f5       	brne	.+68     	; 0x1c16 <raw_water_set+0x8c>
		{
			case 4:
				LCDNUM[14]=SMG[*(raw_water+3)-0x30];
    1bd2:	13 96       	adiw	r26, 0x03	; 3
    1bd4:	ec 91       	ld	r30, X
    1bd6:	13 97       	sbiw	r26, 0x03	; 3
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	e0 5a       	subi	r30, 0xA0	; 160
    1bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bde:	80 81       	ld	r24, Z
    1be0:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <LCDNUM+0xe>
			case 3:
				LCDNUM[15]=SMG[*(raw_water+2)-0x30];
    1be4:	12 96       	adiw	r26, 0x02	; 2
    1be6:	ec 91       	ld	r30, X
    1be8:	12 97       	sbiw	r26, 0x02	; 2
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	e0 5a       	subi	r30, 0xA0	; 160
    1bee:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf0:	80 81       	ld	r24, Z
    1bf2:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <LCDNUM+0xf>
			case 2:
				LCDNUM[16]=SMG[*(raw_water+1)-0x30];
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	ec 91       	ld	r30, X
    1bfa:	11 97       	sbiw	r26, 0x01	; 1
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	e0 5a       	subi	r30, 0xA0	; 160
    1c00:	fe 4f       	sbci	r31, 0xFE	; 254
    1c02:	80 81       	ld	r24, Z
    1c04:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <LCDNUM+0x10>
			case 1:
				LCDNUM[17]=SMG[*(raw_water+0)-0x30];
    1c08:	ec 91       	ld	r30, X
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	e0 5a       	subi	r30, 0xA0	; 160
    1c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c10:	80 81       	ld	r24, Z
    1c12:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <LCDNUM+0x11>
    1c16:	08 95       	ret

00001c18 <SET_TIME>:
// 			LCDNUM[16] |= (0x10);
}


inline void SET_TIME(unsigned int time)
{
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	28 97       	sbiw	r28, 0x08	; 8
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
	unsigned char time_str[8]={0};
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	31 96       	adiw	r30, 0x01	; 1
    1c30:	28 e0       	ldi	r18, 0x08	; 8
    1c32:	df 01       	movw	r26, r30
    1c34:	1d 92       	st	X+, r1
    1c36:	2a 95       	dec	r18
    1c38:	e9 f7       	brne	.-6      	; 0x1c34 <SET_TIME+0x1c>
	if(time != 0)
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	49 f0       	breq	.+18     	; 0x1c50 <SET_TIME+0x38>
	{
		itoa(time_str,time);
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cf 01       	movw	r24, r30
    1c42:	0e 94 b8 07 	call	0xf70	; 0xf70 <itoa>
		time_set(time_str);
    1c46:	ce 01       	movw	r24, r28
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	0e 94 8f 0c 	call	0x191e	; 0x191e <time_set>
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <SET_TIME+0x40>
	}
	else
		time_set("0");
    1c50:	82 ef       	ldi	r24, 0xF2	; 242
    1c52:	93 e0       	ldi	r25, 0x03	; 3
    1c54:	0e 94 8f 0c 	call	0x191e	; 0x191e <time_set>
}
    1c58:	28 96       	adiw	r28, 0x08	; 8
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <SET_FLOW_L>:

inline void SET_FLOW_L(unsigned int flow)
{
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	28 97       	sbiw	r28, 0x08	; 8
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
	unsigned char flow_str[8] = {0};
    1c7e:	fe 01       	movw	r30, r28
    1c80:	31 96       	adiw	r30, 0x01	; 1
    1c82:	28 e0       	ldi	r18, 0x08	; 8
    1c84:	df 01       	movw	r26, r30
    1c86:	1d 92       	st	X+, r1
    1c88:	2a 95       	dec	r18
    1c8a:	e9 f7       	brne	.-6      	; 0x1c86 <SET_FLOW_L+0x1c>
	if(flow != 0)
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	49 f0       	breq	.+18     	; 0x1ca2 <SET_FLOW_L+0x38>
	{
		itoa(flow_str,flow);
    1c90:	bc 01       	movw	r22, r24
    1c92:	cf 01       	movw	r24, r30
    1c94:	0e 94 b8 07 	call	0xf70	; 0xf70 <itoa>
		flow_set(flow_str);
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <flow_set>
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <SET_FLOW_L+0x40>
	}
	else
		flow_set("0");
    1ca2:	82 ef       	ldi	r24, 0xF2	; 242
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <flow_set>
}
    1caa:	28 96       	adiw	r28, 0x08	; 8
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	08 95       	ret

00001cbc <SET_FLOW>:
inline void SET_FLOW(unsigned char *flow)
{
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	ec 01       	movw	r28, r24
	itoa(flow,Time1_Get_TCNT());	
    1cc2:	0e 94 31 11 	call	0x2262	; 0x2262 <Time1_Get_TCNT>
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	ce 01       	movw	r24, r28
    1cca:	0e 94 b8 07 	call	0xf70	; 0xf70 <itoa>
	if(*flow == 0 ) 
    1cce:	88 81       	ld	r24, Y
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	05 c0       	rjmp	.+10     	; 0x1cde <SET_FLOW+0x22>
		flow_set("0");
    1cd4:	82 ef       	ldi	r24, 0xF2	; 242
    1cd6:	93 e0       	ldi	r25, 0x03	; 3
    1cd8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <flow_set>
    1cdc:	03 c0       	rjmp	.+6      	; 0x1ce4 <SET_FLOW+0x28>
//	EEPROM_Write_Buf(0x18,8,flaw);
	else
		flow_set(flow);
    1cde:	ce 01       	movw	r24, r28
    1ce0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <flow_set>

}
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <voltage_to_tds>:
#define  Q_cm 357



unsigned int voltage_to_tds(unsigned int adc)
{
    1cea:	9c 01       	movw	r18, r24
// 	unsigned int G_us = I_mA/U_mV ;
// 	unsigned int K = G * Q; //(Kµ¥Î»ÊÇuS/cm)
// 	unsigned int tds = K >> 2;
	unsigned int G_us = 0, K = 0;
	unsigned int a = 0,b = 0, n = 0, s = 0;
	a = 1024 - adc;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	94 e0       	ldi	r25, 0x04	; 4
    1cf0:	82 1b       	sub	r24, r18
    1cf2:	93 0b       	sbc	r25, r19
    1cf4:	43 e0       	ldi	r20, 0x03	; 3
// 	unsigned int I_mA = (E_mV - U_mV) / 2000;	//£¨R0 = 2000£©
// 	unsigned int G_us = I_mA/U_mV ;
// 	unsigned int K = G * Q; //(Kµ¥Î»ÊÇuS/cm)
// 	unsigned int tds = K >> 2;
	unsigned int G_us = 0, K = 0;
	unsigned int a = 0,b = 0, n = 0, s = 0;
    1cf6:	e0 e0       	ldi	r30, 0x00	; 0
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
	a = 1024 - adc;
	for(unsigned char i = 0; i < 3 ; i++)//È¡3¸öÓÐÐ§Î»
	{
		n =	a/ adc;
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
		b = a% adc;
		a = b*10;
    1d00:	dc 01       	movw	r26, r24
    1d02:	aa 0f       	add	r26, r26
    1d04:	bb 1f       	adc	r27, r27
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	8a 0f       	add	r24, r26
    1d14:	9b 1f       	adc	r25, r27
		s = s * 10 + n;
    1d16:	df 01       	movw	r26, r30
    1d18:	aa 0f       	add	r26, r26
    1d1a:	bb 1f       	adc	r27, r27
    1d1c:	ee 0f       	add	r30, r30
    1d1e:	ff 1f       	adc	r31, r31
    1d20:	ee 0f       	add	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	ee 0f       	add	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	ea 0f       	add	r30, r26
    1d2a:	fb 1f       	adc	r31, r27
    1d2c:	e6 0f       	add	r30, r22
    1d2e:	f7 1f       	adc	r31, r23
    1d30:	41 50       	subi	r20, 0x01	; 1
// 	unsigned int K = G * Q; //(Kµ¥Î»ÊÇuS/cm)
// 	unsigned int tds = K >> 2;
	unsigned int G_us = 0, K = 0;
	unsigned int a = 0,b = 0, n = 0, s = 0;
	a = 1024 - adc;
	for(unsigned char i = 0; i < 3 ; i++)//È¡3¸öÓÐÐ§Î»
    1d32:	19 f7       	brne	.-58     	; 0x1cfa <voltage_to_tds+0x10>
		s = s * 10 + n;
	}
	G_us = s * 5;
//	G_us = (1024 - adc) * 10e6  / (2000 * y);
	K	= G_us * Q_cm/100;
	return (K>>2);
    1d34:	89 ef       	ldi	r24, 0xF9	; 249
    1d36:	96 e0       	ldi	r25, 0x06	; 6
    1d38:	e8 9f       	mul	r30, r24
    1d3a:	90 01       	movw	r18, r0
    1d3c:	e9 9f       	mul	r30, r25
    1d3e:	30 0d       	add	r19, r0
    1d40:	f8 9f       	mul	r31, r24
    1d42:	30 0d       	add	r19, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	36 95       	lsr	r19
    1d48:	27 95       	ror	r18
    1d4a:	36 95       	lsr	r19
    1d4c:	27 95       	ror	r18
    1d4e:	ab e7       	ldi	r26, 0x7B	; 123
    1d50:	b4 e1       	ldi	r27, 0x14	; 20
    1d52:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__umulhisi3>
//	return ((1024-adc)*125/(adc));
}
    1d56:	96 95       	lsr	r25
    1d58:	87 95       	ror	r24
    1d5a:	96 95       	lsr	r25
    1d5c:	87 95       	ror	r24
    1d5e:	96 95       	lsr	r25
    1d60:	87 95       	ror	r24
    1d62:	08 95       	ret

00001d64 <SET_TDS1>:
inline void SET_TDS1(unsigned char *tds1)
{
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	ec 01       	movw	r28, r24
	itoa(tds1,voltage_to_tds(ADC_Get(6)));
    1d6a:	86 e0       	ldi	r24, 0x06	; 6
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 84 00 	call	0x108	; 0x108 <ADC_Get>
    1d72:	0e 94 75 0e 	call	0x1cea	; 0x1cea <voltage_to_tds>
    1d76:	bc 01       	movw	r22, r24
    1d78:	ce 01       	movw	r24, r28
    1d7a:	0e 94 b8 07 	call	0xf70	; 0xf70 <itoa>
	if(*tds1)
    1d7e:	88 81       	ld	r24, Y
    1d80:	88 23       	and	r24, r24
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <SET_TDS1+0x26>
	{
	//	EEPROM_Write_Buf(0x1C, 4 ,tds1);
		raw_water_set(tds1);
    1d84:	ce 01       	movw	r24, r28
    1d86:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <raw_water_set>
	
	}
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	08 95       	ret

00001d90 <SET_TDS2>:
inline void SET_TDS2(unsigned char *tds2)
{
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	ec 01       	movw	r28, r24
	itoa(tds2,voltage_to_tds(ADC_Get(7)));
    1d96:	87 e0       	ldi	r24, 0x07	; 7
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 84 00 	call	0x108	; 0x108 <ADC_Get>
    1d9e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <voltage_to_tds>
    1da2:	bc 01       	movw	r22, r24
    1da4:	ce 01       	movw	r24, r28
    1da6:	0e 94 b8 07 	call	0xf70	; 0xf70 <itoa>
	if(*tds2 )
    1daa:	88 81       	ld	r24, Y
    1dac:	88 23       	and	r24, r24
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <SET_TDS2+0x26>
	{
		//EEPROM_Write_Buf(0x20, 4 ,tds2);
		pure_water_set(tds2); 
    1db0:	ce 01       	movw	r24, r28
    1db2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <pure_water_set>
		
	}

}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <LED_Init>:
 */ 
#include "led.h"

void LED_Init(void)
{
	DDRC |= (1<<PC0);
    1dbc:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= (1<<PC0);
    1dbe:	a8 9a       	sbi	0x15, 0	; 21
    1dc0:	08 95       	ret

00001dc2 <Port_Init>:
//-------------------------------------------------------


void Port_Init(void)
{
		PORTB &= ~(0x01 << PB2);	
    1dc2:	c2 98       	cbi	0x18, 2	; 24
		PORTE &= ~((0x01 << PE7)|(0x01<<PE6));
    1dc4:	83 b1       	in	r24, 0x03	; 3
    1dc6:	8f 73       	andi	r24, 0x3F	; 63
    1dc8:	83 b9       	out	0x03, r24	; 3
	
		PORTB &= ~((0x01 << PB7)|(0x01 << PB6));//¸ßÑ¹£¬µÍÑ¹
    1dca:	88 b3       	in	r24, 0x18	; 24
    1dcc:	8f 73       	andi	r24, 0x3F	; 63
    1dce:	88 bb       	out	0x18, r24	; 24
		DDRB  &= ~((0x01 << PB7)|(0x01 << PB6));
    1dd0:	87 b3       	in	r24, 0x17	; 23
    1dd2:	8f 73       	andi	r24, 0x3F	; 63
    1dd4:	87 bb       	out	0x17, r24	; 23
		
		
		DDRB |= (0x01 << PB2) ;
    1dd6:	ba 9a       	sbi	0x17, 2	; 23
		PORTB &= ~(0x01 << PB2);
    1dd8:	c2 98       	cbi	0x18, 2	; 24
		
		
		DDRE |= (0x01 << PE7)|(0x01<<PE6);
    1dda:	82 b1       	in	r24, 0x02	; 2
    1ddc:	80 6c       	ori	r24, 0xC0	; 192
    1dde:	82 b9       	out	0x02, r24	; 2
		PORTE &= ~((0x01 << PE7)|(0x01<<PE6));
    1de0:	83 b1       	in	r24, 0x03	; 3
    1de2:	8f 73       	andi	r24, 0x3F	; 63
    1de4:	83 b9       	out	0x03, r24	; 3
    1de6:	08 95       	ret

00001de8 <zhishui>:
}

void zhishui(void)
{
	PORTE |= (0x01 << PE7);
    1de8:	1f 9a       	sbi	0x03, 7	; 3
	PORTB |= (0x01 << PB2);
    1dea:	c2 9a       	sbi	0x18, 2	; 24
    1dec:	08 95       	ret

00001dee <close_zhishui>:
		
}
void close_zhishui(void)
{
	PORTB &= ~(0x01 << PB2);
    1dee:	c2 98       	cbi	0x18, 2	; 24
	PORTE &= ~(0x01 << PE7);
    1df0:	1f 98       	cbi	0x03, 7	; 3
    1df2:	08 95       	ret

00001df4 <chongxi>:
}

void chongxi(void)
{
		PORTE |=(0x01<<PE6);
    1df4:	1e 9a       	sbi	0x03, 6	; 3
		zhishui();
    1df6:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <zhishui>
    1dfa:	08 95       	ret

00001dfc <close_chongxi>:
}

void close_chongxi(void)
{
		close_zhishui();
    1dfc:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <close_zhishui>
		PORTE &= ~((0x01<<PE6));
    1e00:	1e 98       	cbi	0x03, 6	; 3
    1e02:	08 95       	ret

00001e04 <CRC16>:
{
		uchar chCRCHi = 0; // ¸ßCRC×Ö½Ú³õÊ¼»¯
		uint chCRC=0;
		uchar wIndex;            // CRCÑ­»·ÖÐµÄË÷Òý
		uchar n;
		for(n=0;n<wDataLen;n++)//while (wDataLen--)
    1e04:	44 23       	and	r20, r20
    1e06:	b9 f0       	breq	.+46     	; 0x1e36 <CRC16+0x32>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	a6 0f       	add	r26, r22
    1e0c:	b1 1d       	adc	r27, r1
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
		{ // putchar0(rx1buffer[n+addr1]);
			chCRCHi=chCRC/256;
			wIndex = chCRCHi ^ data[n+addr];
    1e14:	ed 91       	ld	r30, X+
			chCRC<<=8;
    1e16:	78 2f       	mov	r23, r24
    1e18:	66 27       	eor	r22, r22
			chCRC^=TABLE1021[wIndex];
    1e1a:	e9 27       	eor	r30, r25
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	ee 0f       	add	r30, r30
    1e20:	ff 1f       	adc	r31, r31
    1e22:	ee 51       	subi	r30, 0x1E	; 30
    1e24:	fe 4f       	sbci	r31, 0xFE	; 254
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	86 27       	eor	r24, r22
    1e2c:	97 27       	eor	r25, r23
{
		uchar chCRCHi = 0; // ¸ßCRC×Ö½Ú³õÊ¼»¯
		uint chCRC=0;
		uchar wIndex;            // CRCÑ­»·ÖÐµÄË÷Òý
		uchar n;
		for(n=0;n<wDataLen;n++)//while (wDataLen--)
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	42 13       	cpse	r20, r18
    1e32:	f0 cf       	rjmp	.-32     	; 0x1e14 <CRC16+0x10>
    1e34:	08 95       	ret
}
//·µ»ØRCRÑéÖ¤Âë
unsigned int  CRC16(unsigned char *data,uchar addr, uchar wDataLen)
{
		uchar chCRCHi = 0; // ¸ßCRC×Ö½Ú³õÊ¼»¯
		uint chCRC=0;
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
		//return ((chCRCHi << 8) | chCRCLo);// chCRCLo;//chCRCHi;//
		//DATAlist[0x7b]=chCRC/256;
		//DATAlist[0x7a]=chCRC-(DATAlist[0x7b]*256);
		
		return chCRC;
}
    1e3a:	08 95       	ret

00001e3c <Check_CRC16>:
//·µ»Ø0£¬ÑéÖ¤³É¹¦
unsigned int  Check_CRC16(unsigned char *data,unsigned char addr,unsigned char wDataLen)
{
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
	
	if(*data )
    1e44:	fc 01       	movw	r30, r24
    1e46:	20 81       	ld	r18, Z
    1e48:	22 23       	and	r18, r18
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <Check_CRC16+0x30>
    1e4c:	ec 01       	movw	r28, r24
	{
			unsigned char crc_tmp[10] = {0};
 			unsigned int Rec_Crc = (data[wDataLen ] ) | data[wDataLen + 1 ] << 8;
    1e4e:	04 2f       	mov	r16, r20
    1e50:	10 e0       	ldi	r17, 0x00	; 0
 			unsigned int Crc_val = CRC16(data,addr,wDataLen);
    1e52:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <CRC16>
{
	
	if(*data )
	{
			unsigned char crc_tmp[10] = {0};
 			unsigned int Rec_Crc = (data[wDataLen ] ) | data[wDataLen + 1 ] << 8;
    1e56:	c0 0f       	add	r28, r16
    1e58:	d1 1f       	adc	r29, r17
 			unsigned int Crc_val = CRC16(data,addr,wDataLen);
			return (Crc_val^Rec_Crc);
    1e5a:	29 81       	ldd	r18, Y+1	; 0x01
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	32 2f       	mov	r19, r18
    1e60:	22 27       	eor	r18, r18
    1e62:	48 81       	ld	r20, Y
    1e64:	24 2b       	or	r18, r20
    1e66:	82 27       	eor	r24, r18
    1e68:	93 27       	eor	r25, r19
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <Check_CRC16+0x34>
	}
	//LEDOFF;	
	return 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret

00001e7a <Str_Add_Str>:
	unsigned char Cmd[] = {0x00,0x04};
	//unsigned char Parameter[]={0x00,0x00,0x00};
	unsigned char error = 0xFF;				
	GET_Parameter(Cmd,Parameter,sizeof(Parameter),&error);
	return error;
}
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	ec 01       	movw	r28, r24
    1e80:	22 23       	and	r18, r18
    1e82:	79 f0       	breq	.+30     	; 0x1ea2 <Str_Add_Str+0x28>
    1e84:	fa 01       	movw	r30, r20
    1e86:	dc 01       	movw	r26, r24
    1e88:	a6 0f       	add	r26, r22
    1e8a:	b1 1d       	adc	r27, r1
    1e8c:	21 50       	subi	r18, 0x01	; 1
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	2f 5f       	subi	r18, 0xFF	; 255
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	42 0f       	add	r20, r18
    1e96:	53 1f       	adc	r21, r19
    1e98:	91 91       	ld	r25, Z+
    1e9a:	9d 93       	st	X+, r25
    1e9c:	e4 17       	cp	r30, r20
    1e9e:	f5 07       	cpc	r31, r21
    1ea0:	d9 f7       	brne	.-10     	; 0x1e98 <Str_Add_Str+0x1e>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <send_data>:
    1eaa:	8f 92       	push	r8
    1eac:	9f 92       	push	r9
    1eae:	af 92       	push	r10
    1eb0:	bf 92       	push	r11
    1eb2:	cf 92       	push	r12
    1eb4:	df 92       	push	r13
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <send_data+0x1a>
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <send_data+0x1c>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	8c 01       	movw	r16, r24
    1ecc:	4b 01       	movw	r8, r22
    1ece:	5a 01       	movw	r10, r20
    1ed0:	f2 2e       	mov	r15, r18
    1ed2:	68 94       	set
    1ed4:	ee 24       	eor	r14, r14
    1ed6:	e4 f8       	bld	r14, 4
    1ed8:	e2 0e       	add	r14, r18
    1eda:	ea 82       	std	Y+2, r14	; 0x02
    1edc:	c2 2e       	mov	r12, r18
    1ede:	d1 2c       	mov	r13, r1
    1ee0:	80 e1       	ldi	r24, 0x10	; 16
    1ee2:	c8 0e       	add	r12, r24
    1ee4:	d1 1c       	adc	r13, r1
    1ee6:	d9 82       	std	Y+1, r13	; 0x01
    1ee8:	24 e0       	ldi	r18, 0x04	; 4
    1eea:	4d ee       	ldi	r20, 0xED	; 237
    1eec:	53 e0       	ldi	r21, 0x03	; 3
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1ef6:	22 e0       	ldi	r18, 0x02	; 2
    1ef8:	ae 01       	movw	r20, r28
    1efa:	4f 5f       	subi	r20, 0xFF	; 255
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	64 e0       	ldi	r22, 0x04	; 4
    1f00:	c8 01       	movw	r24, r16
    1f02:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1f06:	28 e0       	ldi	r18, 0x08	; 8
    1f08:	42 ee       	ldi	r20, 0xE2	; 226
    1f0a:	53 e0       	ldi	r21, 0x03	; 3
    1f0c:	66 e0       	ldi	r22, 0x06	; 6
    1f0e:	c8 01       	movw	r24, r16
    1f10:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1f14:	22 e0       	ldi	r18, 0x02	; 2
    1f16:	a4 01       	movw	r20, r8
    1f18:	6e e0       	ldi	r22, 0x0E	; 14
    1f1a:	c8 01       	movw	r24, r16
    1f1c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1f20:	2f 2d       	mov	r18, r15
    1f22:	a5 01       	movw	r20, r10
    1f24:	60 e1       	ldi	r22, 0x10	; 16
    1f26:	c8 01       	movw	r24, r16
    1f28:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1f2c:	a6 01       	movw	r20, r12
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	c8 01       	movw	r24, r16
    1f34:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <CRC16>
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	22 e0       	ldi	r18, 0x02	; 2
    1f3e:	ae 01       	movw	r20, r28
    1f40:	4d 5f       	subi	r20, 0xFD	; 253
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255
    1f44:	6e 2d       	mov	r22, r14
    1f46:	c8 01       	movw	r24, r16
    1f48:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1f4c:	62 e1       	ldi	r22, 0x12	; 18
    1f4e:	6f 0d       	add	r22, r15
    1f50:	22 e0       	ldi	r18, 0x02	; 2
    1f52:	4b ee       	ldi	r20, 0xEB	; 235
    1f54:	53 e0       	ldi	r21, 0x03	; 3
    1f56:	c8 01       	movw	r24, r16
    1f58:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	bf 90       	pop	r11
    1f78:	af 90       	pop	r10
    1f7a:	9f 90       	pop	r9
    1f7c:	8f 90       	pop	r8
    1f7e:	08 95       	ret

00001f80 <make_parameter>:
    1f80:	8f 92       	push	r8
    1f82:	9f 92       	push	r9
    1f84:	af 92       	push	r10
    1f86:	bf 92       	push	r11
    1f88:	cf 92       	push	r12
    1f8a:	df 92       	push	r13
    1f8c:	ef 92       	push	r14
    1f8e:	ff 92       	push	r15
    1f90:	0f 93       	push	r16
    1f92:	1f 93       	push	r17
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <make_parameter+0x1a>
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	6c 01       	movw	r12, r24
    1fa0:	4a 01       	movw	r8, r20
    1fa2:	59 01       	movw	r10, r18
    1fa4:	1a 82       	std	Y+2, r1	; 0x02
    1fa6:	19 82       	std	Y+1, r1	; 0x01
    1fa8:	22 e0       	ldi	r18, 0x02	; 2
    1faa:	ab 01       	movw	r20, r22
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1fb2:	c4 01       	movw	r24, r8
    1fb4:	0e 94 0c 18 	call	0x3018	; 0x3018 <atoi>
    1fb8:	99 83       	std	Y+1, r25	; 0x01
    1fba:	c4 01       	movw	r24, r8
    1fbc:	0e 94 0c 18 	call	0x3018	; 0x3018 <atoi>
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
    1fc2:	22 e0       	ldi	r18, 0x02	; 2
    1fc4:	ae 01       	movw	r20, r28
    1fc6:	4f 5f       	subi	r20, 0xFF	; 255
    1fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fca:	62 e0       	ldi	r22, 0x02	; 2
    1fcc:	c6 01       	movw	r24, r12
    1fce:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1fd2:	c5 01       	movw	r24, r10
    1fd4:	0e 94 0c 18 	call	0x3018	; 0x3018 <atoi>
    1fd8:	99 83       	std	Y+1, r25	; 0x01
    1fda:	c5 01       	movw	r24, r10
    1fdc:	0e 94 0c 18 	call	0x3018	; 0x3018 <atoi>
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
    1fe2:	22 e0       	ldi	r18, 0x02	; 2
    1fe4:	ae 01       	movw	r20, r28
    1fe6:	4f 5f       	subi	r20, 0xFF	; 255
    1fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	c6 01       	movw	r24, r12
    1fee:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    1ff2:	19 83       	std	Y+1, r17	; 0x01
    1ff4:	0a 83       	std	Y+2, r16	; 0x02
    1ff6:	22 e0       	ldi	r18, 0x02	; 2
    1ff8:	ae 01       	movw	r20, r28
    1ffa:	4f 5f       	subi	r20, 0xFF	; 255
    1ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffe:	66 e0       	ldi	r22, 0x06	; 6
    2000:	c6 01       	movw	r24, r12
    2002:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    2006:	83 e0       	ldi	r24, 0x03	; 3
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	21 e0       	ldi	r18, 0x01	; 1
    200c:	ae 01       	movw	r20, r28
    200e:	4f 5f       	subi	r20, 0xFF	; 255
    2010:	5f 4f       	sbci	r21, 0xFF	; 255
    2012:	68 e0       	ldi	r22, 0x08	; 8
    2014:	c6 01       	movw	r24, r12
    2016:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    201a:	26 e0       	ldi	r18, 0x06	; 6
    201c:	a7 01       	movw	r20, r14
    201e:	69 e0       	ldi	r22, 0x09	; 9
    2020:	c6 01       	movw	r24, r12
    2022:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    2026:	8f e0       	ldi	r24, 0x0F	; 15
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	af 90       	pop	r10
    2040:	9f 90       	pop	r9
    2042:	8f 90       	pop	r8
    2044:	08 95       	ret

00002046 <Send_Cmd_Parameter>:
    2046:	cf 92       	push	r12
    2048:	df 92       	push	r13
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	c4 56       	subi	r28, 0x64	; 100
    205a:	d1 09       	sbc	r29, r1
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	14 2f       	mov	r17, r20
    2068:	69 01       	movw	r12, r18
    206a:	9e 01       	movw	r18, r28
    206c:	2f 5f       	subi	r18, 0xFF	; 255
    206e:	3f 4f       	sbci	r19, 0xFF	; 255
    2070:	79 01       	movw	r14, r18
    2072:	24 e6       	ldi	r18, 0x64	; 100
    2074:	f7 01       	movw	r30, r14
    2076:	11 92       	st	Z+, r1
    2078:	2a 95       	dec	r18
    207a:	e9 f7       	brne	.-6      	; 0x2076 <Send_Cmd_Parameter+0x30>
    207c:	24 2f       	mov	r18, r20
    207e:	ab 01       	movw	r20, r22
    2080:	bc 01       	movw	r22, r24
    2082:	c7 01       	movw	r24, r14
    2084:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <send_data>
    2088:	61 2f       	mov	r22, r17
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	6c 5e       	subi	r22, 0xEC	; 236
    208e:	7f 4f       	sbci	r23, 0xFF	; 255
    2090:	a6 01       	movw	r20, r12
    2092:	c7 01       	movw	r24, r14
    2094:	0e 94 cc 07 	call	0xf98	; 0xf98 <ShortTurl>
    2098:	cc 59       	subi	r28, 0x9C	; 156
    209a:	df 4f       	sbci	r29, 0xFF	; 255
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	df 90       	pop	r13
    20b2:	cf 90       	pop	r12
    20b4:	08 95       	ret

000020b6 <GET_Parameter>:
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	c4 56       	subi	r28, 0x64	; 100
    20c6:	d1 09       	sbc	r29, r1
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	79 01       	movw	r14, r18
    20d4:	9e 01       	movw	r18, r28
    20d6:	2f 5f       	subi	r18, 0xFF	; 255
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	0e 94 23 10 	call	0x2046	; 0x2046 <Send_Cmd_Parameter>
    20de:	85 31       	cpi	r24, 0x15	; 21
    20e0:	58 f0       	brcs	.+22     	; 0x20f8 <GET_Parameter+0x42>
    20e2:	1c ee       	ldi	r17, 0xEC	; 236
    20e4:	18 0f       	add	r17, r24
    20e6:	21 2f       	mov	r18, r17
    20e8:	ae 01       	movw	r20, r28
    20ea:	4f 5e       	subi	r20, 0xEF	; 239
    20ec:	5f 4f       	sbci	r21, 0xFF	; 255
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	c7 01       	movw	r24, r14
    20f2:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <GET_Parameter+0x44>
    20f8:	10 e0       	ldi	r17, 0x00	; 0
    20fa:	81 2f       	mov	r24, r17
    20fc:	cc 59       	subi	r28, 0x9C	; 156
    20fe:	df 4f       	sbci	r29, 0xFF	; 255
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	ff 90       	pop	r15
    2112:	ef 90       	pop	r14
    2114:	08 95       	ret

00002116 <GET_CMD>:
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	00 d0       	rcall	.+0      	; 0x211c <GET_CMD+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <GET_CMD+0x8>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <GET_CMD+0xa>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	46 2f       	mov	r20, r22
    2126:	19 82       	std	Y+1, r1	; 0x01
    2128:	29 e0       	ldi	r18, 0x09	; 9
    212a:	2a 83       	std	Y+2, r18	; 0x02
    212c:	1b 82       	std	Y+3, r1	; 0x03
    212e:	1c 82       	std	Y+4, r1	; 0x04
    2130:	1d 82       	std	Y+5, r1	; 0x05
    2132:	1e 82       	std	Y+6, r1	; 0x06
    2134:	9e 01       	movw	r18, r28
    2136:	2d 5f       	subi	r18, 0xFD	; 253
    2138:	3f 4f       	sbci	r19, 0xFF	; 255
    213a:	bc 01       	movw	r22, r24
    213c:	ce 01       	movw	r24, r28
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <GET_Parameter>
    2144:	88 23       	and	r24, r24
    2146:	39 f0       	breq	.+14     	; 0x2156 <GET_CMD+0x40>
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	98 2f       	mov	r25, r24
    214e:	88 27       	eor	r24, r24
    2150:	2c 81       	ldd	r18, Y+4	; 0x04
    2152:	82 2b       	or	r24, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <GET_CMD+0x44>
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	9f ef       	ldi	r25, 0xFF	; 255
    215a:	26 96       	adiw	r28, 0x06	; 6
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <ERROR_HYDROPENIA>:
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	00 d0       	rcall	.+0      	; 0x2172 <ERROR_HYDROPENIA+0x6>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <ERROR_HYDROPENIA+0x8>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <ERROR_HYDROPENIA+0xa>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	19 82       	std	Y+1, r1	; 0x01
    217c:	84 e0       	ldi	r24, 0x04	; 4
    217e:	8a 83       	std	Y+2, r24	; 0x02
    2180:	1b 82       	std	Y+3, r1	; 0x03
    2182:	1c 82       	std	Y+4, r1	; 0x04
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	8f ef       	ldi	r24, 0xFF	; 255
    218a:	8e 83       	std	Y+6, r24	; 0x06
    218c:	9e 01       	movw	r18, r28
    218e:	2a 5f       	subi	r18, 0xFA	; 250
    2190:	3f 4f       	sbci	r19, 0xFF	; 255
    2192:	43 e0       	ldi	r20, 0x03	; 3
    2194:	be 01       	movw	r22, r28
    2196:	6d 5f       	subi	r22, 0xFD	; 253
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	ce 01       	movw	r24, r28
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <GET_Parameter>
    21a2:	8e 81       	ldd	r24, Y+6	; 0x06
    21a4:	26 96       	adiw	r28, 0x06	; 6
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <ERROR_LEAKAGE>:

unsigned char ERROR_LEAKAGE(void)//Â©Ë®´íÎó
{
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <ERROR_LEAKAGE+0x6>
    21bc:	00 d0       	rcall	.+0      	; 0x21be <ERROR_LEAKAGE+0x8>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <ERROR_LEAKAGE+0xa>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char Parameter[]={0x10,0x00,0x00};
    21c4:	80 e1       	ldi	r24, 0x10	; 16
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	1a 82       	std	Y+2, r1	; 0x02
    21ca:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char Cmd[] = {0x00,0x04};	
    21cc:	1c 82       	std	Y+4, r1	; 0x04
    21ce:	84 e0       	ldi	r24, 0x04	; 4
    21d0:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char error = 0xFF;				
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	8e 83       	std	Y+6, r24	; 0x06
	(GET_Parameter(Cmd,Parameter,sizeof(Parameter),&error));
    21d6:	9e 01       	movw	r18, r28
    21d8:	2a 5f       	subi	r18, 0xFA	; 250
    21da:	3f 4f       	sbci	r19, 0xFF	; 255
    21dc:	43 e0       	ldi	r20, 0x03	; 3
    21de:	be 01       	movw	r22, r28
    21e0:	6f 5f       	subi	r22, 0xFF	; 255
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	ce 01       	movw	r24, r28
    21e6:	04 96       	adiw	r24, 0x04	; 4
    21e8:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <GET_Parameter>
	return error;

	//return ERROR_SEND();
}
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	26 96       	adiw	r28, 0x06	; 6
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <Time0_Init>:
		
	while(1)
	{
		if(!count)
		{
			count = 100;
    2200:	13 be       	out	0x33, r1	; 51
    2202:	84 e9       	ldi	r24, 0x94	; 148
    2204:	82 bf       	out	0x32, r24	; 50
    2206:	85 e9       	ldi	r24, 0x95	; 149
    2208:	81 bf       	out	0x31, r24	; 49
    220a:	83 b7       	in	r24, 0x33	; 51
    220c:	87 60       	ori	r24, 0x07	; 7
    220e:	83 bf       	out	0x33, r24	; 51
    2210:	87 b7       	in	r24, 0x37	; 55
    2212:	83 60       	ori	r24, 0x03	; 3
    2214:	87 bf       	out	0x37, r24	; 55
    2216:	08 95       	ret

00002218 <Time1_Port>:
    2218:	96 9a       	sbi	0x12, 6	; 18
    221a:	8e 98       	cbi	0x11, 6	; 17
    221c:	08 95       	ret

0000221e <Time1_Config>:
    221e:	1f bc       	out	0x2f, r1	; 47
    2220:	1b bc       	out	0x2b, r1	; 43
    2222:	1a bc       	out	0x2a, r1	; 42
    2224:	19 bc       	out	0x29, r1	; 41
    2226:	18 bc       	out	0x28, r1	; 40
    2228:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    222c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2230:	1d bc       	out	0x2d, r1	; 45
    2232:	1c bc       	out	0x2c, r1	; 44
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	87 bd       	out	0x27, r24	; 39
    2238:	86 bd       	out	0x26, r24	; 38
    223a:	87 b7       	in	r24, 0x37	; 55
    223c:	84 60       	ori	r24, 0x04	; 4
    223e:	87 bf       	out	0x37, r24	; 55
    2240:	08 95       	ret

00002242 <Time1_Init>:
    2242:	0e 94 0c 11 	call	0x2218	; 0x2218 <Time1_Port>
    2246:	0e 94 0f 11 	call	0x221e	; 0x221e <Time1_Config>
    224a:	08 95       	ret

0000224c <Time1_Start>:
    224c:	1f bc       	out	0x2f, r1	; 47
    224e:	8e b5       	in	r24, 0x2e	; 46
    2250:	87 60       	ori	r24, 0x07	; 7
    2252:	8e bd       	out	0x2e, r24	; 46
    2254:	08 95       	ret

00002256 <Time1_Stop>:
    2256:	8e b5       	in	r24, 0x2e	; 46
    2258:	88 7f       	andi	r24, 0xF8	; 248
    225a:	8e bd       	out	0x2e, r24	; 46
    225c:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <flow_ovf_flag>
    2260:	08 95       	ret

00002262 <Time1_Get_TCNT>:
    2262:	8d b5       	in	r24, 0x2d	; 45
    2264:	8c b5       	in	r24, 0x2c	; 44
    2266:	8c b5       	in	r24, 0x2c	; 44
    2268:	9d b5       	in	r25, 0x2d	; 45
    226a:	08 95       	ret

0000226c <Time2_Init>:
    226c:	15 bc       	out	0x25, r1	; 37
    226e:	88 e2       	ldi	r24, 0x28	; 40
    2270:	84 bd       	out	0x24, r24	; 36
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	83 bd       	out	0x23, r24	; 35
    2276:	08 95       	ret

00002278 <Time2_Start>:
    2278:	85 b5       	in	r24, 0x25	; 37
    227a:	85 60       	ori	r24, 0x05	; 5
    227c:	85 bd       	out	0x25, r24	; 37
    227e:	87 b7       	in	r24, 0x37	; 55
    2280:	80 6c       	ori	r24, 0xC0	; 192
    2282:	87 bf       	out	0x37, r24	; 55
    2284:	08 95       	ret

00002286 <Time2_Stop>:
    2286:	85 b5       	in	r24, 0x25	; 37
    2288:	8a 7f       	andi	r24, 0xFA	; 250
    228a:	85 bd       	out	0x25, r24	; 37
    228c:	87 b7       	in	r24, 0x37	; 55
    228e:	8f 73       	andi	r24, 0x3F	; 63
    2290:	87 bf       	out	0x37, r24	; 55
    2292:	08 95       	ret

00002294 <Time3_Init>:
    2294:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2298:	8b ef       	ldi	r24, 0xFB	; 251
    229a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    229e:	88 ec       	ldi	r24, 0xC8	; 200
    22a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    22a4:	8f ef       	ldi	r24, 0xFF	; 255
    22a6:	87 bd       	out	0x27, r24	; 39
    22a8:	86 bd       	out	0x26, r24	; 38
    22aa:	08 95       	ret

000022ac <Time3_Start>:
    22ac:	ea e8       	ldi	r30, 0x8A	; 138
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	85 60       	ori	r24, 0x05	; 5
    22b4:	80 83       	st	Z, r24
    22b6:	ed e7       	ldi	r30, 0x7D	; 125
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	84 60       	ori	r24, 0x04	; 4
    22be:	80 83       	st	Z, r24
    22c0:	08 95       	ret

000022c2 <Time3_Stop>:
    22c2:	ea e8       	ldi	r30, 0x8A	; 138
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8a 7f       	andi	r24, 0xFA	; 250
    22ca:	80 83       	st	Z, r24
    22cc:	ed e7       	ldi	r30, 0x7D	; 125
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	8b 7f       	andi	r24, 0xFB	; 251
    22d4:	80 83       	st	Z, r24
    22d6:	1d bc       	out	0x2d, r1	; 45
    22d8:	1c bc       	out	0x2c, r1	; 44
    22da:	08 95       	ret

000022dc <Get_time3_Status>:
    22dc:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    22e0:	87 70       	andi	r24, 0x07	; 7
    22e2:	08 95       	ret

000022e4 <__vector_16>:

//02085238246


SIGNAL(TIMER0_OVF_vect)//¶¨Ê±Æ÷T0Òç³öÖÐ¶Ï
{
    22e4:	1f 92       	push	r1
    22e6:	0f 92       	push	r0
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	0f 92       	push	r0
    22ec:	11 24       	eor	r1, r1
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	6f 93       	push	r22
    22f8:	7f 93       	push	r23
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	af 93       	push	r26
    2300:	bf 93       	push	r27
    2302:	ef 93       	push	r30
    2304:	ff 93       	push	r31
	//BEEP(1);
	TCNT0 = 0x94;
    2306:	84 e9       	ldi	r24, 0x94	; 148
    2308:	82 bf       	out	0x32, r24	; 50
	//TCNT0 = 0x28;	
	time_10ms ++;
    230a:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <time_10ms>
    230e:	8f 5f       	subi	r24, 0xFF	; 255
	static unsigned char refresh_time = 0;
	
	//if(!(time_10ms%50))
			
	if(time_10ms>25)//500ms¸üÐÂË®µÎ
    2310:	8a 31       	cpi	r24, 0x1A	; 26
    2312:	18 f4       	brcc	.+6      	; 0x231a <__vector_16+0x36>
SIGNAL(TIMER0_OVF_vect)//¶¨Ê±Æ÷T0Òç³öÖÐ¶Ï
{
	//BEEP(1);
	TCNT0 = 0x94;
	//TCNT0 = 0x28;	
	time_10ms ++;
    2314:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <time_10ms>
    2318:	4e c0       	rjmp	.+156    	; 0x23b6 <__vector_16+0xd2>
	
	//if(!(time_10ms%50))
			
	if(time_10ms>25)//500ms¸üÐÂË®µÎ
	{
		time_10ms = 0;
    231a:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <time_10ms>
		TC1RUN;		
    231e:	95 b3       	in	r25, 0x15	; 21
    2320:	80 e4       	ldi	r24, 0x40	; 64
    2322:	89 27       	eor	r24, r25
    2324:	85 bb       	out	0x15, r24	; 21
		if(refresh_time)
    2326:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <refresh_time.2460>
    232a:	88 23       	and	r24, r24
    232c:	49 f0       	breq	.+18     	; 0x2340 <__vector_16+0x5c>
		{
			if(!(deal_cmd & 0x01 << 12))			
    232e:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2332:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2336:	94 fd       	sbrc	r25, 4
    2338:	19 c0       	rjmp	.+50     	; 0x236c <__vector_16+0x88>
				drip();		
    233a:	0e 94 15 0c 	call	0x182a	; 0x182a <drip>
    233e:	16 c0       	rjmp	.+44     	; 0x236c <__vector_16+0x88>
		}
		else
		{
			if(!(PIND & (0x01<<PD3)))
    2340:	83 99       	sbic	0x10, 3	; 16
    2342:	05 c0       	rjmp	.+10     	; 0x234e <__vector_16+0x6a>
				LCD_Ico &= ~(0x01<<7);
    2344:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2348:	8f 77       	andi	r24, 0x7F	; 127
    234a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
			refresh_time = 6;
    234e:	86 e0       	ldi	r24, 0x06	; 6
    2350:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <refresh_time.2460>
			if(!(deal_cmd & 0x01 << 12))
    2354:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2358:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    235c:	94 fd       	sbrc	r25, 4
    235e:	28 c0       	rjmp	.+80     	; 0x23b0 <__vector_16+0xcc>
			{
					ico();
    2360:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ico>
					signal();	
    2364:	0e 94 95 0b 	call	0x172a	; 0x172a <signal>
					REFRESH_ALLRAM_1726();
    2368:	0e 94 c5 0a 	call	0x158a	; 0x158a <REFRESH_ALLRAM_1726>
			}
			

		}
		refresh_time --;
    236c:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <refresh_time.2460>
    2370:	81 50       	subi	r24, 0x01	; 1
    2372:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <refresh_time.2460>
		if(send_flag == 0)
    2376:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <send_flag>
    237a:	91 11       	cpse	r25, r1
    237c:	1c c0       	rjmp	.+56     	; 0x23b6 <__vector_16+0xd2>
			if(!(refresh_time))		//Ã¿¸ôÒ»ÃëÖ´ÐÐÒ»´Î
    237e:	81 11       	cpse	r24, r1
    2380:	1a c0       	rjmp	.+52     	; 0x23b6 <__vector_16+0xd2>
			{
				if(!(time_1s % send_time))//ÉèÖÃ·¢ËÍµÄÊ±¼ä
    2382:	20 91 e0 04 	lds	r18, 0x04E0	; 0x8004e0 <time_1s>
    2386:	30 91 e1 04 	lds	r19, 0x04E1	; 0x8004e1 <time_1s+0x1>
    238a:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <send_time>
    238e:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <send_time+0x1>
    2392:	c9 01       	movw	r24, r18
    2394:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
    2398:	89 2b       	or	r24, r25
    239a:	19 f4       	brne	.+6      	; 0x23a2 <__vector_16+0xbe>
					send_flag = 1;		  //·¢ËÍµÄ±êÖ¾
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <send_flag>
				time_1s++;			
    23a2:	2f 5f       	subi	r18, 0xFF	; 255
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	30 93 e1 04 	sts	0x04E1, r19	; 0x8004e1 <time_1s+0x1>
    23aa:	20 93 e0 04 	sts	0x04E0, r18	; 0x8004e0 <time_1s>
			}
	}
}
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <__vector_16+0xd2>
					REFRESH_ALLRAM_1726();
			}
			

		}
		refresh_time --;
    23b0:	85 e0       	ldi	r24, 0x05	; 5
    23b2:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <refresh_time.2460>
				if(!(time_1s % send_time))//ÉèÖÃ·¢ËÍµÄÊ±¼ä
					send_flag = 1;		  //·¢ËÍµÄ±êÖ¾
				time_1s++;			
			}
	}
}
    23b6:	ff 91       	pop	r31
    23b8:	ef 91       	pop	r30
    23ba:	bf 91       	pop	r27
    23bc:	af 91       	pop	r26
    23be:	9f 91       	pop	r25
    23c0:	8f 91       	pop	r24
    23c2:	7f 91       	pop	r23
    23c4:	6f 91       	pop	r22
    23c6:	5f 91       	pop	r21
    23c8:	4f 91       	pop	r20
    23ca:	3f 91       	pop	r19
    23cc:	2f 91       	pop	r18
    23ce:	0f 90       	pop	r0
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	0f 90       	pop	r0
    23d4:	1f 90       	pop	r1
    23d6:	18 95       	reti

000023d8 <__vector_15>:

				
unsigned char zhishui_finish_flag = 0;

SIGNAL(TIMER0_COMP_vect)//¶¨Ê±Æ÷T0±È½ÏÖÐ¶Ï
{
    23d8:	1f 92       	push	r1
    23da:	0f 92       	push	r0
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	0f 92       	push	r0
    23e0:	11 24       	eor	r1, r1
    23e2:	2f 93       	push	r18
    23e4:	3f 93       	push	r19
    23e6:	4f 93       	push	r20
    23e8:	5f 93       	push	r21
    23ea:	6f 93       	push	r22
    23ec:	7f 93       	push	r23
    23ee:	8f 93       	push	r24
    23f0:	9f 93       	push	r25
    23f2:	af 93       	push	r26
    23f4:	bf 93       	push	r27
    23f6:	ef 93       	push	r30
    23f8:	ff 93       	push	r31
#if 1				
			wdt_reset();//¶¨Ê±500msÎ¹¹·			
    23fa:	a8 95       	wdr
			//1000ÊÇÂ©Ë®ÁéÃô¶ÈµÄÉèÖÃ,Ô½´óÔ½ÁéÃô
			if ((ADC_Get(5)) < (712))
    23fc:	85 e0       	ldi	r24, 0x05	; 5
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 84 00 	call	0x108	; 0x108 <ADC_Get>
    2404:	88 3c       	cpi	r24, 0xC8	; 200
    2406:	92 40       	sbci	r25, 0x02	; 2
    2408:	34 f4       	brge	.+12     	; 0x2416 <__vector_15+0x3e>
			{
				LCD_Ico |= 0x01 << 5;
    240a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    240e:	80 62       	ori	r24, 0x20	; 32
    2410:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
    2414:	05 c0       	rjmp	.+10     	; 0x2420 <__vector_15+0x48>
			}
			else
			{
				LCD_Ico &= ~(0x01 << 5);
    2416:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    241a:	8f 7d       	andi	r24, 0xDF	; 223
    241c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
			}
			//¹Ø»úµÄÇé¿öÂ©Ë®»á·¢ËÍÐÅÏ¢£¬¿ÉÊÇÃ»ÓÐÏÔÊ¾
			if (deal_cmd & (0x01 << 12))//¹Ø»ú
    2420:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2424:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2428:	94 ff       	sbrs	r25, 4
    242a:	09 c0       	rjmp	.+18     	; 0x243e <__vector_15+0x66>
			{
				HT1721C_BL_0;
    242c:	1a 98       	cbi	0x03, 2	; 3
				status[0] &= ~(0x1 << 0);
    242e:	e8 ea       	ldi	r30, 0xA8	; 168
    2430:	f4 e0       	ldi	r31, 0x04	; 4
    2432:	80 81       	ld	r24, Z
    2434:	8e 7f       	andi	r24, 0xFE	; 254
    2436:	80 83       	st	Z, r24
				close_chongxi();
    2438:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <close_chongxi>
				return ;
    243c:	ed c0       	rjmp	.+474    	; 0x2618 <__vector_15+0x240>
			}
			else
			{
				HT1721C_BL_1;												
    243e:	1a 9a       	sbi	0x03, 2	; 3
				status[0] |= (0x1 << 0);
    2440:	e8 ea       	ldi	r30, 0xA8	; 168
    2442:	f4 e0       	ldi	r31, 0x04	; 4
    2444:	80 81       	ld	r24, Z
    2446:	81 60       	ori	r24, 0x01	; 1
    2448:	80 83       	st	Z, r24
			}
			
			if (deal_cmd & (0x01 << 13))//Í£»ú
    244a:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    244e:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2452:	95 ff       	sbrs	r25, 5
    2454:	03 c0       	rjmp	.+6      	; 0x245c <__vector_15+0x84>
			{
				close_chongxi();
    2456:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <close_chongxi>
				return;
    245a:	de c0       	rjmp	.+444    	; 0x2618 <__vector_15+0x240>
			}

			if (deal_cmd & (0x01 << 15))//×âÁÞÊ±¼ä
    245c:	99 23       	and	r25, r25
    245e:	1c f4       	brge	.+6      	; 0x2466 <__vector_15+0x8e>
			{
				close_chongxi();
    2460:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <close_chongxi>
				return ; 
    2464:	d9 c0       	rjmp	.+434    	; 0x2618 <__vector_15+0x240>
			}

	if(PINB & (0x01 << PB6))//È±Ë®´íÎó·¢ËÍ
    2466:	b6 9b       	sbis	0x16, 6	; 22
    2468:	08 c0       	rjmp	.+16     	; 0x247a <__vector_15+0xa2>
	{
		LCD_Ico |= 0x01 << 4;
    246a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    246e:	80 61       	ori	r24, 0x10	; 16
    2470:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
		close_chongxi();
    2474:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <close_chongxi>
    2478:	cf c0       	rjmp	.+414    	; 0x2618 <__vector_15+0x240>
	}
	else//	if (!(PINB & 0x01 << PB6))//µÍÑ¹¼ì²â
	{
		LCD_Ico &= ~(0x01 << 4);
    247a:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <LCD_Ico>
    247e:	2f 7e       	andi	r18, 0xEF	; 239
    2480:	20 93 a1 04 	sts	0x04A1, r18	; 0x8004a1 <LCD_Ico>
		if (!(status[1] & (0x01 << 2)))
    2484:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <status+0x1>
    2488:	22 fd       	sbrc	r18, 2
    248a:	0d c0       	rjmp	.+26     	; 0x24a6 <__vector_15+0xce>
		{
			if ((deal_cmd & 0x01 << 14))//³åÏ´
    248c:	96 ff       	sbrs	r25, 6
    248e:	0b c0       	rjmp	.+22     	; 0x24a6 <__vector_15+0xce>
			{
				Time2_Start();
    2490:	0e 94 3c 11 	call	0x2278	; 0x2278 <Time2_Start>
				//³åÏ´²Ù×÷
				//chongxi();		//PORTE |= (0x01 << PE7) | (0x01 << PE6);//µç´Å·§¿ª
				//PORTB |= (0x01 << PB2);//Ë®±Ãµç»ú¿ªÆô
				deal_cmd &= ~(0x01 << 14);
    2494:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2498:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    249c:	9f 7b       	andi	r25, 0xBF	; 191
    249e:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <deal_cmd+0x1>
    24a2:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <deal_cmd>
	//LEDON;	
}

unsigned char Get_time2_Status(void)
{
	return (TCCR2 & 0x07);
    24a6:	85 b5       	in	r24, 0x25	; 37
				//chongxi();		//PORTE |= (0x01 << PE7) | (0x01 << PE6);//µç´Å·§¿ª
				//PORTB |= (0x01 << PB2);//Ë®±Ãµç»ú¿ªÆô
				deal_cmd &= ~(0x01 << 14);
			}
		}
		if (Get_time2_Status())//³åÏ´×´Ì¬
    24a8:	87 70       	andi	r24, 0x07	; 7
    24aa:	41 f0       	breq	.+16     	; 0x24bc <__vector_15+0xe4>
		{
			chongxi();
    24ac:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <chongxi>
			status[1] |= 0x01 << 4;
    24b0:	e8 ea       	ldi	r30, 0xA8	; 168
    24b2:	f4 e0       	ldi	r31, 0x04	; 4
    24b4:	81 81       	ldd	r24, Z+1	; 0x01
    24b6:	80 61       	ori	r24, 0x10	; 16
    24b8:	81 83       	std	Z+1, r24	; 0x01
    24ba:	ae c0       	rjmp	.+348    	; 0x2618 <__vector_15+0x240>
		}
		else
		{
			status[1] &= ~(0x01 << 4);
    24bc:	e8 ea       	ldi	r30, 0xA8	; 168
    24be:	f4 e0       	ldi	r31, 0x04	; 4
    24c0:	81 81       	ldd	r24, Z+1	; 0x01
    24c2:	8f 7e       	andi	r24, 0xEF	; 239
    24c4:	81 83       	std	Z+1, r24	; 0x01
			if ((PINB & 0x01 << PB7))//ÖÆË® Á÷Á¿»ú//  ¸ßÑ¹µÄ¼ì²â //ÖÆË®×´Ì¬
    24c6:	b7 9b       	sbis	0x16, 7	; 22
    24c8:	10 c0       	rjmp	.+32     	; 0x24ea <__vector_15+0x112>
			{
			//			LEDON;
				PORTD &= ~((0x1 << PD5) | (0x1 << PD4));
    24ca:	82 b3       	in	r24, 0x12	; 18
    24cc:	8f 7c       	andi	r24, 0xCF	; 207
    24ce:	82 bb       	out	0x12, r24	; 18
				status[1] |= 0x01 << 2;
    24d0:	81 81       	ldd	r24, Z+1	; 0x01
    24d2:	84 60       	ori	r24, 0x04	; 4
    24d4:	81 83       	std	Z+1, r24	; 0x01
			//	time_zhishui = 0;
				Time1_Start();
    24d6:	0e 94 26 11 	call	0x224c	; 0x224c <Time1_Start>
				Time3_Start();
    24da:	0e 94 56 11 	call	0x22ac	; 0x22ac <Time3_Start>
				zhishui();
    24de:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <zhishui>
				//LEDRUN;
				zhishui_finish_flag = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <zhishui_finish_flag>
    24e8:	97 c0       	rjmp	.+302    	; 0x2618 <__vector_15+0x240>
			}
			else if(zhishui_finish_flag)
    24ea:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <zhishui_finish_flag>
    24ee:	88 23       	and	r24, r24
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <__vector_15+0x11c>
    24f2:	92 c0       	rjmp	.+292    	; 0x2618 <__vector_15+0x240>
			{
				PORTD |= ((0x1 << PD5) | (0x1 << PD4));
    24f4:	82 b3       	in	r24, 0x12	; 18
    24f6:	80 63       	ori	r24, 0x30	; 48
    24f8:	82 bb       	out	0x12, r24	; 18
				status[1] &= ~(0x01 << 2);//ÖÆË®´ý»ú×´Ì¬
    24fa:	e8 ea       	ldi	r30, 0xA8	; 168
    24fc:	f4 e0       	ldi	r31, 0x04	; 4
    24fe:	81 81       	ldd	r24, Z+1	; 0x01
    2500:	8b 7f       	andi	r24, 0xFB	; 251
    2502:	81 83       	std	Z+1, r24	; 0x01
				close_zhishui();
    2504:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <close_zhishui>
				//Á÷Á¿¼ÆËãÁ÷Á¿
				value_flow = Time1_Get_TCNT()+ yu_sum_flow ;
    2508:	0e 94 31 11 	call	0x2262	; 0x2262 <Time1_Get_TCNT>
    250c:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <yu_sum_flow>
    2510:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <yu_sum_flow+0x1>
    2514:	82 0f       	add	r24, r18
    2516:	93 1f       	adc	r25, r19
    2518:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <value_flow+0x1>
    251c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <value_flow>
				sum_flow = sum_flow + value_flow / T_flow_L;//
    2520:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <T_flow_L>
    2524:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <T_flow_L+0x1>
    2528:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
    252c:	20 91 cc 04 	lds	r18, 0x04CC	; 0x8004cc <sum_flow>
    2530:	30 91 cd 04 	lds	r19, 0x04CD	; 0x8004cd <sum_flow+0x1>
    2534:	62 0f       	add	r22, r18
    2536:	73 1f       	adc	r23, r19
    2538:	70 93 cd 04 	sts	0x04CD, r23	; 0x8004cd <sum_flow+0x1>
    253c:	60 93 cc 04 	sts	0x04CC, r22	; 0x8004cc <sum_flow>
				yu_sum_flow = value_flow % T_flow_L;
    2540:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <yu_sum_flow+0x1>
    2544:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <yu_sum_flow>
				Time1_Stop();
    2548:	0e 94 2b 11 	call	0x2256	; 0x2256 <Time1_Stop>
				Time3_Stop();
    254c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <Time3_Stop>
				//Ê±¼äËãÁ÷Á¿	
				value_time = time_zhishui+ yu_sum_time ;//Ã»ÓÐ1LµÄ×ÜÊ±¼ä
    2550:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <time_zhishui>
    2554:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <time_zhishui+0x1>
    2558:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <yu_sum_time>
    255c:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <yu_sum_time+0x1>
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <value_time+0x1>
    2568:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <value_time>
				sum_time = sum_time + value_time / T_time_L;
    256c:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <T_time_L>
    2570:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <T_time_L+0x1>
    2574:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
    2578:	20 91 c6 04 	lds	r18, 0x04C6	; 0x8004c6 <sum_time>
    257c:	30 91 c7 04 	lds	r19, 0x04C7	; 0x8004c7 <sum_time+0x1>
    2580:	62 0f       	add	r22, r18
    2582:	73 1f       	adc	r23, r19
    2584:	70 93 c7 04 	sts	0x04C7, r23	; 0x8004c7 <sum_time+0x1>
    2588:	60 93 c6 04 	sts	0x04C6, r22	; 0x8004c6 <sum_time>
				yu_sum_time = value_time % T_time_L;
    258c:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <yu_sum_time+0x1>
    2590:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <yu_sum_time>

			if(TIME1)
			{
				flow_zhishui = value_flow/T_flow_L;
    2594:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <value_flow>
    2598:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <value_flow+0x1>
    259c:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <T_flow_L>
    25a0:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <T_flow_L+0x1>
    25a4:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
    25a8:	70 93 da 04 	sts	0x04DA, r23	; 0x8004da <flow_zhishui+0x1>
    25ac:	60 93 d9 04 	sts	0x04D9, r22	; 0x8004d9 <flow_zhishui>
				flow_l = sum_flow;
    25b0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <sum_flow>
    25b4:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <sum_flow+0x1>
    25b8:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <flow_l+0x1>
    25bc:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <flow_l>
				flow_y = yu_sum_flow;
    25c0:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <yu_sum_flow>
    25c4:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <yu_sum_flow+0x1>
    25c8:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <flow_y+0x1>
    25cc:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <flow_y>
			{ 
				flow_zhishui = value_time/T_time_L;	
				flow_l = sum_time;	
				flow_y = yu_sum_time;				
			}
			sum_viuv_flow += flow_zhishui;//°´ÉýÀÛ¼Ó		
    25d0:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <sum_viuv_flow>
    25d4:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <sum_viuv_flow+0x1>
    25d8:	68 0f       	add	r22, r24
    25da:	79 1f       	adc	r23, r25
    25dc:	70 93 cf 04 	sts	0x04CF, r23	; 0x8004cf <sum_viuv_flow+0x1>
    25e0:	60 93 ce 04 	sts	0x04CE, r22	; 0x8004ce <sum_viuv_flow>
#if ISXI_MODE		//°´Á÷Á¿³åÏ´
			if (sum_viuv_flow > T_chongxi )//Éè¶¨ÖÆË®Ê±¼äºó³åÏ´
    25e4:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <T_chongxi>
    25e8:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <T_chongxi+0x1>
    25ec:	86 17       	cp	r24, r22
    25ee:	97 07       	cpc	r25, r23
    25f0:	68 f4       	brcc	.+26     	; 0x260c <__vector_15+0x234>
			{
				sum_viuv_flow = 0;//
    25f2:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <sum_viuv_flow+0x1>
    25f6:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <sum_viuv_flow>
				deal_cmd |= (0x01 << 14);
    25fa:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    25fe:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2602:	90 64       	ori	r25, 0x40	; 64
    2604:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <deal_cmd+0x1>
    2608:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <deal_cmd>
					deal_cmd |= (0x01 << 14);
				}
#endif		
// 				TCNT1H = 0x00;
// 				TCNT1L = 0x00;
				time_zhishui = 0;				
    260c:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <time_zhishui+0x1>
    2610:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <time_zhishui>
				zhishui_finish_flag = 0;
    2614:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <zhishui_finish_flag>
		
	}
#endif	

	
}
    2618:	ff 91       	pop	r31
    261a:	ef 91       	pop	r30
    261c:	bf 91       	pop	r27
    261e:	af 91       	pop	r26
    2620:	9f 91       	pop	r25
    2622:	8f 91       	pop	r24
    2624:	7f 91       	pop	r23
    2626:	6f 91       	pop	r22
    2628:	5f 91       	pop	r21
    262a:	4f 91       	pop	r20
    262c:	3f 91       	pop	r19
    262e:	2f 91       	pop	r18
    2630:	0f 90       	pop	r0
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	0f 90       	pop	r0
    2636:	1f 90       	pop	r1
    2638:	18 95       	reti

0000263a <__vector_14>:


SIGNAL(TIMER1_OVF_vect)
{
    263a:	1f 92       	push	r1
    263c:	0f 92       	push	r0
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	0f 92       	push	r0
    2642:	11 24       	eor	r1, r1
    2644:	8f 93       	push	r24
	flow_ovf_flag ++;
    2646:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <flow_ovf_flag>
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <flow_ovf_flag>
}
    2650:	8f 91       	pop	r24
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <__vector_12>:
SIGNAL(TIMER1_COMPA_vect)
{
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
	
}
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_10>:

SIGNAL(TIMER2_OVF_vect)//¶¨Ê±Æ÷T2Òç³öÖÐ¶Ï20ms
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	2f 93       	push	r18
    267c:	3f 93       	push	r19
    267e:	4f 93       	push	r20
    2680:	5f 93       	push	r21
    2682:	6f 93       	push	r22
    2684:	7f 93       	push	r23
    2686:	8f 93       	push	r24
    2688:	9f 93       	push	r25
    268a:	af 93       	push	r26
    268c:	bf 93       	push	r27
    268e:	ef 93       	push	r30
    2690:	ff 93       	push	r31
	//BEEP(1);
	TCNT2 = 0x28;
    2692:	88 e2       	ldi	r24, 0x28	; 40
    2694:	84 bd       	out	0x24, r24	; 36
	static unsigned int time_20ms = 0;
	time_20ms ++;
    2696:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <time_20ms.2495>
    269a:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <time_20ms.2495+0x1>
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <time_20ms.2495+0x1>
    26a4:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <time_20ms.2495>
	
	if(time_20ms > 50 * time_chongxi)//ÉèÖÃ³åÏ´µÄÊ±¼ä
    26a8:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <time_chongxi>
    26ac:	42 e3       	ldi	r20, 0x32	; 50
    26ae:	24 9f       	mul	r18, r20
    26b0:	90 01       	movw	r18, r0
    26b2:	11 24       	eor	r1, r1
    26b4:	28 17       	cp	r18, r24
    26b6:	39 07       	cpc	r19, r25
    26b8:	88 f4       	brcc	.+34     	; 0x26dc <__vector_10+0x6c>
	{
			time_20ms = 0;			
    26ba:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <time_20ms.2495+0x1>
    26be:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <time_20ms.2495>
			close_chongxi();
    26c2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <close_chongxi>
			Time2_Stop();
    26c6:	0e 94 43 11 	call	0x2286	; 0x2286 <Time2_Stop>
			count_chongxi ++;
    26ca:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <count_chongxi>
    26ce:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <count_chongxi+0x1>
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <count_chongxi+0x1>
    26d8:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <count_chongxi>
		//	Write_COUNT_CHONGXI_EEPROM(count_chongxi);
			//LEDOFF;
			//deal_cmd &= ~(0x01 << 14);
	}
		//BEEP(1);
}
    26dc:	ff 91       	pop	r31
    26de:	ef 91       	pop	r30
    26e0:	bf 91       	pop	r27
    26e2:	af 91       	pop	r26
    26e4:	9f 91       	pop	r25
    26e6:	8f 91       	pop	r24
    26e8:	7f 91       	pop	r23
    26ea:	6f 91       	pop	r22
    26ec:	5f 91       	pop	r21
    26ee:	4f 91       	pop	r20
    26f0:	3f 91       	pop	r19
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	0f 90       	pop	r0
    26fa:	1f 90       	pop	r1
    26fc:	18 95       	reti

000026fe <__vector_9>:
SIGNAL(TIMER2_COMP_vect)//¶¨Ê±Æ÷T2±È½ÏÖÐ¶Ï
{
    26fe:	1f 92       	push	r1
    2700:	0f 92       	push	r0
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	0f 92       	push	r0
    2706:	11 24       	eor	r1, r1
	
	//USART0_Transmit(a);
	//TCNT0 = 0x00;
	//BEEP(20);
}
    2708:	0f 90       	pop	r0
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	0f 90       	pop	r0
    270e:	1f 90       	pop	r1
    2710:	18 95       	reti

00002712 <__vector_29>:

//ÖÆË®µÄÊ±ºò¿ªÆô¶¨Ê±Æ÷3¼ÆËãÊ±¼ä£¬¼ì²âtds1£¬tds2,ÖÆË®µÄÊ±¼ä
SIGNAL(TIMER3_OVF_vect)//¼ÆËãÖÆË®µÄÊ±¼ä100ms
{
    2712:	1f 92       	push	r1
    2714:	0f 92       	push	r0
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	0f 92       	push	r0
    271a:	11 24       	eor	r1, r1
    271c:	2f 93       	push	r18
    271e:	3f 93       	push	r19
    2720:	4f 93       	push	r20
    2722:	5f 93       	push	r21
    2724:	6f 93       	push	r22
    2726:	7f 93       	push	r23
    2728:	8f 93       	push	r24
    272a:	9f 93       	push	r25
    272c:	af 93       	push	r26
    272e:	bf 93       	push	r27
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
	TCNT3H = 0xFB;
    2734:	8b ef       	ldi	r24, 0xFB	; 251
    2736:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	TCNT3L = 0xC8;
    273a:	88 ec       	ldi	r24, 0xC8	; 200
    273c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	static unsigned char t_100ms = 0;
		t_100ms ++;
    2740:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <t_100ms.2507>
    2744:	8f 5f       	subi	r24, 0xFF	; 255
    2746:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <t_100ms.2507>
		if(t_100ms > 5)//ÖÆË®Ê±¼ä¡ª¡ª¡ª¡ª>500msÃë¼ÇÒ»´Î
    274a:	86 30       	cpi	r24, 0x06	; 6
    274c:	78 f0       	brcs	.+30     	; 0x276c <__vector_29+0x5a>
		{	
			LEDRUN ;		
    274e:	95 b3       	in	r25, 0x15	; 21
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	89 27       	eor	r24, r25
    2754:	85 bb       	out	0x15, r24	; 21
			t_100ms = 0;
    2756:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <t_100ms.2507>
			time_zhishui ++;
    275a:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <time_zhishui>
    275e:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <time_zhishui+0x1>
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <time_zhishui+0x1>
    2768:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <time_zhishui>
		}
		//100ms¶ÁÈ¡Ò»´Î
		memset(flow, 0, 8);
    276c:	88 e0       	ldi	r24, 0x08	; 8
    276e:	e4 eb       	ldi	r30, 0xB4	; 180
    2770:	f4 e0       	ldi	r31, 0x04	; 4
    2772:	df 01       	movw	r26, r30
    2774:	1d 92       	st	X+, r1
    2776:	8a 95       	dec	r24
    2778:	e9 f7       	brne	.-6      	; 0x2774 <__vector_29+0x62>
		memset(tds1, 0, 4);
    277a:	84 e0       	ldi	r24, 0x04	; 4
    277c:	e0 eb       	ldi	r30, 0xB0	; 176
    277e:	f4 e0       	ldi	r31, 0x04	; 4
    2780:	df 01       	movw	r26, r30
    2782:	98 2f       	mov	r25, r24
    2784:	1d 92       	st	X+, r1
    2786:	9a 95       	dec	r25
    2788:	e9 f7       	brne	.-6      	; 0x2784 <__vector_29+0x72>
		memset(tds2, 0, 4);
    278a:	ec ea       	ldi	r30, 0xAC	; 172
    278c:	f4 e0       	ldi	r31, 0x04	; 4
    278e:	df 01       	movw	r26, r30
    2790:	1d 92       	st	X+, r1
    2792:	8a 95       	dec	r24
    2794:	e9 f7       	brne	.-6      	; 0x2790 <__vector_29+0x7e>
		if(TIME1)
			SET_FLOW(flow);//¼ÆÊýÒ»ÏÂ1ml,1000ÏÂÎª1L
    2796:	84 eb       	ldi	r24, 0xB4	; 180
    2798:	94 e0       	ldi	r25, 0x04	; 4
    279a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <SET_FLOW>
		else
			flow_set(itoa(flow,time_zhishui));
		SET_TDS1(tds1);
    279e:	80 eb       	ldi	r24, 0xB0	; 176
    27a0:	94 e0       	ldi	r25, 0x04	; 4
    27a2:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <SET_TDS1>
		SET_TDS2(tds2);
    27a6:	8c ea       	ldi	r24, 0xAC	; 172
    27a8:	94 e0       	ldi	r25, 0x04	; 4
    27aa:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <SET_TDS2>
			//LEDON;
}
    27ae:	ff 91       	pop	r31
    27b0:	ef 91       	pop	r30
    27b2:	bf 91       	pop	r27
    27b4:	af 91       	pop	r26
    27b6:	9f 91       	pop	r25
    27b8:	8f 91       	pop	r24
    27ba:	7f 91       	pop	r23
    27bc:	6f 91       	pop	r22
    27be:	5f 91       	pop	r21
    27c0:	4f 91       	pop	r20
    27c2:	3f 91       	pop	r19
    27c4:	2f 91       	pop	r18
    27c6:	0f 90       	pop	r0
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	0f 90       	pop	r0
    27cc:	1f 90       	pop	r1
    27ce:	18 95       	reti

000027d0 <__vector_26>:
SIGNAL(TIMER3_COMPA_vect)
{
    27d0:	1f 92       	push	r1
    27d2:	0f 92       	push	r0
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	0f 92       	push	r0
    27d8:	11 24       	eor	r1, r1
	
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	0f 90       	pop	r0
    27e0:	1f 90       	pop	r1
    27e2:	18 95       	reti

000027e4 <System_Init>:
																	 */
 /************************************************************************/

void System_Init(void)
{
	cli();
    27e4:	f8 94       	cli
	GPRS_PROT();//	
    27e6:	0e 94 c6 02 	call	0x58c	; 0x58c <GPRS_PROT>
	Port_Init();
    27ea:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <Port_Init>
	LCD_Init();
    27ee:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_Init>
	Time1_Init();
    27f2:	0e 94 21 11 	call	0x2242	; 0x2242 <Time1_Init>
	Time2_Init();
    27f6:	0e 94 36 11 	call	0x226c	; 0x226c <Time2_Init>
#if 1
	Time3_Init();
    27fa:	0e 94 4a 11 	call	0x2294	; 0x2294 <Time3_Init>
#endif
	ADC_Init();
    27fe:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_Init>
	USART1_Init();
    2802:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <USART1_Init>
	
#ifdef Usart0	
		USART0_Init();//usart´®¿ÚÓëtime3³åÍ»£¿£¿
#endif 		
	
	LED_Init();
    2806:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <LED_Init>
	BEEP_Init();
    280a:	0e 94 cd 00 	call	0x19a	; 0x19a <BEEP_Init>
    280e:	2f ef       	ldi	r18, 0xFF	; 255
    2810:	8f e3       	ldi	r24, 0x3F	; 63
    2812:	95 e6       	ldi	r25, 0x65	; 101
    2814:	21 50       	subi	r18, 0x01	; 1
    2816:	80 40       	sbci	r24, 0x00	; 0
    2818:	90 40       	sbci	r25, 0x00	; 0
    281a:	e1 f7       	brne	.-8      	; 0x2814 <System_Init+0x30>
    281c:	00 c0       	rjmp	.+0      	; 0x281e <System_Init+0x3a>
    281e:	00 00       	nop
	
	
	_delay_ms(3000);
	WRITE_DATA_1726(0);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	0e 94 8f 0a 	call	0x151e	; 0x151e <WRITE_DATA_1726>
	Time0_Init();//¶¨Ê±Æ÷1¿ªÆô,Î¹¿´ÃÅ¹·	
    2826:	0e 94 00 11 	call	0x2200	; 0x2200 <Time0_Init>
	Time2_Start();//¶¨Ê±Æ÷2£¬¿ª»ú³åÏ´6Ãë
    282a:	0e 94 3c 11 	call	0x2278	; 0x2278 <Time2_Start>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    282e:	9d e0       	ldi	r25, 0x0D	; 13
    2830:	88 e1       	ldi	r24, 0x18	; 24
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	a8 95       	wdr
    2838:	81 bd       	out	0x21, r24	; 33
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	91 bd       	out	0x21, r25	; 33
	
	wdt_enable(WDTO_500MS); //¿ªÆô¿´ÃÅ¹·	
	sei();
    283e:	78 94       	sei
    2840:	08 95       	ret

00002842 <Data_Init>:

	//	WRITE_ALLRAM_1726(1);//È«²¿ÏÔÊ¾

}
void  Data_Init(unsigned char *status, unsigned int *viuv_time, unsigned int *cmd)
{
    2842:	8f 92       	push	r8
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	cf 92       	push	r12
    284c:	df 92       	push	r13
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	28 97       	sbiw	r28, 0x08	; 8
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	6c 01       	movw	r12, r24
    286a:	5b 01       	movw	r10, r22
    286c:	4a 01       	movw	r8, r20
    286e:	2f ef       	ldi	r18, 0xFF	; 255
    2870:	8f e1       	ldi	r24, 0x1F	; 31
    2872:	9a e0       	ldi	r25, 0x0A	; 10
    2874:	21 50       	subi	r18, 0x01	; 1
    2876:	80 40       	sbci	r24, 0x00	; 0
    2878:	90 40       	sbci	r25, 0x00	; 0
    287a:	e1 f7       	brne	.-8      	; 0x2874 <Data_Init+0x32>
    287c:	00 c0       	rjmp	.+0      	; 0x287e <Data_Init+0x3c>
    287e:	00 00       	nop
	_delay_ms(300);

	//	LCD_Ico |= 0x0f;		
		//	WRITE_ALLRAM_1726(0);//
	memset(status, 0, 2);//³õÊ¼»¯×´Ì¬	
    2880:	d6 01       	movw	r26, r12
    2882:	1d 92       	st	X+, r1
    2884:	1c 92       	st	X, r1
	unsigned char read_eeprom_buf[8] = { 0 };
    2886:	fe 01       	movw	r30, r28
    2888:	31 96       	adiw	r30, 0x01	; 1
    288a:	88 e0       	ldi	r24, 0x08	; 8
    288c:	df 01       	movw	r26, r30
    288e:	1d 92       	st	X+, r1
    2890:	8a 95       	dec	r24
    2892:	e9 f7       	brne	.-6      	; 0x288e <Data_Init+0x4c>

	//LEDON;
	if (Check_Init())
    2894:	0e 94 18 01 	call	0x230	; 0x230 <Check_Init>
    2898:	89 2b       	or	r24, r25
    289a:	09 f4       	brne	.+2      	; 0x289e <Data_Init+0x5c>
    289c:	52 c0       	rjmp	.+164    	; 0x2942 <Data_Init+0x100>
	{
		//flow_set(read_eeprom_buf);

		//Ê±¼ä
		SET_TIME(Read_TIME_EEPROM());
    289e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Read_TIME_EEPROM>
    28a2:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <SET_TIME>
		//Á÷Á¿
		flow_l = Read_FLOW_EEPROM();
    28a6:	0e 94 8e 01 	call	0x31c	; 0x31c <Read_FLOW_EEPROM>
    28aa:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <flow_l+0x1>
    28ae:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <flow_l>
		SET_FLOW_L(flow_l);
    28b2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <SET_FLOW_L>


		//tds2 Ô­Ë®
		memset(read_eeprom_buf, 0, 8);
    28b6:	68 94       	set
    28b8:	ff 24       	eor	r15, r15
    28ba:	f3 f8       	bld	r15, 3
    28bc:	8e 01       	movw	r16, r28
    28be:	0f 5f       	subi	r16, 0xFF	; 255
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	f8 01       	movw	r30, r16
    28c4:	2f 2d       	mov	r18, r15
    28c6:	11 92       	st	Z+, r1
    28c8:	2a 95       	dec	r18
    28ca:	e9 f7       	brne	.-6      	; 0x28c6 <Data_Init+0x84>
		Read_RAW_EEPROM(read_eeprom_buf);
    28cc:	c8 01       	movw	r24, r16
    28ce:	0e 94 b4 01 	call	0x368	; 0x368 <Read_RAW_EEPROM>
		raw_water_set(read_eeprom_buf);
    28d2:	c8 01       	movw	r24, r16
    28d4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <raw_water_set>
		//tds1 ¾»Ë®
		memset(read_eeprom_buf, 0, 8);
    28d8:	d8 01       	movw	r26, r16
    28da:	ef 2d       	mov	r30, r15
    28dc:	1d 92       	st	X+, r1
    28de:	ea 95       	dec	r30
    28e0:	e9 f7       	brne	.-6      	; 0x28dc <Data_Init+0x9a>
		pure_water_set(Read_PURE_EEPROM(read_eeprom_buf));
    28e2:	c8 01       	movw	r24, r16
    28e4:	0e 94 c8 01 	call	0x390	; 0x390 <Read_PURE_EEPROM>
    28e8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <pure_water_set>
		memset(read_eeprom_buf, 0, 8);
    28ec:	d8 01       	movw	r26, r16
    28ee:	ef 2d       	mov	r30, r15
    28f0:	1d 92       	st	X+, r1
    28f2:	ea 95       	dec	r30
    28f4:	e9 f7       	brne	.-6      	; 0x28f0 <Data_Init+0xae>

		//»ú×´Ì¬
		Read_STATUS_EEPROM(read_eeprom_buf);
    28f6:	c8 01       	movw	r24, r16
    28f8:	0e 94 3a 01 	call	0x274	; 0x274 <Read_STATUS_EEPROM>

		Str_Add_Str(status, 0, read_eeprom_buf, 2);
    28fc:	22 e0       	ldi	r18, 0x02	; 2
    28fe:	a8 01       	movw	r20, r16
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	c6 01       	movw	r24, r12
    2904:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Str_Add_Str>
		memset(read_eeprom_buf, 0, 8);
    2908:	d8 01       	movw	r26, r16
    290a:	1d 92       	st	X+, r1
    290c:	fa 94       	dec	r15
    290e:	e9 f7       	brne	.-6      	; 0x290a <Data_Init+0xc8>
		//´¦ÀíÃüÁî
		Read_CMD_EEPROM(cmd);
    2910:	c4 01       	movw	r24, r8
    2912:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Read_CMD_EEPROM>
		//Ê£ÓàµÄÁ÷Á¿
		flow_y = Read_YU_SUM_EEPROM();
    2916:	0e 94 46 02 	call	0x48c	; 0x48c <Read_YU_SUM_EEPROM>
    291a:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <flow_y+0x1>
    291e:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <flow_y>

		Read_Filte_CntV_EEPROM(Filte_CntV);
    2922:	8c eb       	ldi	r24, 0xBC	; 188
    2924:	94 e0       	ldi	r25, 0x04	; 4
    2926:	0e 94 b9 02 	call	0x572	; 0x572 <Read_Filte_CntV_EEPROM>

		*viuv_time = Read__VIUV_TIME_EEPROM();
    292a:	0e 94 8a 02 	call	0x514	; 0x514 <Read__VIUV_TIME_EEPROM>
    292e:	f5 01       	movw	r30, r10
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	80 83       	st	Z, r24

		count_chongxi = Read_COUNT_CHONGXI_EEPROM();
    2934:	0e 94 18 02 	call	0x430	; 0x430 <Read_COUNT_CHONGXI_EEPROM>
    2938:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <count_chongxi+0x1>
    293c:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <count_chongxi>
    2940:	1b c0       	rjmp	.+54     	; 0x2978 <Data_Init+0x136>
	else
	{
		//flow_set("00000");	
		//Write_Iint_Filte_CntV_EEPROM(Iint_Filte_CntV);
	//	Write_Init_EEPROM();
		BEEP(10);
    2942:	8a e0       	ldi	r24, 0x0A	; 10
    2944:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <BEEP>
		viuv_time = 0;
		flow_y = 0;
    2948:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <flow_y+0x1>
    294c:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <flow_y>
		flow_l = 0;
    2950:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <flow_l+0x1>
    2954:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <flow_l>
		raw_water_set("00");
    2958:	81 ef       	ldi	r24, 0xF1	; 241
    295a:	93 e0       	ldi	r25, 0x03	; 3
    295c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <raw_water_set>
		pure_water_set("00");
    2960:	81 ef       	ldi	r24, 0xF1	; 241
    2962:	93 e0       	ldi	r25, 0x03	; 3
    2964:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <pure_water_set>
		flow_set("0");
    2968:	82 ef       	ldi	r24, 0xF2	; 242
    296a:	93 e0       	ldi	r25, 0x03	; 3
    296c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <flow_set>
		time_set("88888");
    2970:	84 ef       	ldi	r24, 0xF4	; 244
    2972:	93 e0       	ldi	r25, 0x03	; 3
    2974:	0e 94 8f 0c 	call	0x191e	; 0x191e <time_set>

				//return 0;	
	}
	//LEDOFF;

}
    2978:	28 96       	adiw	r28, 0x08	; 8
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	ff 90       	pop	r15
    298e:	df 90       	pop	r13
    2990:	cf 90       	pop	r12
    2992:	bf 90       	pop	r11
    2994:	af 90       	pop	r10
    2996:	9f 90       	pop	r9
    2998:	8f 90       	pop	r8
    299a:	08 95       	ret

0000299c <main>:


int main(void)
{
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	2f 97       	sbiw	r28, 0x0f	; 15
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61

	DDRC |= 0x01 << PC6;
    29b0:	a6 9a       	sbi	0x14, 6	; 20
	PORTC |= 0x01 << PC6;
    29b2:	ae 9a       	sbi	0x15, 6	; 21
	System_Init();
    29b4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <System_Init>

	unsigned int error = 0;
	
	unsigned char eeprom_write_flag = 0;
	unsigned char parameter_len = 0;
	unsigned char Parameter[9+2*Filte_num] = { 0x02,0x10,0x00,0x00,0x00,0x01,0x00,0x10,0x20,0x00,0x00,0x00,0x00 };
    29b8:	fe 01       	movw	r30, r28
    29ba:	31 96       	adiw	r30, 0x01	; 1
    29bc:	8f e0       	ldi	r24, 0x0F	; 15
    29be:	df 01       	movw	r26, r30
    29c0:	1d 92       	st	X+, r1
    29c2:	8a 95       	dec	r24
    29c4:	e9 f7       	brne	.-6      	; 0x29c0 <main+0x24>
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	80 e1       	ldi	r24, 0x10	; 16
    29cc:	8a 83       	std	Y+2, r24	; 0x02
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	88 87       	std	Y+8, r24	; 0x08
    29d4:	80 e2       	ldi	r24, 0x20	; 32
    29d6:	89 87       	std	Y+9, r24	; 0x09
	//unsigned char Ack[22] = { 0 }, Ack_Len = 0;
	//deal_cmd = 0xFFFF;
	Data_Init(status, &sum_viuv_time, &deal_cmd);
    29d8:	46 ed       	ldi	r20, 0xD6	; 214
    29da:	54 e0       	ldi	r21, 0x04	; 4
    29dc:	60 ed       	ldi	r22, 0xD0	; 208
    29de:	74 e0       	ldi	r23, 0x04	; 4
    29e0:	88 ea       	ldi	r24, 0xA8	; 168
    29e2:	94 e0       	ldi	r25, 0x04	; 4
    29e4:	0e 94 21 14 	call	0x2842	; 0x2842 <Data_Init>

	//LEDON;

//	_delay_ms(6000);
	//						¹Ø»ú			Í£»ú			³åÏ´		×âÁÞÊ±¼ä
	deal_cmd = 0xFFF | (0x00 << 12) | (0x00 << 13) | (0x00 << 14) | (0x00 << 15);
    29e8:	8f ef       	ldi	r24, 0xFF	; 255
    29ea:	9f e0       	ldi	r25, 0x0F	; 15
    29ec:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <deal_cmd+0x1>
    29f0:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <deal_cmd>

	//×ÜµÄµç´Å·§¹¤×÷Ê±¼ä
//	sum_time = (time_chongxi  + T_chongxi)* count_chongxi - T_chongxi + sum_viuv_time;

	LCD_Ico |= 0x0f;	
    29f4:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    29f8:	8f 60       	ori	r24, 0x0F	; 15
    29fa:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>

	//unsigned int sum_time = 0;//µç´Å·§¹¤×÷µÄ×ÜÊ±¼ä

	unsigned int error = 0;
	
	unsigned char eeprom_write_flag = 0;
    29fe:	51 2c       	mov	r5, r1
			//sum_flow = 23;
			Write_FLOW_EEPROM(flow_l);//×ÜÁ÷Á¿£¨L£©

			Write_PURE_EEPROM(tds1);
			Write_RAW_EEPROM(tds2);
			Write_VIUV_TIME_EEPROM(sum_viuv_time);//Ò»´ÎÖÆË®»¹Ã»ÓÐ³åÏ´µÄÊ±¼ä(·ÖÖÓ)
    2a00:	0f 2e       	mov	r0, r31
    2a02:	f0 ed       	ldi	r31, 0xD0	; 208
    2a04:	6f 2e       	mov	r6, r31
    2a06:	f4 e0       	ldi	r31, 0x04	; 4
    2a08:	7f 2e       	mov	r7, r31
    2a0a:	f0 2d       	mov	r31, r0

			memset(Filte_CntV, 0, 2 * Filte_num);
    2a0c:	0f 2e       	mov	r0, r31
    2a0e:	fc eb       	ldi	r31, 0xBC	; 188
    2a10:	cf 2e       	mov	r12, r31
    2a12:	f4 e0       	ldi	r31, 0x04	; 4
    2a14:	df 2e       	mov	r13, r31
    2a16:	f0 2d       	mov	r31, r0
    2a18:	0f 2e       	mov	r0, r31
    2a1a:	f6 e0       	ldi	r31, 0x06	; 6
    2a1c:	2f 2e       	mov	r2, r31
    2a1e:	f0 2d       	mov	r31, r0
			for (unsigned char i = 0; i < Filte_num; i++)
			{
				Filte_CntV[2 * i] += flow_l << 8;
				Filte_CntV[2 * i + 1] += flow_l;
    2a20:	0f 2e       	mov	r0, r31
    2a22:	f4 ed       	ldi	r31, 0xD4	; 212
    2a24:	8f 2e       	mov	r8, r31
    2a26:	f4 e0       	ldi	r31, 0x04	; 4
    2a28:	9f 2e       	mov	r9, r31
    2a2a:	f0 2d       	mov	r31, r0
    2a2c:	0f 2e       	mov	r0, r31
    2a2e:	f2 ec       	ldi	r31, 0xC2	; 194
    2a30:	af 2e       	mov	r10, r31
    2a32:	f4 e0       	ldi	r31, 0x04	; 4
    2a34:	bf 2e       	mov	r11, r31
    2a36:	f0 2d       	mov	r31, r0
			}
			Write_Filte_CntV_EEPROM(Filte_CntV);
			
			SET_FLOW_L(flow_l);
			Write_Init_EEPROM();
			eeprom_write_flag = 0;
    2a38:	41 2c       	mov	r4, r1
		Write_CMD_EEPROM(deal_cmd);		
		Write_STATUS_EEPROM(status);
#if 1
		if (Get_time3_Status())//ÔÚÖÆË®¹ý³ÌÖÐ¶ÏµçÎÞ·¨±£´æÊý¾Ý
		{
			eeprom_write_flag = 1;
    2a3a:	33 24       	eor	r3, r3
    2a3c:	33 94       	inc	r3
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <main+0xa6>
    2a40:	53 2c       	mov	r5, r3

	while (1)
	{
		//ÍøÂçµÄ·ÃÎÊ
		//GPRS×´Ì¬»ñ
		PORTA &= ~(0x01<<PA2);	//¿ªÆôGPRS	
    2a42:	da 98       	cbi	0x1b, 2	; 27
    2a44:	ef ef       	ldi	r30, 0xFF	; 255
    2a46:	fb e6       	ldi	r31, 0x6B	; 107
    2a48:	31 97       	sbiw	r30, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <main+0xac>
    2a4c:	00 c0       	rjmp	.+0      	; 0x2a4e <main+0xb2>
    2a4e:	00 00       	nop
		_delay_ms(10);
		if(!(PIND & (0x01<<PD2)))//¼ì²éGPRSÄ£¿é
    2a50:	82 99       	sbic	0x10, 2	; 16
    2a52:	0a c0       	rjmp	.+20     	; 0x2a68 <main+0xcc>
    2a54:	ff ef       	ldi	r31, 0xFF	; 255
    2a56:	2f e5       	ldi	r18, 0x5F	; 95
    2a58:	43 e0       	ldi	r20, 0x03	; 3
    2a5a:	f1 50       	subi	r31, 0x01	; 1
    2a5c:	20 40       	sbci	r18, 0x00	; 0
    2a5e:	40 40       	sbci	r20, 0x00	; 0
    2a60:	e1 f7       	brne	.-8      	; 0x2a5a <main+0xbe>
    2a62:	00 c0       	rjmp	.+0      	; 0x2a64 <main+0xc8>
    2a64:	00 00       	nop
		{
			_delay_ms(100);
 			PORTA |= (0x01<<PA2);	//¹Ø±ÕGPRS	
    2a66:	da 9a       	sbi	0x1b, 2	; 27
		}		
#if 1	
			GET_GPRS_Signal();
    2a68:	0e 94 cb 02 	call	0x596	; 0x596 <GET_GPRS_Signal>
#endif				
/*		Write_STATUS_EEPROM(status);*/
		if (send_flag)
    2a6c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <send_flag>
    2a70:	88 23       	and	r24, r24
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <main+0xda>
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <main+0x158>
		{		
			deal_cmd = Read_CMD_EEPROM();
    2a76:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Read_CMD_EEPROM>
    2a7a:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <deal_cmd+0x1>
    2a7e:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <deal_cmd>
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	9f e7       	ldi	r25, 0x7F	; 127
    2a86:	a3 e4       	ldi	r26, 0x43	; 67
    2a88:	81 50       	subi	r24, 0x01	; 1
    2a8a:	90 40       	sbci	r25, 0x00	; 0
    2a8c:	a0 40       	sbci	r26, 0x00	; 0
    2a8e:	e1 f7       	brne	.-8      	; 0x2a88 <main+0xec>
    2a90:	00 c0       	rjmp	.+0      	; 0x2a92 <main+0xf6>
    2a92:	00 00       	nop
			
			_delay_ms(2000);
		parameter_len = make_parameter(Parameter, status, tds1, tds2,flow_l,Filte_CntV);
    2a94:	00 91 d4 04 	lds	r16, 0x04D4	; 0x8004d4 <flow_l>
    2a98:	10 91 d5 04 	lds	r17, 0x04D5	; 0x8004d5 <flow_l+0x1>
    2a9c:	76 01       	movw	r14, r12
    2a9e:	2c ea       	ldi	r18, 0xAC	; 172
    2aa0:	34 e0       	ldi	r19, 0x04	; 4
    2aa2:	40 eb       	ldi	r20, 0xB0	; 176
    2aa4:	54 e0       	ldi	r21, 0x04	; 4
    2aa6:	68 ea       	ldi	r22, 0xA8	; 168
    2aa8:	74 e0       	ldi	r23, 0x04	; 4
    2aaa:	ce 01       	movw	r24, r28
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <make_parameter>

#if 1
			error = GET_CMD(Parameter,parameter_len);
    2ab2:	68 2f       	mov	r22, r24
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	0e 94 8b 10 	call	0x2116	; 0x2116 <GET_CMD>
#endif
			if ((error && (error != 0xFFFF)))
    2abc:	9c 01       	movw	r18, r24
    2abe:	21 50       	subi	r18, 0x01	; 1
    2ac0:	31 09       	sbc	r19, r1
    2ac2:	2e 3f       	cpi	r18, 0xFE	; 254
    2ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac6:	30 f4       	brcc	.+12     	; 0x2ad4 <main+0x138>
			{
				deal_cmd = error;
    2ac8:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <deal_cmd+0x1>
    2acc:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <deal_cmd>
				//						¹Ø»ú			Í£»ú	       ³åÏ´		    ×âÁÞÊ±¼ä
				//deal_cmd = 0x10 | (0x00 << 12) | (0x01 << 13) | (0x00 << 14) | (0x00 << 15);
				send_flag = 0;
    2ad0:	40 92 d8 04 	sts	0x04D8, r4	; 0x8004d8 <send_flag>
			}
			
			if ((LCD_Ico & 0x01 << 4))//È±Ë®´íÎó
    2ad4:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2ad8:	84 ff       	sbrs	r24, 4
    2ada:	41 c0       	rjmp	.+130    	; 0x2b5e <main+0x1c2>
    2adc:	ef ef       	ldi	r30, 0xFF	; 255
    2ade:	ff eb       	ldi	r31, 0xBF	; 191
    2ae0:	26 e0       	ldi	r18, 0x06	; 6
    2ae2:	e1 50       	subi	r30, 0x01	; 1
    2ae4:	f0 40       	sbci	r31, 0x00	; 0
    2ae6:	20 40       	sbci	r18, 0x00	; 0
    2ae8:	e1 f7       	brne	.-8      	; 0x2ae2 <main+0x146>
    2aea:	00 c0       	rjmp	.+0      	; 0x2aec <main+0x150>
    2aec:	00 00       	nop
			{
				_delay_ms(200);
				error = ERROR_HYDROPENIA();
    2aee:	0e 94 b6 10 	call	0x216c	; 0x216c <ERROR_HYDROPENIA>
    2af2:	35 c0       	rjmp	.+106    	; 0x2b5e <main+0x1c2>
				}
			}				
		}
		else
		{
			if (deal_cmd & 0x01 << 12)//¹Ø»ú
    2af4:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2af8:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2afc:	94 ff       	sbrs	r25, 4
    2afe:	0e c0       	rjmp	.+28     	; 0x2b1c <main+0x180>
			{
				WRITE_ALLRAM_1726(0);
    2b00:	84 2d       	mov	r24, r4
    2b02:	0e 94 a5 0a 	call	0x154a	; 0x154a <WRITE_ALLRAM_1726>
				//HT1721C_BL_0;
				//status[0] &= ~(0x1 << 0);
				
				Write_CMD_EEPROM(deal_cmd);		
    2b06:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2b0a:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2b0e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Write_CMD_EEPROM>
				Write_STATUS_EEPROM(status);
    2b12:	88 ea       	ldi	r24, 0xA8	; 168
    2b14:	94 e0       	ldi	r25, 0x04	; 4
    2b16:	0e 94 33 01 	call	0x266	; 0x266 <Write_STATUS_EEPROM>
				continue;
    2b1a:	93 cf       	rjmp	.-218    	; 0x2a42 <main+0xa6>
			}
			else
			{
				//status[0] |= (0x1 << 0);
			}
			if (deal_cmd & (0x01 << 13))//Í£»ú
    2b1c:	95 ff       	sbrs	r25, 5
    2b1e:	07 c0       	rjmp	.+14     	; 0x2b2e <main+0x192>
			{
				Write_CMD_EEPROM(deal_cmd);		
    2b20:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Write_CMD_EEPROM>
				Write_STATUS_EEPROM(status);
    2b24:	88 ea       	ldi	r24, 0xA8	; 168
    2b26:	94 e0       	ldi	r25, 0x04	; 4
    2b28:	0e 94 33 01 	call	0x266	; 0x266 <Write_STATUS_EEPROM>
				continue;
    2b2c:	8a cf       	rjmp	.-236    	; 0x2a42 <main+0xa6>
			}
			if(deal_cmd & 0x01<<14)
			{
				
			}
			if (deal_cmd & (0x01 << 15))//×âÁÞÊ±¼ä
    2b2e:	99 23       	and	r25, r25
    2b30:	3c f4       	brge	.+14     	; 0x2b40 <main+0x1a4>
			{
				Write_CMD_EEPROM(deal_cmd);		
    2b32:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Write_CMD_EEPROM>
				Write_STATUS_EEPROM(status);
    2b36:	88 ea       	ldi	r24, 0xA8	; 168
    2b38:	94 e0       	ldi	r25, 0x04	; 4
    2b3a:	0e 94 33 01 	call	0x266	; 0x266 <Write_STATUS_EEPROM>
				continue;
    2b3e:	81 cf       	rjmp	.-254    	; 0x2a42 <main+0xa6>
			}
			else
			{
				LCD_Ico |= 0x01;
    2b40:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <LCD_Ico>
    2b44:	21 60       	ori	r18, 0x01	; 1
    2b46:	20 93 a1 04 	sts	0x04A1, r18	; 0x8004a1 <LCD_Ico>
				//	 deal_cmd = 0x0DFE;
				SET_TIME((deal_cmd & 0x0FFF));
    2b4a:	9f 70       	andi	r25, 0x0F	; 15
    2b4c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <SET_TIME>
				Write_TIME_EEPROM((deal_cmd & 0x0FFF));
    2b50:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2b54:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2b58:	9f 70       	andi	r25, 0x0F	; 15
    2b5a:	0e 94 47 01 	call	0x28e	; 0x28e <Write_TIME_EEPROM>

			}

		}
		if (LCD_Ico & (0x01 << 5))//Â©Ë®´íÎó
    2b5e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2b62:	85 ff       	sbrs	r24, 5
    2b64:	0b c0       	rjmp	.+22     	; 0x2b7c <main+0x1e0>
    2b66:	4f ef       	ldi	r20, 0xFF	; 255
    2b68:	8f e1       	ldi	r24, 0x1F	; 31
    2b6a:	9a e0       	ldi	r25, 0x0A	; 10
    2b6c:	41 50       	subi	r20, 0x01	; 1
    2b6e:	80 40       	sbci	r24, 0x00	; 0
    2b70:	90 40       	sbci	r25, 0x00	; 0
    2b72:	e1 f7       	brne	.-8      	; 0x2b6c <main+0x1d0>
    2b74:	00 c0       	rjmp	.+0      	; 0x2b76 <main+0x1da>
    2b76:	00 00       	nop
		{
			_delay_ms(300);
			ERROR_LEAKAGE();
    2b78:	0e 94 db 10 	call	0x21b6	; 0x21b6 <ERROR_LEAKAGE>
		}
		Write_CMD_EEPROM(deal_cmd);		
    2b7c:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <deal_cmd>
    2b80:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <deal_cmd+0x1>
    2b84:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Write_CMD_EEPROM>
		Write_STATUS_EEPROM(status);
    2b88:	88 ea       	ldi	r24, 0xA8	; 168
    2b8a:	94 e0       	ldi	r25, 0x04	; 4
    2b8c:	0e 94 33 01 	call	0x266	; 0x266 <Write_STATUS_EEPROM>
#if 1
		if (Get_time3_Status())//ÔÚÖÆË®¹ý³ÌÖÐ¶ÏµçÎÞ·¨±£´æÊý¾Ý
    2b90:	0e 94 6e 11 	call	0x22dc	; 0x22dc <Get_time3_Status>
    2b94:	81 11       	cpse	r24, r1
    2b96:	54 cf       	rjmp	.-344    	; 0x2a40 <main+0xa4>
		{
			eeprom_write_flag = 1;
			//LEDON;
		}
		else if (eeprom_write_flag)
    2b98:	55 20       	and	r5, r5
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <main+0x202>
    2b9c:	52 cf       	rjmp	.-348    	; 0x2a42 <main+0xa6>
		{
			Write_YU_SUM_EEPROM(flow_y);
    2b9e:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <flow_y>
    2ba2:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <flow_y+0x1>
    2ba6:	0e 94 32 02 	call	0x464	; 0x464 <Write_YU_SUM_EEPROM>
			//sum_flow = 23;
			Write_FLOW_EEPROM(flow_l);//×ÜÁ÷Á¿£¨L£©
    2baa:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <flow_l>
    2bae:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <flow_l+0x1>
    2bb2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Write_FLOW_EEPROM>

			Write_PURE_EEPROM(tds1);
    2bb6:	80 eb       	ldi	r24, 0xB0	; 176
    2bb8:	94 e0       	ldi	r25, 0x04	; 4
    2bba:	0e 94 c1 01 	call	0x382	; 0x382 <Write_PURE_EEPROM>
			Write_RAW_EEPROM(tds2);
    2bbe:	8c ea       	ldi	r24, 0xAC	; 172
    2bc0:	94 e0       	ldi	r25, 0x04	; 4
    2bc2:	0e 94 ad 01 	call	0x35a	; 0x35a <Write_RAW_EEPROM>
			Write_VIUV_TIME_EEPROM(sum_viuv_time);//Ò»´ÎÖÆË®»¹Ã»ÓÐ³åÏ´µÄÊ±¼ä(·ÖÖÓ)
    2bc6:	d3 01       	movw	r26, r6
    2bc8:	8c 91       	ld	r24, X
    2bca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Write_VIUV_TIME_EEPROM>

			memset(Filte_CntV, 0, 2 * Filte_num);
    2bce:	f6 01       	movw	r30, r12
    2bd0:	22 2d       	mov	r18, r2
    2bd2:	11 92       	st	Z+, r1
    2bd4:	2a 95       	dec	r18
    2bd6:	e9 f7       	brne	.-6      	; 0x2bd2 <main+0x236>
			for (unsigned char i = 0; i < Filte_num; i++)
			{
				Filte_CntV[2 * i] += flow_l << 8;
				Filte_CntV[2 * i + 1] += flow_l;
    2bd8:	d4 01       	movw	r26, r8
    2bda:	4c 91       	ld	r20, X
    2bdc:	ec eb       	ldi	r30, 0xBC	; 188
    2bde:	f4 e0       	ldi	r31, 0x04	; 4
    2be0:	aa e9       	ldi	r26, 0x9A	; 154
    2be2:	b1 e0       	ldi	r27, 0x01	; 1
    2be4:	81 81       	ldd	r24, Z+1	; 0x01
    2be6:	84 0f       	add	r24, r20
    2be8:	81 83       	std	Z+1, r24	; 0x01
				//¼ì²âÂËÐ¾ÊÙÃüÊÇ·ñµ½ÆÚ
				if (((Filte_CntV[2 * i] << 8) | Filte_CntV[2 * i + 1]) > ((Iint_Filte_CntV[2 * i] << 8) | Iint_Filte_CntV[2 * i + 1]))
    2bea:	20 81       	ld	r18, Z
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	92 2b       	or	r25, r18
    2bf0:	2c 91       	ld	r18, X
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	32 2f       	mov	r19, r18
    2bf6:	22 27       	eor	r18, r18
    2bf8:	11 96       	adiw	r26, 0x01	; 1
    2bfa:	5c 91       	ld	r21, X
    2bfc:	11 97       	sbiw	r26, 0x01	; 1
    2bfe:	25 2b       	or	r18, r21
    2c00:	28 17       	cp	r18, r24
    2c02:	39 07       	cpc	r19, r25
    2c04:	14 f4       	brge	.+4      	; 0x2c0a <main+0x26e>
				{
					Filte_CntV[2 * i] = 0;
    2c06:	10 82       	st	Z, r1
					Filte_CntV[2 * i + 1] = 0;
    2c08:	11 82       	std	Z+1, r1	; 0x01
    2c0a:	32 96       	adiw	r30, 0x02	; 2
    2c0c:	12 96       	adiw	r26, 0x02	; 2
			Write_PURE_EEPROM(tds1);
			Write_RAW_EEPROM(tds2);
			Write_VIUV_TIME_EEPROM(sum_viuv_time);//Ò»´ÎÖÆË®»¹Ã»ÓÐ³åÏ´µÄÊ±¼ä(·ÖÖÓ)

			memset(Filte_CntV, 0, 2 * Filte_num);
			for (unsigned char i = 0; i < Filte_num; i++)
    2c0e:	ea 15       	cp	r30, r10
    2c10:	fb 05       	cpc	r31, r11
    2c12:	41 f7       	brne	.-48     	; 0x2be4 <main+0x248>
				{
					Filte_CntV[2 * i] = 0;
					Filte_CntV[2 * i + 1] = 0;
				}
			}
			Write_Filte_CntV_EEPROM(Filte_CntV);
    2c14:	c6 01       	movw	r24, r12
    2c16:	0e 94 b2 02 	call	0x564	; 0x564 <Write_Filte_CntV_EEPROM>
			
			SET_FLOW_L(flow_l);
    2c1a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <flow_l>
    2c1e:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <flow_l+0x1>
    2c22:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <SET_FLOW_L>
			Write_Init_EEPROM();
    2c26:	0e 94 03 01 	call	0x206	; 0x206 <Write_Init_EEPROM>
			eeprom_write_flag = 0;
    2c2a:	54 2c       	mov	r5, r4
    2c2c:	0a cf       	rjmp	.-492    	; 0x2a42 <main+0xa6>

00002c2e <__vector_18>:
	while(n--)
	{
		*(Data++)=USART1_Receive();
	}	
	return Data;
}
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	0f 90       	pop	r0
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	0f 90       	pop	r0
    2c3e:	1f 90       	pop	r1
    2c40:	18 95       	reti

00002c42 <__vector_20>:
    2c42:	1f 92       	push	r1
    2c44:	0f 92       	push	r0
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	0f 92       	push	r0
    2c4a:	11 24       	eor	r1, r1
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <USART1_Init>:
    2c56:	8b 9a       	sbi	0x11, 3	; 17
    2c58:	8a 98       	cbi	0x11, 2	; 17
    2c5a:	82 b3       	in	r24, 0x12	; 18
    2c5c:	82 bb       	out	0x12, r24	; 18
    2c5e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2c62:	aa e9       	ldi	r26, 0x9A	; 154
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	1c 92       	st	X, r1
    2c68:	ed e9       	ldi	r30, 0x9D	; 157
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	10 82       	st	Z, r1
    2c6e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2c72:	85 e0       	ldi	r24, 0x05	; 5
    2c74:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2c78:	8c 91       	ld	r24, X
    2c7a:	88 6d       	ori	r24, 0xD8	; 216
    2c7c:	8c 93       	st	X, r24
    2c7e:	80 81       	ld	r24, Z
    2c80:	86 60       	ori	r24, 0x06	; 6
    2c82:	80 83       	st	Z, r24
    2c84:	08 95       	ret

00002c86 <USART1_Transmit>:
    2c86:	eb e9       	ldi	r30, 0x9B	; 155
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	90 81       	ld	r25, Z
    2c8c:	95 ff       	sbrs	r25, 5
    2c8e:	fd cf       	rjmp	.-6      	; 0x2c8a <USART1_Transmit+0x4>
    2c90:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    2c94:	08 95       	ret

00002c96 <USART1_Transmit_String>:
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	80 81       	ld	r24, Z
    2ca0:	88 23       	and	r24, r24
    2ca2:	59 f0       	breq	.+22     	; 0x2cba <USART1_Transmit_String+0x24>
    2ca4:	8f 01       	movw	r16, r30
    2ca6:	c0 e0       	ldi	r28, 0x00	; 0
    2ca8:	0e 94 43 16 	call	0x2c86	; 0x2c86 <USART1_Transmit>
    2cac:	cf 5f       	subi	r28, 0xFF	; 255
    2cae:	f8 01       	movw	r30, r16
    2cb0:	ec 0f       	add	r30, r28
    2cb2:	f1 1d       	adc	r31, r1
    2cb4:	80 81       	ld	r24, Z
    2cb6:	81 11       	cpse	r24, r1
    2cb8:	f7 cf       	rjmp	.-18     	; 0x2ca8 <USART1_Transmit_String+0x12>
    2cba:	cf 91       	pop	r28
    2cbc:	1f 91       	pop	r17
    2cbe:	0f 91       	pop	r16
    2cc0:	08 95       	ret

00002cc2 <USART1_Transmit_nChar>:
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	4f ef       	ldi	r20, 0xFF	; 255
    2ccc:	46 0f       	add	r20, r22
    2cce:	66 23       	and	r22, r22
    2cd0:	69 f0       	breq	.+26     	; 0x2cec <USART1_Transmit_nChar+0x2a>
    2cd2:	ec 01       	movw	r28, r24
    2cd4:	04 2f       	mov	r16, r20
    2cd6:	10 e0       	ldi	r17, 0x00	; 0
    2cd8:	0f 5f       	subi	r16, 0xFF	; 255
    2cda:	1f 4f       	sbci	r17, 0xFF	; 255
    2cdc:	08 0f       	add	r16, r24
    2cde:	19 1f       	adc	r17, r25
    2ce0:	89 91       	ld	r24, Y+
    2ce2:	0e 94 43 16 	call	0x2c86	; 0x2c86 <USART1_Transmit>
    2ce6:	c0 17       	cp	r28, r16
    2ce8:	d1 07       	cpc	r29, r17
    2cea:	d1 f7       	brne	.-12     	; 0x2ce0 <USART1_Transmit_nChar+0x1e>
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <USART1_Receive>:
    2cf6:	eb e9       	ldi	r30, 0x9B	; 155
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 23       	and	r24, r24
    2cfe:	ec f7       	brge	.-6      	; 0x2cfa <USART1_Receive+0x4>
    2d00:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    2d04:	08 95       	ret

00002d06 <__vector_30>:
unsigned char GPRS_Receive_Type = 0;//Êý¾ÝµÄÀàÐÍATÖ¸Áî£¬´íÎóÐÅÏ¢£¬OkÐÅÏ¢£¬Êý¾ÝÐÅÏ¢
unsigned int GPRS_Receive_Flag = 1;//0µÄÊ±ºò¿ÉÒÔ²Ù×÷Êý¾Ý£¬1µÄÊ±ºò²»¿ÉÒÔ²Ù×÷Êý¾Ý
unsigned char gprs_flag = 0xFF;

SIGNAL(USART1_RX_vect)
{
    2d06:	1f 92       	push	r1
    2d08:	0f 92       	push	r0
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	0f 92       	push	r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	2f 93       	push	r18
    2d12:	3f 93       	push	r19
    2d14:	4f 93       	push	r20
    2d16:	5f 93       	push	r21
    2d18:	6f 93       	push	r22
    2d1a:	7f 93       	push	r23
    2d1c:	8f 93       	push	r24
    2d1e:	9f 93       	push	r25
    2d20:	af 93       	push	r26
    2d22:	bf 93       	push	r27
    2d24:	ef 93       	push	r30
    2d26:	ff 93       	push	r31
	//GPRS_Receive_Flag = 0;
	unsigned char tmp =  USART1_Receive();
    2d28:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <USART1_Receive>
#ifdef Usart0
	USART0_Transmit(tmp);
#endif 
	if(!GPRS_Receive_Num)
    2d2c:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <GPRS_Receive_Num>
    2d30:	91 11       	cpse	r25, r1
    2d32:	0b c0       	rjmp	.+22     	; 0x2d4a <__vector_30+0x44>
	{
		if(tmp == '>')
    2d34:	8e 33       	cpi	r24, 0x3E	; 62
    2d36:	49 f4       	brne	.+18     	; 0x2d4a <__vector_30+0x44>
			GPRS_Receive_Flag |= 1<<3;	
    2d38:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2d3c:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2d40:	28 60       	ori	r18, 0x08	; 8
    2d42:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2d46:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <GPRS_Receive_Flag>
	}
	GPRS_Receive[GPRS_Receive_Num] = tmp ;
    2d4a:	e9 2f       	mov	r30, r25
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	ec 5f       	subi	r30, 0xFC	; 252
    2d50:	fa 4f       	sbci	r31, 0xFA	; 250
    2d52:	80 83       	st	Z, r24
//	USART0_Transmit(GPRS_Receive[GPRS_Receive_Num]);
	GPRS_Receive_Num ++;
    2d54:	9f 5f       	subi	r25, 0xFF	; 255
    2d56:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <GPRS_Receive_Num>
#if 1
	 if(GPRS_Receive[GPRS_Receive_Num-1] == '\n')
    2d5a:	89 2f       	mov	r24, r25
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	fc 01       	movw	r30, r24
    2d60:	ed 5f       	subi	r30, 0xFD	; 253
    2d62:	fa 4f       	sbci	r31, 0xFA	; 250
    2d64:	20 81       	ld	r18, Z
    2d66:	2a 30       	cpi	r18, 0x0A	; 10
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <__vector_30+0x66>
    2d6a:	18 c1       	rjmp	.+560    	; 0x2f9c <__vector_30+0x296>
	{
		GPRS_Receive[GPRS_Receive_Num] = '\0';
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	ec 5f       	subi	r30, 0xFC	; 252
    2d70:	fa 4f       	sbci	r31, 0xFA	; 250
    2d72:	10 82       	st	Z, r1

		GPRS_Receive_Num = 0;
    2d74:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <GPRS_Receive_Num>
		
		if(strstr(GPRS_Receive,"+CME ERROR:"))
    2d78:	6a ef       	ldi	r22, 0xFA	; 250
    2d7a:	73 e0       	ldi	r23, 0x03	; 3
    2d7c:	84 e0       	ldi	r24, 0x04	; 4
    2d7e:	95 e0       	ldi	r25, 0x05	; 5
    2d80:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2d84:	89 2b       	or	r24, r25
    2d86:	49 f0       	breq	.+18     	; 0x2d9a <__vector_30+0x94>
		{
			//LEDON;
			//LCD_Ico &= ~(0x01 << 7);
			GPRS_Receive_Flag |= 1<<1;
    2d88:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2d8c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2d90:	82 60       	ori	r24, 0x02	; 2
    2d92:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2d96:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
		}
		if(strstr(GPRS_Receive,"+CIPRCV:"))
    2d9a:	66 e0       	ldi	r22, 0x06	; 6
    2d9c:	74 e0       	ldi	r23, 0x04	; 4
    2d9e:	84 e0       	ldi	r24, 0x04	; 4
    2da0:	95 e0       	ldi	r25, 0x05	; 5
    2da2:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2da6:	89 2b       	or	r24, r25
    2da8:	49 f0       	breq	.+18     	; 0x2dbc <__vector_30+0xb6>
			GPRS_Receive_Flag |= 1<<2;
    2daa:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2dae:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2db2:	84 60       	ori	r24, 0x04	; 4
    2db4:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2db8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
		if(strstr(GPRS_Receive,"OK"))
    2dbc:	6e e7       	ldi	r22, 0x7E	; 126
    2dbe:	74 e0       	ldi	r23, 0x04	; 4
    2dc0:	84 e0       	ldi	r24, 0x04	; 4
    2dc2:	95 e0       	ldi	r25, 0x05	; 5
    2dc4:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2dc8:	89 2b       	or	r24, r25
    2dca:	49 f0       	breq	.+18     	; 0x2dde <__vector_30+0xd8>
		{
			GPRS_Receive_Flag |= 1<<4;
    2dcc:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2dd0:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2dd4:	80 61       	ori	r24, 0x10	; 16
    2dd6:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2dda:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
		//	LCD_Ico |= 0x01 << 7;
			
		}
			
		if(GPRS_Receive[0] == 0 || strstr(GPRS_Receive,"Waiting ..."))
    2dde:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <GPRS_Receive>
    2de2:	88 23       	and	r24, r24
    2de4:	41 f0       	breq	.+16     	; 0x2df6 <__vector_30+0xf0>
    2de6:	6f e0       	ldi	r22, 0x0F	; 15
    2de8:	74 e0       	ldi	r23, 0x04	; 4
    2dea:	84 e0       	ldi	r24, 0x04	; 4
    2dec:	95 e0       	ldi	r25, 0x05	; 5
    2dee:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2df2:	89 2b       	or	r24, r25
    2df4:	89 f0       	breq	.+34     	; 0x2e18 <__vector_30+0x112>
		{
			GPRS_Receive_Flag |= 1<< 5;
    2df6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2dfa:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2dfe:	80 62       	ori	r24, 0x20	; 32
    2e00:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2e04:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
			LCD_Ico &= ~(0x01 << 7);
    2e08:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
			gprs_flag = 0xFF;
    2e12:	8f ef       	ldi	r24, 0xFF	; 255
    2e14:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <gprs_flag>
			//LEDON;
		}
		if(strstr(GPRS_Receive,"+CIEV: READY"))
    2e18:	6b e1       	ldi	r22, 0x1B	; 27
    2e1a:	74 e0       	ldi	r23, 0x04	; 4
    2e1c:	84 e0       	ldi	r24, 0x04	; 4
    2e1e:	95 e0       	ldi	r25, 0x05	; 5
    2e20:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2e24:	89 2b       	or	r24, r25
    2e26:	89 f0       	breq	.+34     	; 0x2e4a <__vector_30+0x144>
		{
			GPRS_Receive_Flag |= 1<<6;
    2e28:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2e2c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2e30:	9c 01       	movw	r18, r24
    2e32:	20 64       	ori	r18, 0x40	; 64
    2e34:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2e38:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <GPRS_Receive_Flag>
			if(!(GPRS_Receive_Flag & (0x01<<8)))
    2e3c:	90 fd       	sbrc	r25, 0
    2e3e:	05 c0       	rjmp	.+10     	; 0x2e4a <__vector_30+0x144>
				LCD_Ico &= ~(0x01 << 7);
    2e40:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2e44:	8f 77       	andi	r24, 0x7F	; 127
    2e46:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
			//LEDOFF;
		}
		if( strstr(GPRS_Receive,"+CME ERROR:50"))
    2e4a:	68 e2       	ldi	r22, 0x28	; 40
    2e4c:	74 e0       	ldi	r23, 0x04	; 4
    2e4e:	84 e0       	ldi	r24, 0x04	; 4
    2e50:	95 e0       	ldi	r25, 0x05	; 5
    2e52:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2e56:	89 2b       	or	r24, r25
    2e58:	29 f0       	breq	.+10     	; 0x2e64 <__vector_30+0x15e>
		{
				LCD_Ico &= ~(0x01 << 7);
    2e5a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2e5e:	8f 77       	andi	r24, 0x7F	; 127
    2e60:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
		}
		if(strstr(GPRS_Receive,"+CTZV:"))
    2e64:	66 e3       	ldi	r22, 0x36	; 54
    2e66:	74 e0       	ldi	r23, 0x04	; 4
    2e68:	84 e0       	ldi	r24, 0x04	; 4
    2e6a:	95 e0       	ldi	r25, 0x05	; 5
    2e6c:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2e70:	89 2b       	or	r24, r25
    2e72:	29 f0       	breq	.+10     	; 0x2e7e <__vector_30+0x178>
		{
				LCD_Ico &= ~(0x01 << 7);			
    2e74:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2e78:	8f 77       	andi	r24, 0x7F	; 127
    2e7a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
		}

		if(strstr(GPRS_Receive,"+CME ERROR:148"))
    2e7e:	6d e3       	ldi	r22, 0x3D	; 61
    2e80:	74 e0       	ldi	r23, 0x04	; 4
    2e82:	84 e0       	ldi	r24, 0x04	; 4
    2e84:	95 e0       	ldi	r25, 0x05	; 5
    2e86:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2e8a:	89 2b       	or	r24, r25
    2e8c:	49 f0       	breq	.+18     	; 0x2ea0 <__vector_30+0x19a>
		{
			//LEDON;
			GPRS_Receive_Flag |= 1<<1;
    2e8e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2e92:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2e96:	82 60       	ori	r24, 0x02	; 2
    2e98:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2e9c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
			
				//LCD_Ico &= ~(0x01 << 7);			
		}
		if(strstr(GPRS_Receive,"+CGATT:1"))
    2ea0:	6c e4       	ldi	r22, 0x4C	; 76
    2ea2:	74 e0       	ldi	r23, 0x04	; 4
    2ea4:	84 e0       	ldi	r24, 0x04	; 4
    2ea6:	95 e0       	ldi	r25, 0x05	; 5
    2ea8:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2eac:	89 2b       	or	r24, r25
    2eae:	29 f0       	breq	.+10     	; 0x2eba <__vector_30+0x1b4>
		{
			//LEDRUN;
			LCD_Ico |= 0x01 << 7;
    2eb0:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2eb4:	80 68       	ori	r24, 0x80	; 128
    2eb6:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
		//	gprs_flag  &= ~(0x01<<3);
		
			//LEDON;
		}
		if( strstr(GPRS_Receive,"+CME ERROR:58"))
    2eba:	65 e5       	ldi	r22, 0x55	; 85
    2ebc:	74 e0       	ldi	r23, 0x04	; 4
    2ebe:	84 e0       	ldi	r24, 0x04	; 4
    2ec0:	95 e0       	ldi	r25, 0x05	; 5
    2ec2:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2ec6:	89 2b       	or	r24, r25
    2ec8:	71 f0       	breq	.+28     	; 0x2ee6 <__vector_30+0x1e0>
		{
				LCD_Ico &= ~(0x01 << 7);
    2eca:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2ece:	8f 77       	andi	r24, 0x7F	; 127
    2ed0:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
				GPRS_Receive_Flag |= 1<<9;
    2ed4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2ed8:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2edc:	92 60       	ori	r25, 0x02	; 2
    2ede:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2ee2:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
		}
		
		if(strstr(GPRS_Receive,"+CIEV: service,  1"))
    2ee6:	63 e6       	ldi	r22, 0x63	; 99
    2ee8:	74 e0       	ldi	r23, 0x04	; 4
    2eea:	84 e0       	ldi	r24, 0x04	; 4
    2eec:	95 e0       	ldi	r25, 0x05	; 5
    2eee:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2ef2:	89 2b       	or	r24, r25
    2ef4:	79 f0       	breq	.+30     	; 0x2f14 <__vector_30+0x20e>
		{
			LCD_Ico |= 0x01 << 7;
    2ef6:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2efa:	80 68       	ori	r24, 0x80	; 128
    2efc:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
			GPRS_Receive_Flag |= 1<<8;
			GPRS_Receive_Flag |= 1<<7;			
    2f00:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2f04:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2f08:	80 68       	ori	r24, 0x80	; 128
    2f0a:	91 60       	ori	r25, 0x01	; 1
    2f0c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2f10:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
			//LEDON;
		}
		if(strstr(GPRS_Receive,"CONNECT OK"))
    2f14:	66 e7       	ldi	r22, 0x76	; 118
    2f16:	74 e0       	ldi	r23, 0x04	; 4
    2f18:	84 e0       	ldi	r24, 0x04	; 4
    2f1a:	95 e0       	ldi	r25, 0x05	; 5
    2f1c:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2f20:	89 2b       	or	r24, r25
    2f22:	71 f0       	breq	.+28     	; 0x2f40 <__vector_30+0x23a>
		{
			LCD_Ico |= 0x01 << 7;
    2f24:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2f28:	80 68       	ori	r24, 0x80	; 128
    2f2a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
			GPRS_Receive_Flag |= 1<<7;
    2f2e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <GPRS_Receive_Flag>
    2f32:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2f36:	80 68       	ori	r24, 0x80	; 128
    2f38:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <GPRS_Receive_Flag+0x1>
    2f3c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <GPRS_Receive_Flag>
			//LEDON;
		}
		if(strstr(GPRS_Receive,"+CCID:"))
    2f40:	61 e8       	ldi	r22, 0x81	; 129
    2f42:	74 e0       	ldi	r23, 0x04	; 4
    2f44:	84 e0       	ldi	r24, 0x04	; 4
    2f46:	95 e0       	ldi	r25, 0x05	; 5
    2f48:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2f4c:	89 2b       	or	r24, r25
    2f4e:	29 f0       	breq	.+10     	; 0x2f5a <__vector_30+0x254>
		{
			LCD_Ico |= 0x01 << 6;
    2f50:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2f54:	80 64       	ori	r24, 0x40	; 64
    2f56:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
		}
		if(strstr(GPRS_Receive,"+CSQ:"))
    2f5a:	68 e8       	ldi	r22, 0x88	; 136
    2f5c:	74 e0       	ldi	r23, 0x04	; 4
    2f5e:	84 e0       	ldi	r24, 0x04	; 4
    2f60:	95 e0       	ldi	r25, 0x05	; 5
    2f62:	0e 94 2a 18 	call	0x3054	; 0x3054 <strstr>
    2f66:	89 2b       	or	r24, r25
    2f68:	c9 f0       	breq	.+50     	; 0x2f9c <__vector_30+0x296>
		{		
			SCQ = ((GPRS_Receive[6]-0x30)*10+ GPRS_Receive[7] - 0x30);
    2f6a:	e4 e0       	ldi	r30, 0x04	; 4
    2f6c:	f5 e0       	ldi	r31, 0x05	; 5
    2f6e:	86 81       	ldd	r24, Z+6	; 0x06
    2f70:	88 0f       	add	r24, r24
    2f72:	80 56       	subi	r24, 0x60	; 96
    2f74:	98 2f       	mov	r25, r24
    2f76:	99 0f       	add	r25, r25
    2f78:	99 0f       	add	r25, r25
    2f7a:	89 0f       	add	r24, r25
    2f7c:	97 81       	ldd	r25, Z+7	; 0x07
    2f7e:	90 53       	subi	r25, 0x30	; 48
    2f80:	89 0f       	add	r24, r25
    2f82:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <SCQ>
			if(SCQ)
    2f86:	88 23       	and	r24, r24
    2f88:	31 f0       	breq	.+12     	; 0x2f96 <__vector_30+0x290>
				LCD_Ico |= 0x01 << 7;
    2f8a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <LCD_Ico>
    2f8e:	80 68       	ori	r24, 0x80	; 128
    2f90:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <LCD_Ico>
    2f94:	03 c0       	rjmp	.+6      	; 0x2f9c <__vector_30+0x296>
			else
				gprs_flag = 0xFF;
    2f96:	8f ef       	ldi	r24, 0xFF	; 255
    2f98:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <gprs_flag>

	}

#endif
	//GPRS_Receive_Flag = 0;
}
    2f9c:	ff 91       	pop	r31
    2f9e:	ef 91       	pop	r30
    2fa0:	bf 91       	pop	r27
    2fa2:	af 91       	pop	r26
    2fa4:	9f 91       	pop	r25
    2fa6:	8f 91       	pop	r24
    2fa8:	7f 91       	pop	r23
    2faa:	6f 91       	pop	r22
    2fac:	5f 91       	pop	r21
    2fae:	4f 91       	pop	r20
    2fb0:	3f 91       	pop	r19
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	0f 90       	pop	r0
    2fba:	1f 90       	pop	r1
    2fbc:	18 95       	reti

00002fbe <__vector_32>:

SIGNAL(USART1_TX_vect)
{
    2fbe:	1f 92       	push	r1
    2fc0:	0f 92       	push	r0
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	0f 92       	push	r0
    2fc6:	11 24       	eor	r1, r1
	//USART0_Transmit_String("send GPRS cmd:");
	//USART0_Transmit(tmp);
	//BEEP(20);
}
    2fc8:	0f 90       	pop	r0
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	0f 90       	pop	r0
    2fce:	1f 90       	pop	r1
    2fd0:	18 95       	reti

00002fd2 <__udivmodhi4>:
    2fd2:	aa 1b       	sub	r26, r26
    2fd4:	bb 1b       	sub	r27, r27
    2fd6:	51 e1       	ldi	r21, 0x11	; 17
    2fd8:	07 c0       	rjmp	.+14     	; 0x2fe8 <__udivmodhi4_ep>

00002fda <__udivmodhi4_loop>:
    2fda:	aa 1f       	adc	r26, r26
    2fdc:	bb 1f       	adc	r27, r27
    2fde:	a6 17       	cp	r26, r22
    2fe0:	b7 07       	cpc	r27, r23
    2fe2:	10 f0       	brcs	.+4      	; 0x2fe8 <__udivmodhi4_ep>
    2fe4:	a6 1b       	sub	r26, r22
    2fe6:	b7 0b       	sbc	r27, r23

00002fe8 <__udivmodhi4_ep>:
    2fe8:	88 1f       	adc	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	5a 95       	dec	r21
    2fee:	a9 f7       	brne	.-22     	; 0x2fda <__udivmodhi4_loop>
    2ff0:	80 95       	com	r24
    2ff2:	90 95       	com	r25
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	08 95       	ret

00002ffa <__umulhisi3>:
    2ffa:	a2 9f       	mul	r26, r18
    2ffc:	b0 01       	movw	r22, r0
    2ffe:	b3 9f       	mul	r27, r19
    3000:	c0 01       	movw	r24, r0
    3002:	a3 9f       	mul	r26, r19
    3004:	70 0d       	add	r23, r0
    3006:	81 1d       	adc	r24, r1
    3008:	11 24       	eor	r1, r1
    300a:	91 1d       	adc	r25, r1
    300c:	b2 9f       	mul	r27, r18
    300e:	70 0d       	add	r23, r0
    3010:	81 1d       	adc	r24, r1
    3012:	11 24       	eor	r1, r1
    3014:	91 1d       	adc	r25, r1
    3016:	08 95       	ret

00003018 <atoi>:
    3018:	fc 01       	movw	r30, r24
    301a:	88 27       	eor	r24, r24
    301c:	99 27       	eor	r25, r25
    301e:	e8 94       	clt
    3020:	21 91       	ld	r18, Z+
    3022:	20 32       	cpi	r18, 0x20	; 32
    3024:	e9 f3       	breq	.-6      	; 0x3020 <atoi+0x8>
    3026:	29 30       	cpi	r18, 0x09	; 9
    3028:	10 f0       	brcs	.+4      	; 0x302e <atoi+0x16>
    302a:	2e 30       	cpi	r18, 0x0E	; 14
    302c:	c8 f3       	brcs	.-14     	; 0x3020 <atoi+0x8>
    302e:	2b 32       	cpi	r18, 0x2B	; 43
    3030:	41 f0       	breq	.+16     	; 0x3042 <atoi+0x2a>
    3032:	2d 32       	cpi	r18, 0x2D	; 45
    3034:	39 f4       	brne	.+14     	; 0x3044 <atoi+0x2c>
    3036:	68 94       	set
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <atoi+0x2a>
    303a:	0e 94 44 18 	call	0x3088	; 0x3088 <__mulhi_const_10>
    303e:	82 0f       	add	r24, r18
    3040:	91 1d       	adc	r25, r1
    3042:	21 91       	ld	r18, Z+
    3044:	20 53       	subi	r18, 0x30	; 48
    3046:	2a 30       	cpi	r18, 0x0A	; 10
    3048:	c0 f3       	brcs	.-16     	; 0x303a <atoi+0x22>
    304a:	1e f4       	brtc	.+6      	; 0x3052 <atoi+0x3a>
    304c:	90 95       	com	r25
    304e:	81 95       	neg	r24
    3050:	9f 4f       	sbci	r25, 0xFF	; 255
    3052:	08 95       	ret

00003054 <strstr>:
    3054:	fb 01       	movw	r30, r22
    3056:	51 91       	ld	r21, Z+
    3058:	55 23       	and	r21, r21
    305a:	a9 f0       	breq	.+42     	; 0x3086 <strstr+0x32>
    305c:	bf 01       	movw	r22, r30
    305e:	dc 01       	movw	r26, r24
    3060:	4d 91       	ld	r20, X+
    3062:	45 17       	cp	r20, r21
    3064:	41 11       	cpse	r20, r1
    3066:	e1 f7       	brne	.-8      	; 0x3060 <strstr+0xc>
    3068:	59 f4       	brne	.+22     	; 0x3080 <strstr+0x2c>
    306a:	cd 01       	movw	r24, r26
    306c:	01 90       	ld	r0, Z+
    306e:	00 20       	and	r0, r0
    3070:	49 f0       	breq	.+18     	; 0x3084 <strstr+0x30>
    3072:	4d 91       	ld	r20, X+
    3074:	40 15       	cp	r20, r0
    3076:	41 11       	cpse	r20, r1
    3078:	c9 f3       	breq	.-14     	; 0x306c <strstr+0x18>
    307a:	fb 01       	movw	r30, r22
    307c:	41 11       	cpse	r20, r1
    307e:	ef cf       	rjmp	.-34     	; 0x305e <strstr+0xa>
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	08 95       	ret

00003088 <__mulhi_const_10>:
    3088:	7a e0       	ldi	r23, 0x0A	; 10
    308a:	97 9f       	mul	r25, r23
    308c:	90 2d       	mov	r25, r0
    308e:	87 9f       	mul	r24, r23
    3090:	80 2d       	mov	r24, r0
    3092:	91 0d       	add	r25, r1
    3094:	11 24       	eor	r1, r1
    3096:	08 95       	ret

00003098 <_exit>:
    3098:	f8 94       	cli

0000309a <__stop_program>:
    309a:	ff cf       	rjmp	.-2      	; 0x309a <__stop_program>
