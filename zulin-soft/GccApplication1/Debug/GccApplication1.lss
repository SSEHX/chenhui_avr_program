
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  000031ae  00003242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000211  008003da  008003da  0000351c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00003c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000383f  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000346  00000000  00000000  000075af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121a  00000000  00000000  000078f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00008b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086c  00000000  00000000  00008fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003443  00000000  00000000  0000982c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000cc6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_30>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ea       	ldi	r30, 0xAE	; 174
      a0:	f1 e3       	ldi	r31, 0x31	; 49
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	aa 3d       	cpi	r26, 0xDA	; 218
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	15 e0       	ldi	r17, 0x05	; 5
      b0:	aa ed       	ldi	r26, 0xDA	; 218
      b2:	b3 e0       	ldi	r27, 0x03	; 3
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ab 3e       	cpi	r26, 0xEB	; 235
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 63 09 	call	0x12c6	; 0x12c6 <main>
      c2:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <port_init>:
void WRITE_ALLRAM_1726(unsigned char F_RAM1632_SET);
void send_filter(void);
//-------------------------------------------------------
void port_init(void) //DDR 1-OUT,0-IN 
	 {
	  PORTC=0x01;
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	85 bb       	out	0x15, r24	; 21
	  DDRC=0xbf;//输入      
      ce:	8f eb       	ldi	r24, 0xBF	; 191
      d0:	84 bb       	out	0x14, r24	; 20
	  DDRE=0xfe;
      d2:	8e ef       	ldi	r24, 0xFE	; 254
      d4:	82 b9       	out	0x02, r24	; 2
	  PORTE=0xc4;
      d6:	84 ec       	ldi	r24, 0xC4	; 196
      d8:	83 b9       	out	0x03, r24	; 3
	  PORTD=0xf3;  //6,7为T1,T2.  c3
      da:	83 ef       	ldi	r24, 0xF3	; 243
      dc:	82 bb       	out	0x12, r24	; 18
	  DDRD|=(1<<PD3)|0x03|0x30; //串口输出,TWI端口PD3--com1  0x03--iic   0x30--TDS
      de:	91 b3       	in	r25, 0x11	; 17
      e0:	9b 63       	ori	r25, 0x3B	; 59
      e2:	91 bb       	out	0x11, r25	; 17
	  PORTF=0x00;//PINF
      e4:	10 92 62 00 	sts	0x0062, r1
	  DDRF=0x00;
      e8:	10 92 61 00 	sts	0x0061, r1
	  
	  PORTA=0xf3;//输出低电平 1c
      ec:	8b bb       	out	0x1b, r24	; 27
	  DDRA=0xef;//输出
      ee:	8f ee       	ldi	r24, 0xEF	; 239
      f0:	8a bb       	out	0x1a, r24	; 26
	  DDRB=0x3f;//输入触摸按钮
      f2:	8f e3       	ldi	r24, 0x3F	; 63
      f4:	87 bb       	out	0x17, r24	; 23
	  PORTB=0xf4;
      f6:	84 ef       	ldi	r24, 0xF4	; 244
      f8:	88 bb       	out	0x18, r24	; 24
	  PORTG=0x03;
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	80 93 65 00 	sts	0x0065, r24
	  DDRG=0x08;
     100:	88 e0       	ldi	r24, 0x08	; 8
     102:	80 93 64 00 	sts	0x0064, r24
	 }
     106:	08 95       	ret

00000108 <putchar0>:
//------串口0发生数据--------
void putchar0(unsigned char data1)
{while(!(UCSR0A&(1<<UDRE0)));
     108:	5d 9b       	sbis	0x0b, 5	; 11
     10a:	fe cf       	rjmp	.-4      	; 0x108 <putchar0>
	UDR0=data1;
     10c:	8c b9       	out	0x0c, r24	; 12
}
     10e:	08 95       	ret

00000110 <putchar1>:
//------串口1发送数据--------
void putchar1(unsigned char data1)
	{while(!(UCSR1A&(1<<UDRE1)));
     110:	eb e9       	ldi	r30, 0x9B	; 155
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	90 81       	ld	r25, Z
     116:	95 ff       	sbrs	r25, 5
     118:	fd cf       	rjmp	.-6      	; 0x114 <putchar1+0x4>
		UDR1=data1;
     11a:	80 93 9c 00 	sts	0x009C, r24
	}
     11e:	08 95       	ret

00000120 <uart0_init>:
//--------------------
//------串口0初始化--------
//波特率9600 8，N,1
//-------------------------
void uart0_init(void)
	 {UCSR0B=0x00;
     120:	1a b8       	out	0x0a, r1	; 10
	  UCSR0A=0x00;
     122:	1b b8       	out	0x0b, r1	; 11
	  UCSR0C=0x06;
     124:	86 e0       	ldi	r24, 0x06	; 6
     126:	80 93 95 00 	sts	0x0095, r24
	  UBRR0L=5;//(F_CPU/16/(baud+1)%256);
     12a:	85 e0       	ldi	r24, 0x05	; 5
     12c:	89 b9       	out	0x09, r24	; 9
	  UBRR0H=0;//(F_CPU/16/(baud+1)/256);
     12e:	10 92 90 00 	sts	0x0090, r1
	  UCSR0B=(1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);//0x98
     132:	88 e9       	ldi	r24, 0x98	; 152
     134:	8a b9       	out	0x0a, r24	; 10
	 }
     136:	08 95       	ret

00000138 <uart1_init>:
//------串口1初始化--------
//波特率9600 8，N,1
//-------------------------
void uart1_init(void)
    {UCSR1B=0x00;
     138:	ea e9       	ldi	r30, 0x9A	; 154
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	10 82       	st	Z, r1
	UCSR1A=0x00;//倍速02
     13e:	10 92 9b 00 	sts	0x009B, r1
	UCSR1C|=0x06;//0x06
     142:	ad e9       	ldi	r26, 0x9D	; 157
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	8c 91       	ld	r24, X
     148:	86 60       	ori	r24, 0x06	; 6
     14a:	8c 93       	st	X, r24
	UBRR1L=5;//(F_CPU/(16*baud)-1)%256; ok //(F_CPU/16/(baud+1)%256);8   5-11.0592
     14c:	85 e0       	ldi	r24, 0x05	; 5
     14e:	80 93 99 00 	sts	0x0099, r24
	UBRR1H=0;//(F_CPU/(16*baud)-1)/256; ok //(F_CPU/16/(baud+1)/256);0
     152:	10 92 98 00 	sts	0x0098, r1
	UCSR1B|=(1<<RXCIE1)|(1<<TXEN1)|(1<<RXEN1);//0x98
     156:	80 81       	ld	r24, Z
     158:	88 69       	ori	r24, 0x98	; 152
     15a:	80 83       	st	Z, r24
    }
     15c:	08 95       	ret

0000015e <adc_init>:
//------AD初始化--------
//8通道输入
//-------------------------
void adc_init(void)
	{ADCSRA=0x00;//close
     15e:	16 b8       	out	0x06, r1	; 6
	 ADMUX=0x60;//(1<<REFS0);//CHANAL0  0xC0|(1<<ADLAR);//E0
     160:	80 e6       	ldi	r24, 0x60	; 96
     162:	87 b9       	out	0x07, r24	; 7
	 ACSR=0x80;
     164:	80 e8       	ldi	r24, 0x80	; 128
     166:	88 b9       	out	0x08, r24	; 8
	 ADCSRA=ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);//使能AD转换，64分频
     168:	86 b1       	in	r24, 0x06	; 6
     16a:	86 68       	ori	r24, 0x86	; 134
     16c:	86 b9       	out	0x06, r24	; 6
     16e:	86 b9       	out	0x06, r24	; 6
	// ADCSRA&=~(1<<ADIE); //禁止ADC中断
			
	}
     170:	08 95       	ret

00000172 <ad_getdat>:
//------AD转换函数--------
//通道
//-----------------------
void ad_getdat(unsigned char n)//ADLR=1高位全满，余2位在低字节7、8位
	{ADMUX=(ADMUX&0xe0)|n;
     172:	97 b1       	in	r25, 0x07	; 7
     174:	90 7e       	andi	r25, 0xE0	; 224
     176:	98 2b       	or	r25, r24
     178:	97 b9       	out	0x07, r25	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17a:	e7 ea       	ldi	r30, 0xA7	; 167
     17c:	f1 e6       	ldi	r31, 0x61	; 97
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <ad_getdat+0xc>
     182:	00 c0       	rjmp	.+0      	; 0x184 <ad_getdat+0x12>
     184:	00 00       	nop
	 _delay_ms(100);
	 ADCSRA|=(1<<ADSC); //START
     186:	36 9a       	sbi	0x06, 6	; 6
	 while(!(ADCSRA&(1<<ADIF)));//WAIT
     188:	34 9b       	sbis	0x06, 4	; 6
     18a:	fe cf       	rjmp	.-4      	; 0x188 <ad_getdat+0x16>
	 ADCSRA|=(1<<ADIF); 
     18c:	34 9a       	sbi	0x06, 4	; 6
	 DATAlist[0x41+2*n+1]=  ADCL;   //first!!!!!!!!  读取的位置首先是ADSL
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	24 b1       	in	r18, 0x04	; 4
     192:	fc 01       	movw	r30, r24
     194:	b1 96       	adiw	r30, 0x21	; 33
     196:	ee 0f       	add	r30, r30
     198:	ff 1f       	adc	r31, r31
     19a:	ec 58       	subi	r30, 0x8C	; 140
     19c:	fb 4f       	sbci	r31, 0xFB	; 251
     19e:	20 83       	st	Z, r18
	 DATAlist[0x41+2*n]=  ADCH;   //放入相关表内  second!!!!!
     1a0:	25 b1       	in	r18, 0x05	; 5
     1a2:	fc 01       	movw	r30, r24
     1a4:	ee 0f       	add	r30, r30
     1a6:	ff 1f       	adc	r31, r31
     1a8:	eb 54       	subi	r30, 0x4B	; 75
     1aa:	fb 4f       	sbci	r31, 0xFB	; 251
     1ac:	20 83       	st	Z, r18
	}
     1ae:	08 95       	ret

000001b0 <__vector_18>:
//--------------------
//------串口0接收完成中断--------
//接收数据存储，比较
//------------------------------
SIGNAL(SIG_UART0_RECV)
    {	/*
     1b0:	1f 92       	push	r1
     1b2:	0f 92       	push	r0
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	0f 92       	push	r0
     1b8:	11 24       	eor	r1, r1
     1ba:	8f 93       	push	r24
     1bc:	9f 93       	push	r25
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
		temp=UDR0; //存储接收数据
		if(temp==0x88)
			{putchar0(0x99);
			}		
			*/	
		while( !(UCSR0A & (1<<RXC0)) );
     1c2:	5f 9b       	sbis	0x0b, 7	; 11
     1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <__vector_18+0x12>
		rx0buffer[rx0poit]=UDR0;
     1c6:	80 91 fa 03 	lds	r24, 0x03FA
     1ca:	9c b1       	in	r25, 0x0c	; 12
     1cc:	ef e7       	ldi	r30, 0x7F	; 127
     1ce:	f5 e0       	ldi	r31, 0x05	; 5
     1d0:	e8 0f       	add	r30, r24
     1d2:	f1 1d       	adc	r31, r1
     1d4:	90 83       	st	Z, r25
		rx0poit++;
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	80 93 fa 03 	sts	0x03FA, r24
		rx0count=0;//接收计时
     1dc:	10 92 41 05 	sts	0x0541, r1
		if(rx0poit>100)rx0poit=0;
     1e0:	85 36       	cpi	r24, 0x65	; 101
     1e2:	10 f0       	brcs	.+4      	; 0x1e8 <__vector_18+0x38>
     1e4:	10 92 fa 03 	sts	0x03FA, r1
	}
     1e8:	ff 91       	pop	r31
     1ea:	ef 91       	pop	r30
     1ec:	9f 91       	pop	r25
     1ee:	8f 91       	pop	r24
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <__vector_30>:
//***********************************************************串口1接收中断start******************************************************************
//------串口1接收完成中断--------
//接收数据存储，比较
//------------------------------
SIGNAL(SIG_UART1_RECV)
{//unsigned char temp;
     1fa:	1f 92       	push	r1
     1fc:	0f 92       	push	r0
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	8f 93       	push	r24
     206:	9f 93       	push	r25
     208:	ef 93       	push	r30
     20a:	ff 93       	push	r31
	//unsigned int i;
	
	while( !(UCSR1A & (1<<RXC1)) );
     20c:	eb e9       	ldi	r30, 0x9B	; 155
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	88 23       	and	r24, r24
     214:	ec f7       	brge	.-6      	; 0x210 <__vector_30+0x16>
	rx1buffer[rx1poit]=UDR1;
     216:	80 91 fb 03 	lds	r24, 0x03FB
     21a:	90 91 9c 00 	lds	r25, 0x009C
     21e:	e5 e3       	ldi	r30, 0x35	; 53
     220:	f4 e0       	ldi	r31, 0x04	; 4
     222:	e8 0f       	add	r30, r24
     224:	f1 1d       	adc	r31, r1
     226:	90 83       	st	Z, r25
	rx1poit++;
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	80 93 fb 03 	sts	0x03FB, r24
	rx1count=0;//接收计时
     22e:	10 92 13 04 	sts	0x0413, r1
	if(rx1poit>100)rx1poit=0;
     232:	85 36       	cpi	r24, 0x65	; 101
     234:	10 f0       	brcs	.+4      	; 0x23a <__vector_30+0x40>
     236:	10 92 fb 03 	sts	0x03FB, r1
}
     23a:	ff 91       	pop	r31
     23c:	ef 91       	pop	r30
     23e:	9f 91       	pop	r25
     240:	8f 91       	pop	r24
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <uart0_send0>:

//发送数据
//---------------------------
void uart0_send0(unsigned char n)
{unsigned char i;
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
	for(i=0;i<n;i++)
     254:	88 23       	and	r24, r24
     256:	79 f0       	breq	.+30     	; 0x276 <uart0_send0+0x2a>
     258:	02 e4       	ldi	r16, 0x42	; 66
     25a:	15 e0       	ldi	r17, 0x05	; 5
	if(rx1poit>100)rx1poit=0;
}

//发送数据
//---------------------------
void uart0_send0(unsigned char n)
     25c:	e8 01       	movw	r28, r16
     25e:	21 96       	adiw	r28, 0x01	; 1
     260:	81 50       	subi	r24, 0x01	; 1
     262:	c8 0f       	add	r28, r24
     264:	d1 1d       	adc	r29, r1
{unsigned char i;
	for(i=0;i<n;i++)
	{
		putchar0(txtdat0[i]);
     266:	f8 01       	movw	r30, r16
     268:	81 91       	ld	r24, Z+
     26a:	8f 01       	movw	r16, r30
     26c:	0e 94 84 00 	call	0x108	; 0x108 <putchar0>

//发送数据
//---------------------------
void uart0_send0(unsigned char n)
{unsigned char i;
	for(i=0;i<n;i++)
     270:	0c 17       	cp	r16, r28
     272:	1d 07       	cpc	r17, r29
     274:	c1 f7       	brne	.-16     	; 0x266 <uart0_send0+0x1a>
	{
		putchar0(txtdat0[i]);
	}
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <uart0_send1>:
//------串口0发送数据TXTDAT1的数据--------
//发送数据
//---------------------------
void uart0_send1(unsigned char n)
{unsigned char i;
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
	for(i=0;i<n;i++)
     288:	88 23       	and	r24, r24
     28a:	79 f0       	breq	.+30     	; 0x2aa <uart0_send1+0x2a>
     28c:	0b eb       	ldi	r16, 0xBB	; 187
     28e:	15 e0       	ldi	r17, 0x05	; 5
	}
}
//------串口0发送数据TXTDAT1的数据--------
//发送数据
//---------------------------
void uart0_send1(unsigned char n)
     290:	e8 01       	movw	r28, r16
     292:	21 96       	adiw	r28, 0x01	; 1
     294:	81 50       	subi	r24, 0x01	; 1
     296:	c8 0f       	add	r28, r24
     298:	d1 1d       	adc	r29, r1
{unsigned char i;
	for(i=0;i<n;i++)
	{
		putchar0(txtdat1[i]);
     29a:	f8 01       	movw	r30, r16
     29c:	81 91       	ld	r24, Z+
     29e:	8f 01       	movw	r16, r30
     2a0:	0e 94 84 00 	call	0x108	; 0x108 <putchar0>
//------串口0发送数据TXTDAT1的数据--------
//发送数据
//---------------------------
void uart0_send1(unsigned char n)
{unsigned char i;
	for(i=0;i<n;i++)
     2a4:	0c 17       	cp	r16, r28
     2a6:	1d 07       	cpc	r17, r29
     2a8:	c1 f7       	brne	.-16     	; 0x29a <uart0_send1+0x1a>
	{
		putchar0(txtdat1[i]);
	}
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <uart1_send>:

//------串口1发送数据--------
//发送数据
//---------------------------
void uart1_send(unsigned char n)
	{unsigned char i;
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
	 for(i=0;i<n;i++)
     2bc:	88 23       	and	r24, r24
     2be:	79 f0       	breq	.+30     	; 0x2de <uart1_send+0x2a>
     2c0:	0b eb       	ldi	r16, 0xBB	; 187
     2c2:	15 e0       	ldi	r17, 0x05	; 5
}

//------串口1发送数据--------
//发送数据
//---------------------------
void uart1_send(unsigned char n)
     2c4:	e8 01       	movw	r28, r16
     2c6:	21 96       	adiw	r28, 0x01	; 1
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	c8 0f       	add	r28, r24
     2cc:	d1 1d       	adc	r29, r1
	{unsigned char i;
	 for(i=0;i<n;i++)
	   {
		   putchar1(txtdat1[i]);
     2ce:	f8 01       	movw	r30, r16
     2d0:	81 91       	ld	r24, Z+
     2d2:	8f 01       	movw	r16, r30
     2d4:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
//------串口1发送数据--------
//发送数据
//---------------------------
void uart1_send(unsigned char n)
	{unsigned char i;
	 for(i=0;i<n;i++)
     2d8:	0c 17       	cp	r16, r28
     2da:	1d 07       	cpc	r17, r29
     2dc:	c1 f7       	brne	.-16     	; 0x2ce <uart1_send+0x1a>
	   {
		   putchar1(txtdat1[i]);
	   }
	}
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <timer0_init>:
}

//-----------------------------------------------------------------------------------------------------
//---------------tc0定时初始化  ，1024分频，定时20ms------
void timer0_init(void)
{ TCCR0=0x00;                                        //stop
     2e8:	13 be       	out	0x33, r1	; 51
	TCNT0=0;                                         //产生10ms的中断初值
     2ea:	12 be       	out	0x32, r1	; 50
	OCR0=0xff;
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	81 bf       	out	0x31, r24	; 49
	//	TCCR0=0x02;//(1<<CS02)|(1<<CS01)|(1<<CS00);               //1024分频，tc0工作在普通模式 ，开始工作
	TIMSK|=(1<<TOIE0);                                  //中断开
     2f0:	87 b7       	in	r24, 0x37	; 55
     2f2:	81 60       	ori	r24, 0x01	; 1
     2f4:	87 bf       	out	0x37, r24	; 55
}
     2f6:	08 95       	ret

000002f8 <T1_init>:
//--------------T1计数器初始化----16-----
void T1_init(void)
{ TCCR1A=0x00;
     2f8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x00;                                        //stop
     2fa:	1e bc       	out	0x2e, r1	; 46
	TCNT1=0;                                         //计数初值0
     2fc:	1d bc       	out	0x2d, r1	; 45
     2fe:	1c bc       	out	0x2c, r1	; 44
	OCR1A=0;
     300:	1b bc       	out	0x2b, r1	; 43
     302:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;
     304:	19 bc       	out	0x29, r1	; 41
     306:	18 bc       	out	0x28, r1	; 40
	OCR1C=0;//---test
     308:	10 92 79 00 	sts	0x0079, r1
     30c:	10 92 78 00 	sts	0x0078, r1
	ICR1H=0xff;//test
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xff;
     314:	86 bd       	out	0x26, r24	; 38
//	TCCR1A=0x00;
//	TCCR1B=0x07;                                    //上升沿有效，t1工作普通模式，
	                          //TIMSK=(1<<TOIE1A);                                  //中断开
}
     316:	08 95       	ret

00000318 <T2_init>:
//--------------T2计数器初始化--8-------
void T2_init(void)
{
	TCCR2=0x00;                                        //stop
     318:	15 bc       	out	0x25, r1	; 37
	TCNT2=0;                                         //计数初值0
     31a:	14 bc       	out	0x24, r1	; 36
	OCR2=0;
     31c:	13 bc       	out	0x23, r1	; 35
//	TCCR2=0x07;                                    //上升沿有效，t2工作普通模式，
	TIMSK|=(1<<TOIE2);                                  //中断开
     31e:	87 b7       	in	r24, 0x37	; 55
     320:	80 64       	ori	r24, 0x40	; 64
     322:	87 bf       	out	0x37, r24	; 55
	T2Hcount=0;
     324:	10 92 fd 03 	sts	0x03FD, r1
}
     328:	08 95       	ret

0000032a <T3_init>:
//--------------T3定时初始化----16-----
void T3_init(void)
{   TCCR3A=0x00;
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	ab e8       	ldi	r26, 0x8B	; 139
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	1c 92       	st	X, r1
	TCCR3B=0x00;                                        //stop
     334:	ea e8       	ldi	r30, 0x8A	; 138
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	10 82       	st	Z, r1
	TCNT3H=0x00;    //F0                                     //计数初值0
     33a:	10 92 89 00 	sts	0x0089, r1
	TCNT3L=0x00;    //7C
     33e:	c8 e8       	ldi	r28, 0x88	; 136
     340:	d0 e0       	ldi	r29, 0x00	; 0
     342:	18 82       	st	Y, r1
	TCNT3=0;
     344:	19 82       	std	Y+1, r1	; 0x01
     346:	18 82       	st	Y, r1
	OCR3A=0;
     348:	10 92 87 00 	sts	0x0087, r1
     34c:	10 92 86 00 	sts	0x0086, r1
	OCR3B=0;
     350:	10 92 85 00 	sts	0x0085, r1
     354:	10 92 84 00 	sts	0x0084, r1
	OCR3C=0;
     358:	10 92 83 00 	sts	0x0083, r1
     35c:	10 92 82 00 	sts	0x0082, r1
	ICR3H=0xff;
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	80 93 81 00 	sts	0x0081, r24
	ICR3L=0xff;
     366:	80 93 80 00 	sts	0x0080, r24
		TCCR3A=0x00;
     36a:	1c 92       	st	X, r1
		TCCR3B=0x00;    //03                                //上升沿有效，t1工作普通模式，1024分频
     36c:	10 82       	st	Z, r1
	//ETIMSK|=(1<<TOIE3);                                  //中断开
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <init_devices>:
//-----------------------------------------------------------------------------------------------
//***********************************************************定时器3中断处理程序end**********************************************************************
//--------------------
//------系统初始化--------
void init_devices(void)
	 {cli();
     374:	f8 94       	cli
	  XDIV=0x00;
     376:	1c be       	out	0x3c, r1	; 60
	  XMCRA=0x00;
     378:	10 92 6d 00 	sts	0x006D, r1
	  port_init();
     37c:	0e 94 65 00 	call	0xca	; 0xca <port_init>
	  uart0_init();
     380:	0e 94 90 00 	call	0x120	; 0x120 <uart0_init>
	  uart1_init();
     384:	0e 94 9c 00 	call	0x138	; 0x138 <uart1_init>
	  adc_init();
     388:	0e 94 af 00 	call	0x15e	; 0x15e <adc_init>
	  MCUCR=0x00;
     38c:	15 be       	out	0x35, r1	; 53
	  EICRA=0x00;
     38e:	10 92 6a 00 	sts	0x006A, r1
	  EICRB=0x00;
     392:	1a be       	out	0x3a, r1	; 58
	  EIMSK=0x00;
     394:	19 be       	out	0x39, r1	; 57
	  TIMSK=0x00;//中断T0
     396:	17 be       	out	0x37, r1	; 55
	  ETIMSK=0x00;
     398:	10 92 7d 00 	sts	0x007D, r1
	  timer0_init();//时钟0初始化，定时
     39c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <timer0_init>
	  T1_init();
     3a0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <T1_init>
	  T2_init();
     3a4:	0e 94 8c 01 	call	0x318	; 0x318 <T2_init>
	  T3_init();
     3a8:	0e 94 95 01 	call	0x32a	; 0x32a <T3_init>
	  sei();
     3ac:	78 94       	sei
	  
	 }
     3ae:	08 95       	ret

000003b0 <EEPROM_write>:
 //*****************向EEPROM里面写入数据*****************
//输入量：地址，数据
//***************************************************
void EEPROM_write(unsigned int uiAddress,unsigned char ucData)
{
 while(EECR&(1<<EEWE));    //等待上一次写操作结束
     3b0:	e1 99       	sbic	0x1c, 1	; 28
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <EEPROM_write>
 EEAR = uiAddress;     //地址
     3b4:	9f bb       	out	0x1f, r25	; 31
     3b6:	8e bb       	out	0x1e, r24	; 30
 EEDR = ucData;      //数据
     3b8:	6d bb       	out	0x1d, r22	; 29
 EECR |=(1<<EEMWE);     //置位EEMWE,主机写使能
     3ba:	e2 9a       	sbi	0x1c, 2	; 28
 EECR |=(1<<EEWE);     //置位EEWE,写使能，启动写操作
     3bc:	e1 9a       	sbi	0x1c, 1	; 28
}
     3be:	08 95       	ret

000003c0 <eprom_write>:
//***********************************************************************
//              EEPROM写入字符串
//          addr：地址；number：长度；p_buff：写入数据存放指针
//***********************************************************************
void eprom_write(unsigned int addr, unsigned char number, unsigned char *p_buff) 
{
     3c0:	fa 01       	movw	r30, r20
	EEARH = 0x00;
     3c2:	1f ba       	out	0x1f, r1	; 31
	while(number --) {
     3c4:	66 23       	and	r22, r22
     3c6:	91 f0       	breq	.+36     	; 0x3ec <eprom_write+0x2c>
     3c8:	61 50       	subi	r22, 0x01	; 1
}
//***********************************************************************
//              EEPROM写入字符串
//          addr：地址；number：长度；p_buff：写入数据存放指针
//***********************************************************************
void eprom_write(unsigned int addr, unsigned char number, unsigned char *p_buff) 
     3ca:	9a 01       	movw	r18, r20
     3cc:	26 0f       	add	r18, r22
     3ce:	31 1d       	adc	r19, r1
     3d0:	2f 5f       	subi	r18, 0xFF	; 255
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
{
	EEARH = 0x00;
	while(number --) {
		while(EECR & (1 << EEWE));       //等待前面的写完成
     3d4:	e1 99       	sbic	0x1c, 1	; 28
     3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <eprom_write+0x14>
		EEARL = addr ++;                 //写地址
     3d8:	8e bb       	out	0x1e, r24	; 30
     3da:	01 96       	adiw	r24, 0x01	; 1
		EEDR = *p_buff ++;               //写数据到EEDR
     3dc:	41 91       	ld	r20, Z+
     3de:	4d bb       	out	0x1d, r20	; 29
		EECR |= (1 << EEMWE);            //主机写入允许位
     3e0:	e2 9a       	sbi	0x1c, 2	; 28
		EECR&=~(1<<EEWE);
     3e2:	e1 98       	cbi	0x1c, 1	; 28
		EECR |= (1 << EEWE);             //EEWE为1，执行写操作
     3e4:	e1 9a       	sbi	0x1c, 1	; 28
//          addr：地址；number：长度；p_buff：写入数据存放指针
//***********************************************************************
void eprom_write(unsigned int addr, unsigned char number, unsigned char *p_buff) 
{
	EEARH = 0x00;
	while(number --) {
     3e6:	e2 17       	cp	r30, r18
     3e8:	f3 07       	cpc	r31, r19
     3ea:	a1 f7       	brne	.-24     	; 0x3d4 <eprom_write+0x14>
     3ec:	08 95       	ret

000003ee <EEPROM_read>:
//           uiAddress：地址
//***********************************************************************

unsigned char EEPROM_read(unsigned int uiAddress)
{
 while(EECR&(1<<EEWE));  //等待上一次写操作结束
     3ee:	e1 99       	sbic	0x1c, 1	; 28
     3f0:	fe cf       	rjmp	.-4      	; 0x3ee <EEPROM_read>
 EEAR = uiAddress;       //设置地址寄存器
     3f2:	9f bb       	out	0x1f, r25	; 31
     3f4:	8e bb       	out	0x1e, r24	; 30
 EECR |=(1<<EERE);       //读使能
     3f6:	e0 9a       	sbi	0x1c, 0	; 28
 return EEDR;            //返回读入EEDR里面的数据
     3f8:	8d b3       	in	r24, 0x1d	; 29
}
     3fa:	08 95       	ret

000003fc <eprom_read>:
//***********************************************************************
//                EEPROM读取函数*/
//            addr：地址；number：长度；p_buff：读出数据存放指针
//***********************************************************************
void eprom_read(unsigned int addr, unsigned char number, unsigned char *p_buff) 
{
     3fc:	fa 01       	movw	r30, r20
	while(EECR & (1 << EEWE));               //等待前面的写完成
     3fe:	e1 99       	sbic	0x1c, 1	; 28
     400:	fe cf       	rjmp	.-4      	; 0x3fe <eprom_read+0x2>
	EEARH = 0x00;                           //写高字节地址
     402:	1f ba       	out	0x1f, r1	; 31
	while(number --) {
     404:	66 23       	and	r22, r22
     406:	71 f0       	breq	.+28     	; 0x424 <eprom_read+0x28>
     408:	61 50       	subi	r22, 0x01	; 1

//***********************************************************************
//                EEPROM读取函数*/
//            addr：地址；number：长度；p_buff：读出数据存放指针
//***********************************************************************
void eprom_read(unsigned int addr, unsigned char number, unsigned char *p_buff) 
     40a:	9f 01       	movw	r18, r30
     40c:	26 0f       	add	r18, r22
     40e:	31 1d       	adc	r19, r1
     410:	2f 5f       	subi	r18, 0xFF	; 255
     412:	3f 4f       	sbci	r19, 0xFF	; 255
{
	while(EECR & (1 << EEWE));               //等待前面的写完成
	EEARH = 0x00;                           //写高字节地址
	while(number --) {
		EEARL = addr ++;                 //写地址低字节
     414:	8e bb       	out	0x1e, r24	; 30
     416:	01 96       	adiw	r24, 0x01	; 1
		EECR |= (1 << EERE);            //读允许位置1
     418:	e0 9a       	sbi	0x1c, 0	; 28
		*p_buff++ = EEDR;               //读出EEDR中的数据
     41a:	4d b3       	in	r20, 0x1d	; 29
     41c:	41 93       	st	Z+, r20
//***********************************************************************
void eprom_read(unsigned int addr, unsigned char number, unsigned char *p_buff) 
{
	while(EECR & (1 << EEWE));               //等待前面的写完成
	EEARH = 0x00;                           //写高字节地址
	while(number --) {
     41e:	e2 17       	cp	r30, r18
     420:	f3 07       	cpc	r31, r19
     422:	c1 f7       	brne	.-16     	; 0x414 <eprom_read+0x18>
     424:	08 95       	ret

00000426 <WRITE_DATA_1721>:
void WRITE_DATA_1721(unsigned char wdata)
{
	unsigned char i,temp;
	
	temp = 0x01;  //80
	HT1721C_STB_0;
     426:	ac 98       	cbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     428:	00 00       	nop
     42a:	98 e0       	ldi	r25, 0x08	; 8
	_delay_us(TINGD);
	for(i=0 ; i<8 ; i++)
	{
		HT1721C_CLK_0;				//clk = 0 for data ready
     42c:	ab 98       	cbi	0x15, 3	; 21
		//_delay_us(TINGD);
		if((temp & wdata) == 0) 	
     42e:	80 fd       	sbrc	r24, 0
     430:	02 c0       	rjmp	.+4      	; 0x436 <WRITE_DATA_1721+0x10>
		  {HT1721C_DIO_0;}
     432:	aa 98       	cbi	0x15, 2	; 21
     434:	01 c0       	rjmp	.+2      	; 0x438 <WRITE_DATA_1721+0x12>
		else			
		  {HT1721C_DIO_1;}
     436:	aa 9a       	sbi	0x15, 2	; 21
     438:	00 00       	nop
		//		_nop_();
		_delay_us(TINGD);
		HT1721C_CLK_1;				//clk = 1 for data write into 1632
     43a:	ab 9a       	sbi	0x15, 3	; 21
		wdata >>= 1;   //>>
     43c:	86 95       	lsr	r24
     43e:	91 50       	subi	r25, 0x01	; 1
	unsigned char i,temp;
	
	temp = 0x01;  //80
	HT1721C_STB_0;
	_delay_us(TINGD);
	for(i=0 ; i<8 ; i++)
     440:	a9 f7       	brne	.-22     	; 0x42c <WRITE_DATA_1721+0x6>
		HT1721C_CLK_1;				//clk = 1 for data write into 1632
		wdata >>= 1;   //>>
		//_delay_us(TINGD);    //0317
	}
	//HT1721C_STB_1;//???
}
     442:	08 95       	ret

00000444 <WRITE_ALLRAM_1721>:
/*********************************
功能：填充HT1632C的RAM数据
*********************************/
void WRITE_ALLRAM_1721(unsigned char F_RAM1632_SET)
{
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	d8 2f       	mov	r29, r24
	unsigned char i;
	HT1721C_STB_1;
     44a:	ac 9a       	sbi	0x15, 4	; 21
   // HT1721C_CLK_1;
	HT1721C_DIO_1;
     44c:	aa 9a       	sbi	0x15, 2	; 21
	//WRITE_DATA_1721(0x08);
	HT1721C_STB_1;
     44e:	ac 9a       	sbi	0x15, 4	; 21
	WRITE_DATA_1721(0x40);
     450:	80 e4       	ldi	r24, 0x40	; 64
     452:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     456:	ac 9a       	sbi	0x15, 4	; 21
	WRITE_DATA_1721(0xc0);
     458:	80 ec       	ldi	r24, 0xC0	; 192
     45a:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
     45e:	c0 e1       	ldi	r28, 0x10	; 16
	//HT1721C_STB_1;
	// all RAM have 96
	for(i=0;i<16;i++)
	{
		if(F_RAM1632_SET) 	
     460:	dd 23       	and	r29, r29
     462:	21 f0       	breq	.+8      	; 0x46c <WRITE_ALLRAM_1721+0x28>
		  {WRITE_DATA_1721(0xff);}	//all RAM write 1
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
     46a:	03 c0       	rjmp	.+6      	; 0x472 <WRITE_ALLRAM_1721+0x2e>
		else			
		  {WRITE_DATA_1721(0x00);}	//all RAM write 0
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
     472:	c1 50       	subi	r28, 0x01	; 1
	WRITE_DATA_1721(0x40);
	HT1721C_STB_1;
	WRITE_DATA_1721(0xc0);
	//HT1721C_STB_1;
	// all RAM have 96
	for(i=0;i<16;i++)
     474:	a9 f7       	brne	.-22     	; 0x460 <WRITE_ALLRAM_1721+0x1c>
		if(F_RAM1632_SET) 	
		  {WRITE_DATA_1721(0xff);}	//all RAM write 1
		else			
		  {WRITE_DATA_1721(0x00);}	//all RAM write 0
	}
	HT1721C_STB_1;
     476:	ac 9a       	sbi	0x15, 4	; 21
     478:	00 00       	nop
	_delay_us(TINGD);
	WRITE_DATA_1721(0x97);
     47a:	87 e9       	ldi	r24, 0x97	; 151
     47c:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     480:	ac 9a       	sbi	0x15, 4	; 21
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <REFRESH_ALLRAM_1721>:
/*********************************
功能：更新HT1632C的RAM数据
*********************************/
void REFRESH_ALLRAM_1721(void)
{
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
	unsigned char i;
	HT1721C_STB_1;
     490:	ac 9a       	sbi	0x15, 4	; 21
	//HT1721C_CLK_1;
	HT1721C_DIO_1;
     492:	aa 9a       	sbi	0x15, 2	; 21
	//WRITE_DATA_1721(0x08);
	HT1721C_STB_1;
     494:	ac 9a       	sbi	0x15, 4	; 21
	WRITE_DATA_1721(0x40);
     496:	80 e4       	ldi	r24, 0x40	; 64
     498:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     49c:	ac 9a       	sbi	0x15, 4	; 21
	WRITE_DATA_1721(0xc0);
     49e:	80 ec       	ldi	r24, 0xC0	; 192
     4a0:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
     4a4:	c4 e1       	ldi	r28, 0x14	; 20
     4a6:	d4 e0       	ldi	r29, 0x04	; 4
	HT1721C_STB_1;
}
/*********************************
功能：更新HT1632C的RAM数据
*********************************/
void REFRESH_ALLRAM_1721(void)
     4a8:	8e 01       	movw	r16, r28
     4aa:	00 5f       	subi	r16, 0xF0	; 240
     4ac:	1f 4f       	sbci	r17, 0xFF	; 255
	WRITE_DATA_1721(0xc0);
	
	// all RAM have 96
	for(i=0;i<16;i++)
	{
     WRITE_DATA_1721(LCDNUM[i]);
     4ae:	89 91       	ld	r24, Y+
     4b0:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	WRITE_DATA_1721(0x40);
	HT1721C_STB_1;
	WRITE_DATA_1721(0xc0);
	
	// all RAM have 96
	for(i=0;i<16;i++)
     4b4:	c0 17       	cp	r28, r16
     4b6:	d1 07       	cpc	r29, r17
     4b8:	d1 f7       	brne	.-12     	; 0x4ae <REFRESH_ALLRAM_1721+0x26>
	{
     WRITE_DATA_1721(LCDNUM[i]);
    }
	HT1721C_STB_1;
     4ba:	ac 9a       	sbi	0x15, 4	; 21
     4bc:	00 00       	nop
	_delay_us(TINGD);
	WRITE_DATA_1721(0x97);
     4be:	87 e9       	ldi	r24, 0x97	; 151
     4c0:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     4c4:	ac 9a       	sbi	0x15, 4	; 21
     4c6:	00 00       	nop
	_delay_us(TINGD);
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	08 95       	ret

000004d2 <INIT_1721>:
     4d2:	00 00       	nop
功能：初始化HT1632C
*********************************/
void INIT_1721(void)
{
	_delay_us(TINGD);
	HT1721C_STB_1;
     4d4:	ac 9a       	sbi	0x15, 4	; 21
	//HT1721C_CLK_1;
	HT1721C_DIO_1;
     4d6:	aa 9a       	sbi	0x15, 2	; 21
	
	WRITE_DATA_1721(0x08);//dis mode  0x08	MODE_SET
     4d8:	88 e0       	ldi	r24, 0x08	; 8
     4da:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     4de:	ac 9a       	sbi	0x15, 4	; 21
     4e0:	00 00       	nop
	_delay_us(TINGD);
	WRITE_DATA_1721(0x97);//dis  0x97   0x92 DISP_CON
     4e2:	87 e9       	ldi	r24, 0x97	; 151
     4e4:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     4e8:	ac 9a       	sbi	0x15, 4	; 21
     4ea:	00 00       	nop
	_delay_us(TINGD);

	
	//TM1721_Write_String(0,clear,11);

}
     4ec:	08 95       	ret

000004ee <WRITE_1DATA_1721>:

/*********************************
功能：填充HT1632C的固定地址和固定数据
*********************************/
void WRITE_1DATA_1721(unsigned char addr,unsigned char dat1)
{	HT1721C_STB_1;
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	d8 2f       	mov	r29, r24
     4f4:	c6 2f       	mov	r28, r22
     4f6:	ac 9a       	sbi	0x15, 4	; 21
	//HT1721C_CLK_1;
	HT1721C_DIO_1;
     4f8:	aa 9a       	sbi	0x15, 2	; 21
	//WRITE_DATA_1721(0x08);
	HT1721C_STB_1;
     4fa:	ac 9a       	sbi	0x15, 4	; 21
	WRITE_DATA_1721(0x44);
     4fc:	84 e4       	ldi	r24, 0x44	; 68
     4fe:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     502:	ac 9a       	sbi	0x15, 4	; 21
	WRITE_DATA_1721(0xc0+addr);
     504:	8d 2f       	mov	r24, r29
     506:	80 54       	subi	r24, 0x40	; 64
     508:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	WRITE_DATA_1721(dat1);
     50c:	8c 2f       	mov	r24, r28
     50e:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     512:	ac 9a       	sbi	0x15, 4	; 21
     514:	00 00       	nop
	_delay_us(TINGD);
	WRITE_DATA_1721(0x97);
     516:	87 e9       	ldi	r24, 0x97	; 151
     518:	0e 94 13 02 	call	0x426	; 0x426 <WRITE_DATA_1721>
	HT1721C_STB_1;
     51c:	ac 9a       	sbi	0x15, 4	; 21

}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <BEEP>:
/*********************************
功能：蜂鸣器响声
*********************************/
void BEEP(unsigned char sencond)
{   uchar i;
	PORTB|=(1<<PB0);
     524:	c0 9a       	sbi	0x18, 0	; 24
	for(i=0;i<sencond;i++)
     526:	88 23       	and	r24, r24
     528:	51 f0       	breq	.+20     	; 0x53e <BEEP+0x1a>
     52a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52c:	e7 e8       	ldi	r30, 0x87	; 135
     52e:	f3 e1       	ldi	r31, 0x13	; 19
     530:	31 97       	sbiw	r30, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <BEEP+0xc>
     534:	00 c0       	rjmp	.+0      	; 0x536 <BEEP+0x12>
     536:	00 00       	nop
     538:	9f 5f       	subi	r25, 0xFF	; 255
     53a:	98 17       	cp	r25, r24
     53c:	b9 f7       	brne	.-18     	; 0x52c <BEEP+0x8>
	{
		_delay_ms(20);
	}
	PORTB&=~(1<<PB0);
     53e:	c0 98       	cbi	0x18, 0	; 24
}
     540:	08 95       	ret

00000542 <wifi_init>:
//模式，服务器，端口，通讯参数
//----------------------------
//------------------------------------------------
//***********************************************************************
void wifi_init(void)
{   uchar t;
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
	for(ip=&send3add[0];ip<(&send3add[0]+3);ip++) //+++
     546:	82 ec       	ldi	r24, 0xC2	; 194
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	90 93 04 04 	sts	0x0404, r25
     54e:	80 93 03 04 	sts	0x0403, r24
     552:	9c 01       	movw	r18, r24
     554:	2d 5f       	subi	r18, 0xFD	; 253
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	82 17       	cp	r24, r18
     55a:	93 07       	cpc	r25, r19
     55c:	90 f4       	brcc	.+36     	; 0x582 <wifi_init+0x40>
     55e:	fc 01       	movw	r30, r24
     560:	c5 ec       	ldi	r28, 0xC5	; 197
     562:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
     564:	80 81       	ld	r24, Z
     566:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
//----------------------------
//------------------------------------------------
//***********************************************************************
void wifi_init(void)
{   uchar t;
	for(ip=&send3add[0];ip<(&send3add[0]+3);ip++) //+++
     56a:	e0 91 03 04 	lds	r30, 0x0403
     56e:	f0 91 04 04 	lds	r31, 0x0404
     572:	31 96       	adiw	r30, 0x01	; 1
     574:	f0 93 04 04 	sts	0x0404, r31
     578:	e0 93 03 04 	sts	0x0403, r30
     57c:	ec 17       	cp	r30, r28
     57e:	fd 07       	cpc	r31, r29
     580:	88 f3       	brcs	.-30     	; 0x564 <wifi_init+0x22>
     582:	8f e4       	ldi	r24, 0x4F	; 79
     584:	93 ec       	ldi	r25, 0xC3	; 195
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <wifi_init+0x44>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <wifi_init+0x4a>
     58c:	00 00       	nop
	{
		putchar1(*ip);
	}
	//---wait reply--
	_delay_ms(200);
	rx1poit=0;
     58e:	10 92 fb 03 	sts	0x03FB, r1
     592:	82 e8       	ldi	r24, 0x82	; 130
	for(t=0;t<130;t++)
		{
			if(rx1buffer[0]==0x61) t=131;
     594:	e5 e3       	ldi	r30, 0x35	; 53
     596:	f4 e0       	ldi	r31, 0x04	; 4
     598:	90 81       	ld	r25, Z
     59a:	91 36       	cpi	r25, 0x61	; 97
     59c:	09 f4       	brne	.+2      	; 0x5a0 <wifi_init+0x5e>
     59e:	82 c1       	rjmp	.+772    	; 0x8a4 <wifi_init+0x362>
     5a0:	a7 ea       	ldi	r26, 0xA7	; 167
     5a2:	b1 e6       	ldi	r27, 0x61	; 97
     5a4:	11 97       	sbiw	r26, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <wifi_init+0x62>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <wifi_init+0x68>
     5aa:	00 00       	nop
     5ac:	81 50       	subi	r24, 0x01	; 1
		putchar1(*ip);
	}
	//---wait reply--
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<130;t++)
     5ae:	a1 f7       	brne	.-24     	; 0x598 <wifi_init+0x56>
     5b0:	87 ea       	ldi	r24, 0xA7	; 167
     5b2:	91 e6       	ldi	r25, 0x61	; 97
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <wifi_init+0x72>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <wifi_init+0x78>
     5ba:	00 00       	nop
			_delay_ms(100);
			//BEEP(100);
		}
	_delay_ms(100);
	//---
	putchar1(0x61); //replay a
     5bc:	81 e6       	ldi	r24, 0x61	; 97
     5be:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
     5c2:	af e4       	ldi	r26, 0x4F	; 79
     5c4:	b3 ec       	ldi	r27, 0xC3	; 195
     5c6:	11 97       	sbiw	r26, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <wifi_init+0x84>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <wifi_init+0x8a>
     5cc:	00 00       	nop

	//---wait reply--
	_delay_ms(200);
	rx1poit=0;
     5ce:	10 92 fb 03 	sts	0x03FB, r1
     5d2:	84 e6       	ldi	r24, 0x64	; 100
	for(t=0;t<100;t++)
	{
		if(rx1buffer[1]==0x6f) t=101;
     5d4:	e6 e3       	ldi	r30, 0x36	; 54
     5d6:	f4 e0       	ldi	r31, 0x04	; 4
     5d8:	90 81       	ld	r25, Z
     5da:	9f 36       	cpi	r25, 0x6F	; 111
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <wifi_init+0x9e>
     5de:	69 c1       	rjmp	.+722    	; 0x8b2 <wifi_init+0x370>
     5e0:	a7 ea       	ldi	r26, 0xA7	; 167
     5e2:	b1 e6       	ldi	r27, 0x61	; 97
     5e4:	11 97       	sbiw	r26, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <wifi_init+0xa2>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <wifi_init+0xa8>
     5ea:	00 00       	nop
     5ec:	81 50       	subi	r24, 0x01	; 1
	putchar1(0x61); //replay a

	//---wait reply--
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<100;t++)
     5ee:	a1 f7       	brne	.-24     	; 0x5d8 <wifi_init+0x96>
     5f0:	87 ea       	ldi	r24, 0xA7	; 167
     5f2:	91 e6       	ldi	r25, 0x61	; 97
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <wifi_init+0xb2>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <wifi_init+0xb8>
     5fa:	00 00       	nop
		//BEEP(100);
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendeoff[0];ip<(&sendeoff[0]+8);ip++) //AT+E=off
     5fc:	89 eb       	ldi	r24, 0xB9	; 185
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	90 93 04 04 	sts	0x0404, r25
     604:	80 93 03 04 	sts	0x0403, r24
     608:	9c 01       	movw	r18, r24
     60a:	28 5f       	subi	r18, 0xF8	; 248
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	82 17       	cp	r24, r18
     610:	93 07       	cpc	r25, r19
     612:	90 f4       	brcc	.+36     	; 0x638 <wifi_init+0xf6>
     614:	fc 01       	movw	r30, r24
     616:	c1 ec       	ldi	r28, 0xC1	; 193
     618:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
     61a:	80 81       	ld	r24, Z
     61c:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
		//BEEP(100);
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendeoff[0];ip<(&sendeoff[0]+8);ip++) //AT+E=off
     620:	e0 91 03 04 	lds	r30, 0x0403
     624:	f0 91 04 04 	lds	r31, 0x0404
     628:	31 96       	adiw	r30, 0x01	; 1
     62a:	f0 93 04 04 	sts	0x0404, r31
     62e:	e0 93 03 04 	sts	0x0403, r30
     632:	ec 17       	cp	r30, r28
     634:	fd 07       	cpc	r31, r29
     636:	88 f3       	brcs	.-30     	; 0x61a <wifi_init+0xd8>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
     638:	8d e0       	ldi	r24, 0x0D	; 13
     63a:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
     644:	10 92 36 04 	sts	0x0436, r1
     648:	af e4       	ldi	r26, 0x4F	; 79
     64a:	b3 ec       	ldi	r27, 0xC3	; 195
     64c:	11 97       	sbiw	r26, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <wifi_init+0x10a>
     650:	00 c0       	rjmp	.+0      	; 0x652 <wifi_init+0x110>
     652:	00 00       	nop
	_delay_ms(200);
	rx1poit=0;
     654:	10 92 fb 03 	sts	0x03FB, r1
     658:	84 e6       	ldi	r24, 0x64	; 100
	for(t=0;t<100;t++)
	{
		if(rx1buffer[1]==0x6f) t=101;
     65a:	e6 e3       	ldi	r30, 0x36	; 54
     65c:	f4 e0       	ldi	r31, 0x04	; 4
     65e:	90 81       	ld	r25, Z
     660:	9f 36       	cpi	r25, 0x6F	; 111
     662:	09 f4       	brne	.+2      	; 0x666 <wifi_init+0x124>
     664:	2d c1       	rjmp	.+602    	; 0x8c0 <wifi_init+0x37e>
     666:	a7 ea       	ldi	r26, 0xA7	; 167
     668:	b1 e6       	ldi	r27, 0x61	; 97
     66a:	11 97       	sbiw	r26, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <wifi_init+0x128>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <wifi_init+0x12e>
     670:	00 00       	nop
     672:	81 50       	subi	r24, 0x01	; 1
	putchar1(0x0a);
	//---wait reply--
	rx1buffer[1]=0x00;
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<100;t++)
     674:	a1 f7       	brne	.-24     	; 0x65e <wifi_init+0x11c>
     676:	87 ea       	ldi	r24, 0xA7	; 167
     678:	91 e6       	ldi	r25, 0x61	; 97
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <wifi_init+0x138>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <wifi_init+0x13e>
     680:	00 00       	nop
		//BEEP(100);
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendsta[0];ip<(&sendsta[0]+12);ip++) //AT+WMODE=STA
     682:	8c ea       	ldi	r24, 0xAC	; 172
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	90 93 04 04 	sts	0x0404, r25
     68a:	80 93 03 04 	sts	0x0403, r24
     68e:	9c 01       	movw	r18, r24
     690:	24 5f       	subi	r18, 0xF4	; 244
     692:	3f 4f       	sbci	r19, 0xFF	; 255
     694:	82 17       	cp	r24, r18
     696:	93 07       	cpc	r25, r19
     698:	90 f4       	brcc	.+36     	; 0x6be <wifi_init+0x17c>
     69a:	fc 01       	movw	r30, r24
     69c:	c8 eb       	ldi	r28, 0xB8	; 184
     69e:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
     6a0:	80 81       	ld	r24, Z
     6a2:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
		//BEEP(100);
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendsta[0];ip<(&sendsta[0]+12);ip++) //AT+WMODE=STA
     6a6:	e0 91 03 04 	lds	r30, 0x0403
     6aa:	f0 91 04 04 	lds	r31, 0x0404
     6ae:	31 96       	adiw	r30, 0x01	; 1
     6b0:	f0 93 04 04 	sts	0x0404, r31
     6b4:	e0 93 03 04 	sts	0x0403, r30
     6b8:	ec 17       	cp	r30, r28
     6ba:	fd 07       	cpc	r31, r29
     6bc:	88 f3       	brcs	.-30     	; 0x6a0 <wifi_init+0x15e>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
     6be:	8d e0       	ldi	r24, 0x0D	; 13
     6c0:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
     6c4:	8a e0       	ldi	r24, 0x0A	; 10
     6c6:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
     6ca:	10 92 36 04 	sts	0x0436, r1
     6ce:	af e4       	ldi	r26, 0x4F	; 79
     6d0:	b3 ec       	ldi	r27, 0xC3	; 195
     6d2:	11 97       	sbiw	r26, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <wifi_init+0x190>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <wifi_init+0x196>
     6d8:	00 00       	nop
	_delay_ms(200);
	rx1poit=0;
     6da:	10 92 fb 03 	sts	0x03FB, r1
     6de:	84 e6       	ldi	r24, 0x64	; 100
	for(t=0;t<100;t++)
	{
		if(rx1buffer[1]==0x6f) t=101;
     6e0:	e6 e3       	ldi	r30, 0x36	; 54
     6e2:	f4 e0       	ldi	r31, 0x04	; 4
     6e4:	90 81       	ld	r25, Z
     6e6:	9f 36       	cpi	r25, 0x6F	; 111
     6e8:	09 f4       	brne	.+2      	; 0x6ec <wifi_init+0x1aa>
     6ea:	f1 c0       	rjmp	.+482    	; 0x8ce <wifi_init+0x38c>
     6ec:	a7 ea       	ldi	r26, 0xA7	; 167
     6ee:	b1 e6       	ldi	r27, 0x61	; 97
     6f0:	11 97       	sbiw	r26, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <wifi_init+0x1ae>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <wifi_init+0x1b4>
     6f6:	00 00       	nop
     6f8:	81 50       	subi	r24, 0x01	; 1
	putchar1(0x0a);
	//---wait reply--
	rx1buffer[1]=0x00;
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<100;t++)
     6fa:	a1 f7       	brne	.-24     	; 0x6e4 <wifi_init+0x1a2>
     6fc:	8f e3       	ldi	r24, 0x3F	; 63
     6fe:	9d e0       	ldi	r25, 0x0D	; 13
     700:	a3 e0       	ldi	r26, 0x03	; 3
     702:	81 50       	subi	r24, 0x01	; 1
     704:	90 40       	sbci	r25, 0x00	; 0
     706:	a0 40       	sbci	r26, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <wifi_init+0x1c0>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <wifi_init+0x1ca>
     70c:	00 00       	nop
		//BEEP(100);
	}
	_delay_ms(1000);
	//---
	
	for(ip=&sendser[0];ip<(&sendser[0]+40);ip++) //AT+NETP=TCP,CLIENT,7300,wiot.chaction.cn  40
     70e:	83 e8       	ldi	r24, 0x83	; 131
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	90 93 04 04 	sts	0x0404, r25
     716:	80 93 03 04 	sts	0x0403, r24
     71a:	9c 01       	movw	r18, r24
     71c:	28 5d       	subi	r18, 0xD8	; 216
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	82 17       	cp	r24, r18
     722:	93 07       	cpc	r25, r19
     724:	90 f4       	brcc	.+36     	; 0x74a <wifi_init+0x208>
     726:	fc 01       	movw	r30, r24
     728:	cb ea       	ldi	r28, 0xAB	; 171
     72a:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
     72c:	80 81       	ld	r24, Z
     72e:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
		//BEEP(100);
	}
	_delay_ms(1000);
	//---
	
	for(ip=&sendser[0];ip<(&sendser[0]+40);ip++) //AT+NETP=TCP,CLIENT,7300,wiot.chaction.cn  40
     732:	e0 91 03 04 	lds	r30, 0x0403
     736:	f0 91 04 04 	lds	r31, 0x0404
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	f0 93 04 04 	sts	0x0404, r31
     740:	e0 93 03 04 	sts	0x0403, r30
     744:	ec 17       	cp	r30, r28
     746:	fd 07       	cpc	r31, r29
     748:	88 f3       	brcs	.-30     	; 0x72c <wifi_init+0x1ea>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
     74a:	8d e0       	ldi	r24, 0x0D	; 13
     74c:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
     756:	10 92 36 04 	sts	0x0436, r1
     75a:	af e4       	ldi	r26, 0x4F	; 79
     75c:	b3 ec       	ldi	r27, 0xC3	; 195
     75e:	11 97       	sbiw	r26, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <wifi_init+0x21c>
     762:	00 c0       	rjmp	.+0      	; 0x764 <wifi_init+0x222>
     764:	00 00       	nop
	_delay_ms(200);
	rx1poit=0;
     766:	10 92 fb 03 	sts	0x03FB, r1
     76a:	84 e6       	ldi	r24, 0x64	; 100
	for(t=0;t<100;t++)
	{
		if(rx1buffer[1]==0x6f) t=101;
     76c:	e6 e3       	ldi	r30, 0x36	; 54
     76e:	f4 e0       	ldi	r31, 0x04	; 4
     770:	90 81       	ld	r25, Z
     772:	9f 36       	cpi	r25, 0x6F	; 111
     774:	09 f4       	brne	.+2      	; 0x778 <wifi_init+0x236>
     776:	b2 c0       	rjmp	.+356    	; 0x8dc <wifi_init+0x39a>
     778:	a7 ea       	ldi	r26, 0xA7	; 167
     77a:	b1 e6       	ldi	r27, 0x61	; 97
     77c:	11 97       	sbiw	r26, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <wifi_init+0x23a>
     780:	00 c0       	rjmp	.+0      	; 0x782 <wifi_init+0x240>
     782:	00 00       	nop
     784:	81 50       	subi	r24, 0x01	; 1
	putchar1(0x0a);
	//---wait reply--
	rx1buffer[1]=0x00;
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<100;t++)
     786:	a1 f7       	brne	.-24     	; 0x770 <wifi_init+0x22e>
     788:	87 ea       	ldi	r24, 0xA7	; 167
     78a:	91 e6       	ldi	r25, 0x61	; 97
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <wifi_init+0x24a>
     790:	00 c0       	rjmp	.+0      	; 0x792 <wifi_init+0x250>
     792:	00 00       	nop
		//BEEP(100);  
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendair[0];ip<(&sendair[0]+12);ip++) //AT+SMTSL=air AT+ENTM
     794:	86 e7       	ldi	r24, 0x76	; 118
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	90 93 04 04 	sts	0x0404, r25
     79c:	80 93 03 04 	sts	0x0403, r24
     7a0:	9c 01       	movw	r18, r24
     7a2:	24 5f       	subi	r18, 0xF4	; 244
     7a4:	3f 4f       	sbci	r19, 0xFF	; 255
     7a6:	82 17       	cp	r24, r18
     7a8:	93 07       	cpc	r25, r19
     7aa:	90 f4       	brcc	.+36     	; 0x7d0 <wifi_init+0x28e>
     7ac:	fc 01       	movw	r30, r24
     7ae:	c2 e8       	ldi	r28, 0x82	; 130
     7b0:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
     7b2:	80 81       	ld	r24, Z
     7b4:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
		//BEEP(100);  
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendair[0];ip<(&sendair[0]+12);ip++) //AT+SMTSL=air AT+ENTM
     7b8:	e0 91 03 04 	lds	r30, 0x0403
     7bc:	f0 91 04 04 	lds	r31, 0x0404
     7c0:	31 96       	adiw	r30, 0x01	; 1
     7c2:	f0 93 04 04 	sts	0x0404, r31
     7c6:	e0 93 03 04 	sts	0x0403, r30
     7ca:	ec 17       	cp	r30, r28
     7cc:	fd 07       	cpc	r31, r29
     7ce:	88 f3       	brcs	.-30     	; 0x7b2 <wifi_init+0x270>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
     7d0:	8d e0       	ldi	r24, 0x0D	; 13
     7d2:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
     7dc:	10 92 36 04 	sts	0x0436, r1
     7e0:	af e4       	ldi	r26, 0x4F	; 79
     7e2:	b3 ec       	ldi	r27, 0xC3	; 195
     7e4:	11 97       	sbiw	r26, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <wifi_init+0x2a2>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <wifi_init+0x2a8>
     7ea:	00 00       	nop
	_delay_ms(200);
	rx1poit=0;
     7ec:	10 92 fb 03 	sts	0x03FB, r1
     7f0:	84 e6       	ldi	r24, 0x64	; 100
	for(t=0;t<100;t++)
	{
		if(rx1buffer[1]==0x6f) t=101;
     7f2:	e6 e3       	ldi	r30, 0x36	; 54
     7f4:	f4 e0       	ldi	r31, 0x04	; 4
     7f6:	90 81       	ld	r25, Z
     7f8:	9f 36       	cpi	r25, 0x6F	; 111
     7fa:	09 f4       	brne	.+2      	; 0x7fe <wifi_init+0x2bc>
     7fc:	76 c0       	rjmp	.+236    	; 0x8ea <wifi_init+0x3a8>
     7fe:	a7 ea       	ldi	r26, 0xA7	; 167
     800:	b1 e6       	ldi	r27, 0x61	; 97
     802:	11 97       	sbiw	r26, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <wifi_init+0x2c0>
     806:	00 c0       	rjmp	.+0      	; 0x808 <wifi_init+0x2c6>
     808:	00 00       	nop
     80a:	81 50       	subi	r24, 0x01	; 1
	putchar1(0x0a);
	//---wait reply--
	rx1buffer[1]=0x00;
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<100;t++)
     80c:	a1 f7       	brne	.-24     	; 0x7f6 <wifi_init+0x2b4>
     80e:	87 ea       	ldi	r24, 0xA7	; 167
     810:	91 e6       	ldi	r25, 0x61	; 97
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <wifi_init+0x2d0>
     816:	00 c0       	rjmp	.+0      	; 0x818 <wifi_init+0x2d6>
     818:	00 00       	nop
		//BEEP(100);
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendquit[0];ip<(&sendquit[0]+7);ip++) //AT+ENTM
     81a:	8e e6       	ldi	r24, 0x6E	; 110
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	90 93 04 04 	sts	0x0404, r25
     822:	80 93 03 04 	sts	0x0403, r24
     826:	9c 01       	movw	r18, r24
     828:	29 5f       	subi	r18, 0xF9	; 249
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	82 17       	cp	r24, r18
     82e:	93 07       	cpc	r25, r19
     830:	90 f4       	brcc	.+36     	; 0x856 <wifi_init+0x314>
     832:	fc 01       	movw	r30, r24
     834:	c5 e7       	ldi	r28, 0x75	; 117
     836:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
     838:	80 81       	ld	r24, Z
     83a:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
		//BEEP(100);
	}
	_delay_ms(100);
	//---
	
	for(ip=&sendquit[0];ip<(&sendquit[0]+7);ip++) //AT+ENTM
     83e:	e0 91 03 04 	lds	r30, 0x0403
     842:	f0 91 04 04 	lds	r31, 0x0404
     846:	31 96       	adiw	r30, 0x01	; 1
     848:	f0 93 04 04 	sts	0x0404, r31
     84c:	e0 93 03 04 	sts	0x0403, r30
     850:	ec 17       	cp	r30, r28
     852:	fd 07       	cpc	r31, r29
     854:	88 f3       	brcs	.-30     	; 0x838 <wifi_init+0x2f6>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
     856:	8d e0       	ldi	r24, 0x0D	; 13
     858:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
     85c:	8a e0       	ldi	r24, 0x0A	; 10
     85e:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
     862:	10 92 36 04 	sts	0x0436, r1
     866:	af e4       	ldi	r26, 0x4F	; 79
     868:	b3 ec       	ldi	r27, 0xC3	; 195
     86a:	11 97       	sbiw	r26, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <wifi_init+0x328>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <wifi_init+0x32e>
     870:	00 00       	nop
	_delay_ms(200);
	rx1poit=0;
     872:	10 92 fb 03 	sts	0x03FB, r1
     876:	84 e6       	ldi	r24, 0x64	; 100
	for(t=0;t<100;t++)
	{
		if(rx1buffer[1]==0x6f) t=101;
     878:	e6 e3       	ldi	r30, 0x36	; 54
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	90 81       	ld	r25, Z
     87e:	9f 36       	cpi	r25, 0x6F	; 111
     880:	d9 f1       	breq	.+118    	; 0x8f8 <wifi_init+0x3b6>
     882:	a7 ea       	ldi	r26, 0xA7	; 167
     884:	b1 e6       	ldi	r27, 0x61	; 97
     886:	11 97       	sbiw	r26, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <wifi_init+0x344>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <wifi_init+0x34a>
     88c:	00 00       	nop
     88e:	81 50       	subi	r24, 0x01	; 1
	putchar1(0x0a);
	//---wait reply--
	rx1buffer[1]=0x00;
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<100;t++)
     890:	a9 f7       	brne	.-22     	; 0x87c <wifi_init+0x33a>
     892:	87 ea       	ldi	r24, 0xA7	; 167
     894:	91 e6       	ldi	r25, 0x61	; 97
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <wifi_init+0x354>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <wifi_init+0x35a>
     89c:	00 00       	nop
		//BEEP(100);
	}
	_delay_ms(100);
	//---
	
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret
     8a4:	a7 ea       	ldi	r26, 0xA7	; 167
     8a6:	b1 e6       	ldi	r27, 0x61	; 97
     8a8:	11 97       	sbiw	r26, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <wifi_init+0x366>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <wifi_init+0x36c>
     8ae:	00 00       	nop
     8b0:	7f ce       	rjmp	.-770    	; 0x5b0 <wifi_init+0x6e>
     8b2:	87 ea       	ldi	r24, 0xA7	; 167
     8b4:	91 e6       	ldi	r25, 0x61	; 97
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <wifi_init+0x374>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <wifi_init+0x37a>
     8bc:	00 00       	nop
     8be:	98 ce       	rjmp	.-720    	; 0x5f0 <wifi_init+0xae>
     8c0:	a7 ea       	ldi	r26, 0xA7	; 167
     8c2:	b1 e6       	ldi	r27, 0x61	; 97
     8c4:	11 97       	sbiw	r26, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <wifi_init+0x382>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <wifi_init+0x388>
     8ca:	00 00       	nop
     8cc:	d4 ce       	rjmp	.-600    	; 0x676 <wifi_init+0x134>
     8ce:	87 ea       	ldi	r24, 0xA7	; 167
     8d0:	91 e6       	ldi	r25, 0x61	; 97
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <wifi_init+0x390>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <wifi_init+0x396>
     8d8:	00 00       	nop
     8da:	10 cf       	rjmp	.-480    	; 0x6fc <wifi_init+0x1ba>
     8dc:	a7 ea       	ldi	r26, 0xA7	; 167
     8de:	b1 e6       	ldi	r27, 0x61	; 97
     8e0:	11 97       	sbiw	r26, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <wifi_init+0x39e>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <wifi_init+0x3a4>
     8e6:	00 00       	nop
     8e8:	4f cf       	rjmp	.-354    	; 0x788 <wifi_init+0x246>
     8ea:	87 ea       	ldi	r24, 0xA7	; 167
     8ec:	91 e6       	ldi	r25, 0x61	; 97
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <wifi_init+0x3ac>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <wifi_init+0x3b2>
     8f4:	00 00       	nop
     8f6:	8b cf       	rjmp	.-234    	; 0x80e <wifi_init+0x2cc>
     8f8:	a7 ea       	ldi	r26, 0xA7	; 167
     8fa:	b1 e6       	ldi	r27, 0x61	; 97
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <wifi_init+0x3ba>
     900:	00 c0       	rjmp	.+0      	; 0x902 <wifi_init+0x3c0>
     902:	00 00       	nop
     904:	c6 cf       	rjmp	.-116    	; 0x892 <wifi_init+0x350>

00000906 <CRC16_txt11>:
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen;n++)//while (wDataLen--)     // 计算CRC
     906:	66 23       	and	r22, r22
     908:	e9 f0       	breq	.+58     	; 0x944 <CRC16_txt11+0x3e>
     90a:	ab eb       	ldi	r26, 0xBB	; 187
     90c:	b5 e0       	ldi	r27, 0x05	; 5
0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e,
0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26,
0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f,
0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17,
 };
void CRC16_txt11(uchar addr, uchar wDataLen)
     90e:	ad 01       	movw	r20, r26
     910:	4f 5f       	subi	r20, 0xFF	; 255
     912:	5f 4f       	sbci	r21, 0xFF	; 255
     914:	61 50       	subi	r22, 0x01	; 1
     916:	46 0f       	add	r20, r22
     918:	51 1d       	adc	r21, r1
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
	for(n=0;n<wDataLen;n++)//while (wDataLen--)     // 计算CRC
	{   
		chCRCHi=chCRC/256;
		wIndex = chCRCHi ^ txtdat1[n];
		chCRC<<=8;
		chCRC^=TABLE1021[wIndex];
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	71 e0       	ldi	r23, 0x01	; 1
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen;n++)//while (wDataLen--)     // 计算CRC
	{   
		chCRCHi=chCRC/256;
		wIndex = chCRCHi ^ txtdat1[n];
     922:	ed 91       	ld	r30, X+
		chCRC<<=8;
     924:	38 2f       	mov	r19, r24
     926:	22 27       	eor	r18, r18
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen;n++)//while (wDataLen--)     // 计算CRC
	{   
		chCRCHi=chCRC/256;
		wIndex = chCRCHi ^ txtdat1[n];
     928:	e9 27       	eor	r30, r25
		chCRC<<=8;
		chCRC^=TABLE1021[wIndex];
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	e6 0f       	add	r30, r22
     932:	f7 1f       	adc	r31, r23
     934:	80 81       	ld	r24, Z
     936:	91 81       	ldd	r25, Z+1	; 0x01
     938:	82 27       	eor	r24, r18
     93a:	93 27       	eor	r25, r19
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen;n++)//while (wDataLen--)     // 计算CRC
     93c:	a4 17       	cp	r26, r20
     93e:	b5 07       	cpc	r27, r21
     940:	81 f7       	brne	.-32     	; 0x922 <CRC16_txt11+0x1c>
     942:	02 c0       	rjmp	.+4      	; 0x948 <CRC16_txt11+0x42>
0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17,
 };
void CRC16_txt11(uchar addr, uchar wDataLen)
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
		wIndex = chCRCHi ^ txtdat1[n];
		chCRC<<=8;
		chCRC^=TABLE1021[wIndex];
	}
	//return ((chCRCHi << 8) | chCRCLo); chCRCLo;//chCRCHi;//
	DATAlist[0x79]=chCRC/256;
     948:	90 93 ed 04 	sts	0x04ED, r25
	DATAlist[0x78]=chCRC-(DATAlist[0x78]*256);
     94c:	80 93 ec 04 	sts	0x04EC, r24
}
     950:	08 95       	ret

00000952 <send_reply>:
//***********************************************************************
//                  发送执行成功失败返回函数   
// 
//***********************************************************************
void send_reply(uchar resultnum)
{txtdat1[0]=0xAC;txtdat1[1]=0x33;txtdat1[2]=0x33;txtdat1[3]=0x80;
     952:	9c ea       	ldi	r25, 0xAC	; 172
     954:	90 93 bb 05 	sts	0x05BB, r25
     958:	23 e3       	ldi	r18, 0x33	; 51
     95a:	20 93 bc 05 	sts	0x05BC, r18
     95e:	20 93 bd 05 	sts	0x05BD, r18
     962:	90 e8       	ldi	r25, 0x80	; 128
     964:	90 93 be 05 	sts	0x05BE, r25
 txtdat1[4]=0x00;txtdat1[5]=0x0d;
     968:	10 92 bf 05 	sts	0x05BF, r1
     96c:	9d e0       	ldi	r25, 0x0D	; 13
     96e:	90 93 c0 05 	sts	0x05C0, r25
 txtdat1[6]=IDDAT1;txtdat1[7]=IDDAT2;txtdat1[8]=IDDAT3;txtdat1[9]=IDDAT4;
     972:	92 e4       	ldi	r25, 0x42	; 66
     974:	90 93 c1 05 	sts	0x05C1, r25
     978:	91 e3       	ldi	r25, 0x31	; 49
     97a:	90 93 c2 05 	sts	0x05C2, r25
     97e:	90 93 c3 05 	sts	0x05C3, r25
     982:	90 93 c4 05 	sts	0x05C4, r25
 txtdat1[10]=IDDAT5;txtdat1[11]=IDDAT6;txtdat1[12]=IDDAT7;txtdat1[13]=IDDAT8;
     986:	90 93 c5 05 	sts	0x05C5, r25
     98a:	90 93 c6 05 	sts	0x05C6, r25
     98e:	20 93 c7 05 	sts	0x05C7, r18
     992:	96 e3       	ldi	r25, 0x36	; 54
     994:	90 93 c8 05 	sts	0x05C8, r25
 txtdat1[14]=0x00;txtdat1[15]=0x16;txtdat1[16]=resultnum;
     998:	10 92 c9 05 	sts	0x05C9, r1
     99c:	96 e1       	ldi	r25, 0x16	; 22
     99e:	90 93 ca 05 	sts	0x05CA, r25
     9a2:	80 93 cb 05 	sts	0x05CB, r24
 CRC16_txt11(0,17);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	61 e1       	ldi	r22, 0x11	; 17
     9aa:	0e 94 83 04 	call	0x906	; 0x906 <CRC16_txt11>
 txtdat1[17]=DATAlist[0x78];txtdat1[18]=DATAlist[0x79];
     9ae:	80 91 ec 04 	lds	r24, 0x04EC
     9b2:	80 93 cc 05 	sts	0x05CC, r24
     9b6:	80 91 ed 04 	lds	r24, 0x04ED
     9ba:	80 93 cd 05 	sts	0x05CD, r24
 txtdat1[19]=0xFC;txtdat1[20]=0xFF;
     9be:	8c ef       	ldi	r24, 0xFC	; 252
     9c0:	80 93 ce 05 	sts	0x05CE, r24
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	80 93 cf 05 	sts	0x05CF, r24
 uart1_send(21);	
     9ca:	85 e1       	ldi	r24, 0x15	; 21
     9cc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart1_send>
}
     9d0:	08 95       	ret

000009d2 <send_com>:
//***********************************************************************
//                  发送取设备指令函数
// 有返回指令
//***********************************************************************
void send_com(void)
{txtdat1[0]=0xAC;txtdat1[1]=0x33;txtdat1[2]=0x33;txtdat1[3]=0x80;
     9d2:	8c ea       	ldi	r24, 0xAC	; 172
     9d4:	80 93 bb 05 	sts	0x05BB, r24
     9d8:	93 e3       	ldi	r25, 0x33	; 51
     9da:	90 93 bc 05 	sts	0x05BC, r25
     9de:	90 93 bd 05 	sts	0x05BD, r25
     9e2:	80 e8       	ldi	r24, 0x80	; 128
     9e4:	80 93 be 05 	sts	0x05BE, r24
 txtdat1[4]=0x00;txtdat1[5]=0x0d;
     9e8:	10 92 bf 05 	sts	0x05BF, r1
     9ec:	8d e0       	ldi	r24, 0x0D	; 13
     9ee:	80 93 c0 05 	sts	0x05C0, r24
 txtdat1[6]=IDDAT1;txtdat1[7]=IDDAT2;txtdat1[8]=IDDAT3;txtdat1[9]=IDDAT4;
     9f2:	82 e4       	ldi	r24, 0x42	; 66
     9f4:	80 93 c1 05 	sts	0x05C1, r24
     9f8:	81 e3       	ldi	r24, 0x31	; 49
     9fa:	80 93 c2 05 	sts	0x05C2, r24
     9fe:	80 93 c3 05 	sts	0x05C3, r24
     a02:	80 93 c4 05 	sts	0x05C4, r24
 txtdat1[10]=IDDAT5;txtdat1[11]=IDDAT6;txtdat1[12]=IDDAT7;txtdat1[13]=IDDAT8;
     a06:	80 93 c5 05 	sts	0x05C5, r24
     a0a:	80 93 c6 05 	sts	0x05C6, r24
     a0e:	90 93 c7 05 	sts	0x05C7, r25
     a12:	86 e3       	ldi	r24, 0x36	; 54
     a14:	80 93 c8 05 	sts	0x05C8, r24
 txtdat1[14]=0x00;txtdat1[15]=0x06;//txtdat1[16]=DATAlist[1];txtdat1[17]=DATAlist[2];
     a18:	10 92 c9 05 	sts	0x05C9, r1
     a1c:	86 e0       	ldi	r24, 0x06	; 6
     a1e:	80 93 ca 05 	sts	0x05CA, r24
 CRC16_txt11(0,16);
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	60 e1       	ldi	r22, 0x10	; 16
     a26:	0e 94 83 04 	call	0x906	; 0x906 <CRC16_txt11>
 txtdat1[16]=DATAlist[0x78];txtdat1[17]=DATAlist[0x79];
     a2a:	80 91 ec 04 	lds	r24, 0x04EC
     a2e:	80 93 cb 05 	sts	0x05CB, r24
     a32:	80 91 ed 04 	lds	r24, 0x04ED
     a36:	80 93 cc 05 	sts	0x05CC, r24
 txtdat1[18]=0xFC;txtdat1[19]=0xFF;
     a3a:	8c ef       	ldi	r24, 0xFC	; 252
     a3c:	80 93 cd 05 	sts	0x05CD, r24
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	80 93 ce 05 	sts	0x05CE, r24
 uart1_send(20);	
     a46:	84 e1       	ldi	r24, 0x14	; 20
     a48:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart1_send>
}
     a4c:	08 95       	ret

00000a4e <send_error>:
//***********************************************************************
//                  发送设备故障代码函数   判别返回状态是否返回，返回
// 有返回指令 没指定
//***********************************************************************
void send_error(void)
{txtdat1[0]=0xAC;txtdat1[1]=0x33;txtdat1[2]=0x33;txtdat1[3]=0x80;
     a4e:	8c ea       	ldi	r24, 0xAC	; 172
     a50:	80 93 bb 05 	sts	0x05BB, r24
     a54:	93 e3       	ldi	r25, 0x33	; 51
     a56:	90 93 bc 05 	sts	0x05BC, r25
     a5a:	90 93 bd 05 	sts	0x05BD, r25
     a5e:	80 e8       	ldi	r24, 0x80	; 128
     a60:	80 93 be 05 	sts	0x05BE, r24
 txtdat1[4]=0x00;txtdat1[5]=0x0d;
     a64:	10 92 bf 05 	sts	0x05BF, r1
     a68:	8d e0       	ldi	r24, 0x0D	; 13
     a6a:	80 93 c0 05 	sts	0x05C0, r24
 txtdat1[6]=IDDAT1;txtdat1[7]=IDDAT2;txtdat1[8]=IDDAT3;txtdat1[9]=IDDAT4;
     a6e:	82 e4       	ldi	r24, 0x42	; 66
     a70:	80 93 c1 05 	sts	0x05C1, r24
     a74:	81 e3       	ldi	r24, 0x31	; 49
     a76:	80 93 c2 05 	sts	0x05C2, r24
     a7a:	80 93 c3 05 	sts	0x05C3, r24
     a7e:	80 93 c4 05 	sts	0x05C4, r24
 txtdat1[10]=IDDAT5;txtdat1[11]=IDDAT6;txtdat1[12]=IDDAT7;txtdat1[13]=IDDAT8;
     a82:	80 93 c5 05 	sts	0x05C5, r24
     a86:	80 93 c6 05 	sts	0x05C6, r24
     a8a:	90 93 c7 05 	sts	0x05C7, r25
     a8e:	86 e3       	ldi	r24, 0x36	; 54
     a90:	80 93 c8 05 	sts	0x05C8, r24
 txtdat1[14]=0x00;txtdat1[15]=0x04;
     a94:	10 92 c9 05 	sts	0x05C9, r1
     a98:	84 e0       	ldi	r24, 0x04	; 4
     a9a:	80 93 ca 05 	sts	0x05CA, r24
 
 if(DATAlist[0x22]&0x04) //缺源水
     a9e:	80 91 96 04 	lds	r24, 0x0496
     aa2:	82 ff       	sbrs	r24, 2
     aa4:	06 c0       	rjmp	.+12     	; 0xab2 <send_error+0x64>
    {
		DATAlist[0x64]|=0x08;//置1
     aa6:	80 91 d8 04 	lds	r24, 0x04D8
     aaa:	88 60       	ori	r24, 0x08	; 8
     aac:	80 93 d8 04 	sts	0x04D8, r24
     ab0:	05 c0       	rjmp	.+10     	; 0xabc <send_error+0x6e>
	}
 else
    {
		DATAlist[0x64]&=0xf7; //置0
     ab2:	80 91 d8 04 	lds	r24, 0x04D8
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 93 d8 04 	sts	0x04D8, r24
	}
	
 txtdat1[16]=DATAlist[0x09];
     abc:	80 91 7d 04 	lds	r24, 0x047D
     ac0:	80 93 cb 05 	sts	0x05CB, r24
 txtdat1[17]=DATAlist[0x0a];
     ac4:	80 91 7e 04 	lds	r24, 0x047E
     ac8:	80 93 cc 05 	sts	0x05CC, r24
 txtdat1[18]=DATAlist[0x0b];
     acc:	80 91 7f 04 	lds	r24, 0x047F
     ad0:	80 93 cd 05 	sts	0x05CD, r24
 CRC16_txt11(0,19);
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	63 e1       	ldi	r22, 0x13	; 19
     ad8:	0e 94 83 04 	call	0x906	; 0x906 <CRC16_txt11>
 txtdat1[19]=DATAlist[0x78];txtdat1[20]=DATAlist[0x79];
     adc:	80 91 ec 04 	lds	r24, 0x04EC
     ae0:	80 93 ce 05 	sts	0x05CE, r24
     ae4:	80 91 ed 04 	lds	r24, 0x04ED
     ae8:	80 93 cf 05 	sts	0x05CF, r24
 txtdat1[21]=0xFC;txtdat1[22]=0xFF;
     aec:	8c ef       	ldi	r24, 0xFC	; 252
     aee:	80 93 d0 05 	sts	0x05D0, r24
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	80 93 d1 05 	sts	0x05D1, r24
 uart1_send(23);
     af8:	87 e1       	ldi	r24, 0x17	; 23
     afa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart1_send>
     afe:	87 ea       	ldi	r24, 0xA7	; 167
     b00:	91 e6       	ldi	r25, 0x61	; 97
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <send_error+0xb4>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <send_error+0xba>
     b08:	00 00       	nop
 _delay_ms(100);
 //uart0_send1(23);	
}
     b0a:	08 95       	ret

00000b0c <send_filter>:
//***********************************************************************
//                  发送滤芯数值
// 没返回
//***********************************************************************
void send_filter(void)
{txtdat1[0]=0xAC;txtdat1[1]=0x33;txtdat1[2]=0x33;txtdat1[3]=0x80;
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	8c ea       	ldi	r24, 0xAC	; 172
     b12:	80 93 bb 05 	sts	0x05BB, r24
     b16:	93 e3       	ldi	r25, 0x33	; 51
     b18:	90 93 bc 05 	sts	0x05BC, r25
     b1c:	90 93 bd 05 	sts	0x05BD, r25
     b20:	80 e8       	ldi	r24, 0x80	; 128
     b22:	80 93 be 05 	sts	0x05BE, r24
 txtdat1[4]=0x00;txtdat1[5]=0x1A;
     b26:	10 92 bf 05 	sts	0x05BF, r1
     b2a:	8a e1       	ldi	r24, 0x1A	; 26
     b2c:	80 93 c0 05 	sts	0x05C0, r24
 txtdat1[6]=IDDAT1;txtdat1[7]=IDDAT2;txtdat1[8]=IDDAT3;txtdat1[9]=IDDAT4;
     b30:	82 e4       	ldi	r24, 0x42	; 66
     b32:	80 93 c1 05 	sts	0x05C1, r24
     b36:	81 e3       	ldi	r24, 0x31	; 49
     b38:	80 93 c2 05 	sts	0x05C2, r24
     b3c:	80 93 c3 05 	sts	0x05C3, r24
     b40:	80 93 c4 05 	sts	0x05C4, r24
 txtdat1[10]=IDDAT5;txtdat1[11]=IDDAT6;txtdat1[12]=IDDAT7;txtdat1[13]=IDDAT8;
     b44:	80 93 c5 05 	sts	0x05C5, r24
     b48:	80 93 c6 05 	sts	0x05C6, r24
     b4c:	90 93 c7 05 	sts	0x05C7, r25
     b50:	86 e3       	ldi	r24, 0x36	; 54
     b52:	80 93 c8 05 	sts	0x05C8, r24
 txtdat1[14]=0x00;txtdat1[15]=0x03;
     b56:	10 92 c9 05 	sts	0x05C9, r1
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	80 93 ca 05 	sts	0x05CA, r24
 txtdat1[16]=DATAlist[0x3b]; txtdat1[17]=DATAlist[0x3c];//制水总量
     b60:	80 91 af 04 	lds	r24, 0x04AF
     b64:	80 93 cb 05 	sts	0x05CB, r24
     b68:	80 91 b0 04 	lds	r24, 0x04B0
     b6c:	80 93 cc 05 	sts	0x05CC, r24
 txtdat1[18]=DATAlist[0x3d]; txtdat1[19]=DATAlist[0x3e];//限制制水总量
     b70:	80 91 b1 04 	lds	r24, 0x04B1
     b74:	80 93 cd 05 	sts	0x05CD, r24
     b78:	80 91 b2 04 	lds	r24, 0x04B2
     b7c:	80 93 ce 05 	sts	0x05CE, r24
 txtdat1[20]=0x06;//滤芯数
     b80:	86 e0       	ldi	r24, 0x06	; 6
     b82:	80 93 cf 05 	sts	0x05CF, r24
 txtdat1[21]=DATAlist[0x24];txtdat1[22]=DATAlist[0x25];//1
     b86:	80 91 98 04 	lds	r24, 0x0498
     b8a:	80 93 d0 05 	sts	0x05D0, r24
     b8e:	80 91 99 04 	lds	r24, 0x0499
     b92:	80 93 d1 05 	sts	0x05D1, r24
  txtdat1[23]=DATAlist[0x26];txtdat1[24]=DATAlist[0x27];//2
     b96:	80 91 9a 04 	lds	r24, 0x049A
     b9a:	80 93 d2 05 	sts	0x05D2, r24
     b9e:	80 91 9b 04 	lds	r24, 0x049B
     ba2:	80 93 d3 05 	sts	0x05D3, r24
  txtdat1[25]=DATAlist[0x28];txtdat1[26]=DATAlist[0x29];//3
     ba6:	80 91 9c 04 	lds	r24, 0x049C
     baa:	80 93 d4 05 	sts	0x05D4, r24
     bae:	80 91 9d 04 	lds	r24, 0x049D
     bb2:	80 93 d5 05 	sts	0x05D5, r24
  txtdat1[27]=DATAlist[0x2A];txtdat1[28]=DATAlist[0x2B];//4
     bb6:	80 91 9e 04 	lds	r24, 0x049E
     bba:	80 93 d6 05 	sts	0x05D6, r24
     bbe:	80 91 9f 04 	lds	r24, 0x049F
     bc2:	80 93 d7 05 	sts	0x05D7, r24
  txtdat1[29]=DATAlist[0x2C];txtdat1[30]=DATAlist[0x2D];//5
     bc6:	80 91 a0 04 	lds	r24, 0x04A0
     bca:	80 93 d8 05 	sts	0x05D8, r24
  txtdat1[30]=DATAlist[0x2E];txtdat1[31]=DATAlist[0x2F];//6
     bce:	80 91 a2 04 	lds	r24, 0x04A2
     bd2:	80 93 d9 05 	sts	0x05D9, r24
     bd6:	cf ea       	ldi	r28, 0xAF	; 175
     bd8:	d4 e0       	ldi	r29, 0x04	; 4
     bda:	80 91 a3 04 	lds	r24, 0x04A3
     bde:	80 93 da 05 	sts	0x05DA, r24
 CRC16_txt11(0,32);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	60 e2       	ldi	r22, 0x20	; 32
     be6:	0e 94 83 04 	call	0x906	; 0x906 <CRC16_txt11>
 txtdat1[32]=DATAlist[0x78];txtdat1[33]=DATAlist[0x79];
     bea:	8d ad       	sts	0x6d, r24
     bec:	80 93 db 05 	sts	0x05DB, r24
     bf0:	8e ad       	sts	0x6e, r24
     bf2:	80 93 dc 05 	sts	0x05DC, r24
 txtdat1[34]=0xFC;txtdat1[35]=0xFF;
     bf6:	8c ef       	ldi	r24, 0xFC	; 252
     bf8:	80 93 dd 05 	sts	0x05DD, r24
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	80 93 de 05 	sts	0x05DE, r24
 uart1_send(36);
     c02:	84 e2       	ldi	r24, 0x24	; 36
     c04:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart1_send>
     c08:	87 ea       	ldi	r24, 0xA7	; 167
     c0a:	91 e6       	ldi	r25, 0x61	; 97
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <send_filter+0x100>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <send_filter+0x106>
     c12:	00 00       	nop
 _delay_ms(100);
 uart0_send1(36);	
     c14:	84 e2       	ldi	r24, 0x24	; 36
     c16:	0e 94 40 01 	call	0x280	; 0x280 <uart0_send1>
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <send_tds_temp_speed>:
//***********************************************************************
//                  发送设备TDS和冰水、温水、开水温度和流速函数
// 没返回
//***********************************************************************
void send_tds_temp_speed(void)
{txtdat1[0]=0xAC;txtdat1[1]=0x33;txtdat1[2]=0x33;txtdat1[3]=0x80;
     c20:	8c ea       	ldi	r24, 0xAC	; 172
     c22:	80 93 bb 05 	sts	0x05BB, r24
     c26:	93 e3       	ldi	r25, 0x33	; 51
     c28:	90 93 bc 05 	sts	0x05BC, r25
     c2c:	90 93 bd 05 	sts	0x05BD, r25
     c30:	80 e8       	ldi	r24, 0x80	; 128
     c32:	80 93 be 05 	sts	0x05BE, r24
 txtdat1[4]=0x00;txtdat1[5]=0x1A;
     c36:	10 92 bf 05 	sts	0x05BF, r1
     c3a:	8a e1       	ldi	r24, 0x1A	; 26
     c3c:	80 93 c0 05 	sts	0x05C0, r24
 txtdat1[6]=IDDAT1;txtdat1[7]=IDDAT2;txtdat1[8]=IDDAT3;txtdat1[9]=IDDAT4;
     c40:	82 e4       	ldi	r24, 0x42	; 66
     c42:	80 93 c1 05 	sts	0x05C1, r24
     c46:	81 e3       	ldi	r24, 0x31	; 49
     c48:	80 93 c2 05 	sts	0x05C2, r24
     c4c:	80 93 c3 05 	sts	0x05C3, r24
     c50:	80 93 c4 05 	sts	0x05C4, r24
 txtdat1[10]=IDDAT5;txtdat1[11]=IDDAT6;txtdat1[12]=IDDAT7;txtdat1[13]=IDDAT8;
     c54:	80 93 c5 05 	sts	0x05C5, r24
     c58:	80 93 c6 05 	sts	0x05C6, r24
     c5c:	90 93 c7 05 	sts	0x05C7, r25
     c60:	86 e3       	ldi	r24, 0x36	; 54
     c62:	80 93 c8 05 	sts	0x05C8, r24
 txtdat1[14]=0x00;txtdat1[15]=0x02;
     c66:	10 92 c9 05 	sts	0x05C9, r1
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	80 93 ca 05 	sts	0x05CA, r24
 txtdat1[16]=DATAlist[0x41+12];//DATAlist[0x51]; TDS1
     c70:	80 91 c1 04 	lds	r24, 0x04C1
     c74:	80 93 cb 05 	sts	0x05CB, r24
 txtdat1[17]=DATAlist[0x41+13];//DATAlist[0x52]; 
     c78:	80 91 c2 04 	lds	r24, 0x04C2
     c7c:	80 93 cc 05 	sts	0x05CC, r24
 txtdat1[18]=DATAlist[0x41+14];//DATAlist[0x53]; TDS2
     c80:	80 91 c3 04 	lds	r24, 0x04C3
     c84:	80 93 cd 05 	sts	0x05CD, r24
 txtdat1[19]=DATAlist[0x41+15];//DATAlist[0x54];
     c88:	80 91 c4 04 	lds	r24, 0x04C4
     c8c:	80 93 ce 05 	sts	0x05CE, r24
 txtdat1[20]=DATAlist[0x46];txtdat1[21]=0;txtdat1[22]=DATAlist[0x44];//冰水  温水  开水
     c90:	80 91 ba 04 	lds	r24, 0x04BA
     c94:	80 93 cf 05 	sts	0x05CF, r24
     c98:	10 92 d0 05 	sts	0x05D0, r1
     c9c:	80 91 b8 04 	lds	r24, 0x04B8
     ca0:	80 93 d1 05 	sts	0x05D1, r24
 txtdat1[23]=0;txtdat1[24]=0;txtdat1[25]=0;//txtdat1[23]=DATAlist[7];txtdat1[24]=DATAlist[6];txtdat1[25]=DATAlist[5];
     ca4:	10 92 d2 05 	sts	0x05D2, r1
     ca8:	10 92 d3 05 	sts	0x05D3, r1
     cac:	10 92 d4 05 	sts	0x05D4, r1
 CRC16_txt11(0,26);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	6a e1       	ldi	r22, 0x1A	; 26
     cb4:	0e 94 83 04 	call	0x906	; 0x906 <CRC16_txt11>
 txtdat1[26]=DATAlist[0x78];txtdat1[27]=DATAlist[0x79];
     cb8:	80 91 ec 04 	lds	r24, 0x04EC
     cbc:	80 93 d5 05 	sts	0x05D5, r24
     cc0:	80 91 ed 04 	lds	r24, 0x04ED
     cc4:	80 93 d6 05 	sts	0x05D6, r24
 txtdat1[28]=0xFC;txtdat1[29]=0xFF;
     cc8:	8c ef       	ldi	r24, 0xFC	; 252
     cca:	80 93 d7 05 	sts	0x05D7, r24
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	80 93 d8 05 	sts	0x05D8, r24
 uart1_send(30);
     cd4:	8e e1       	ldi	r24, 0x1E	; 30
     cd6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart1_send>
     cda:	87 ea       	ldi	r24, 0xA7	; 167
     cdc:	91 e6       	ldi	r25, 0x61	; 97
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <send_tds_temp_speed+0xbe>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <send_tds_temp_speed+0xc4>
     ce4:	00 00       	nop
 _delay_ms(100);
 uart0_send1(30);	
     ce6:	8e e1       	ldi	r24, 0x1E	; 30
     ce8:	0e 94 40 01 	call	0x280	; 0x280 <uart0_send1>
}
     cec:	08 95       	ret

00000cee <send_status>:
//                  发送设备状态函数
// 没返回
//***********************************************************************
void send_status(void)
{//uint crcresult;
 txtdat1[0]=0xAC;txtdat1[1]=0x33;txtdat1[2]=0x33;txtdat1[3]=0x80;
     cee:	8c ea       	ldi	r24, 0xAC	; 172
     cf0:	80 93 bb 05 	sts	0x05BB, r24
     cf4:	93 e3       	ldi	r25, 0x33	; 51
     cf6:	90 93 bc 05 	sts	0x05BC, r25
     cfa:	90 93 bd 05 	sts	0x05BD, r25
     cfe:	80 e8       	ldi	r24, 0x80	; 128
     d00:	80 93 be 05 	sts	0x05BE, r24
 txtdat1[4]=0x00;txtdat1[5]=0x12;
     d04:	10 92 bf 05 	sts	0x05BF, r1
     d08:	82 e1       	ldi	r24, 0x12	; 18
     d0a:	80 93 c0 05 	sts	0x05C0, r24
 txtdat1[6]=IDDAT1;txtdat1[7]=IDDAT2;txtdat1[8]=IDDAT3;txtdat1[9]=IDDAT4;
     d0e:	82 e4       	ldi	r24, 0x42	; 66
     d10:	80 93 c1 05 	sts	0x05C1, r24
     d14:	81 e3       	ldi	r24, 0x31	; 49
     d16:	80 93 c2 05 	sts	0x05C2, r24
     d1a:	80 93 c3 05 	sts	0x05C3, r24
     d1e:	80 93 c4 05 	sts	0x05C4, r24
 txtdat1[10]=IDDAT5;txtdat1[11]=IDDAT6;txtdat1[12]=IDDAT7;txtdat1[13]=IDDAT8;
     d22:	80 93 c5 05 	sts	0x05C5, r24
     d26:	80 93 c6 05 	sts	0x05C6, r24
     d2a:	90 93 c7 05 	sts	0x05C7, r25
     d2e:	86 e3       	ldi	r24, 0x36	; 54
     d30:	80 93 c8 05 	sts	0x05C8, r24
 txtdat1[14]=0x00;txtdat1[15]=0x01;txtdat1[16]=DATAlist[0x20];
     d34:	10 92 c9 05 	sts	0x05C9, r1
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 ca 05 	sts	0x05CA, r24
     d3e:	80 91 94 04 	lds	r24, 0x0494
     d42:	80 93 cb 05 	sts	0x05CB, r24
 txtdat1[17]=DATAlist[0x21];
     d46:	80 91 95 04 	lds	r24, 0x0495
     d4a:	80 93 cc 05 	sts	0x05CC, r24
 //crcresult=CRC16_txt1(0,22);
 CRC16_txt11(0,18);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	62 e1       	ldi	r22, 0x12	; 18
     d52:	0e 94 83 04 	call	0x906	; 0x906 <CRC16_txt11>
 txtdat1[18]=DATAlist[0x78];txtdat1[19]=DATAlist[0x79];
     d56:	80 91 ec 04 	lds	r24, 0x04EC
     d5a:	80 93 cd 05 	sts	0x05CD, r24
     d5e:	80 91 ed 04 	lds	r24, 0x04ED
     d62:	80 93 ce 05 	sts	0x05CE, r24
 txtdat1[20]=0xFC;txtdat1[21]=0xFF;
     d66:	8c ef       	ldi	r24, 0xFC	; 252
     d68:	80 93 cf 05 	sts	0x05CF, r24
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	80 93 d0 05 	sts	0x05D0, r24
 uart1_send(22);
     d72:	86 e1       	ldi	r24, 0x16	; 22
     d74:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart1_send>
     d78:	8f e3       	ldi	r24, 0x3F	; 63
     d7a:	9d e0       	ldi	r25, 0x0D	; 13
     d7c:	a3 e0       	ldi	r26, 0x03	; 3
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	90 40       	sbci	r25, 0x00	; 0
     d82:	a0 40       	sbci	r26, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <send_status+0x90>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <send_status+0x9a>
     d88:	00 00       	nop
 _delay_ms(1000);

}
     d8a:	08 95       	ret

00000d8c <CRC16_rxt11>:
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen1;n++)//while (wDataLen--)     
     d8c:	66 23       	and	r22, r22
     d8e:	f9 f0       	breq	.+62     	; 0xdce <CRC16_rxt11+0x42>
	{ // putchar0(rx1buffer[n+addr1]);
		chCRCHi=chCRC/256;
		wIndex = chCRCHi ^ rx1buffer[n+addr1];
     d90:	48 2f       	mov	r20, r24
     d92:	50 e0       	ldi	r21, 0x00	; 0
	//return ((chCRCHi << 8) | chCRCLo); chCRCLo;//chCRCHi;//
	DATAlist[0x79]=chCRC/256;
	DATAlist[0x78]=chCRC-(DATAlist[0x78]*256);
}
//*************************************************************************************************
void CRC16_rxt11(uchar addr1, uchar wDataLen1)
     d94:	da 01       	movw	r26, r20
     d96:	ab 5c       	subi	r26, 0xCB	; 203
     d98:	bb 4f       	sbci	r27, 0xFB	; 251
     d9a:	4a 5c       	subi	r20, 0xCA	; 202
     d9c:	5b 4f       	sbci	r21, 0xFB	; 251
     d9e:	61 50       	subi	r22, 0x01	; 1
     da0:	46 0f       	add	r20, r22
     da2:	51 1d       	adc	r21, r1
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
	for(n=0;n<wDataLen1;n++)//while (wDataLen--)     
	{ // putchar0(rx1buffer[n+addr1]);
		chCRCHi=chCRC/256;
		wIndex = chCRCHi ^ rx1buffer[n+addr1];
		chCRC<<=8;
		chCRC^=TABLE1021[wIndex];
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	71 e0       	ldi	r23, 0x01	; 1
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen1;n++)//while (wDataLen--)     
	{ // putchar0(rx1buffer[n+addr1]);
		chCRCHi=chCRC/256;
		wIndex = chCRCHi ^ rx1buffer[n+addr1];
     dac:	ed 91       	ld	r30, X+
		chCRC<<=8;
     dae:	38 2f       	mov	r19, r24
     db0:	22 27       	eor	r18, r18
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen1;n++)//while (wDataLen--)     
	{ // putchar0(rx1buffer[n+addr1]);
		chCRCHi=chCRC/256;
		wIndex = chCRCHi ^ rx1buffer[n+addr1];
     db2:	e9 27       	eor	r30, r25
		chCRC<<=8;
		chCRC^=TABLE1021[wIndex];
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	e6 0f       	add	r30, r22
     dbc:	f7 1f       	adc	r31, r23
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	82 27       	eor	r24, r18
     dc4:	93 27       	eor	r25, r19
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
	uchar wIndex;            // CRC循环中的索引
	uchar n;
	for(n=0;n<wDataLen1;n++)//while (wDataLen--)     
     dc6:	a4 17       	cp	r26, r20
     dc8:	b5 07       	cpc	r27, r21
     dca:	81 f7       	brne	.-32     	; 0xdac <CRC16_rxt11+0x20>
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <CRC16_rxt11+0x46>
}
//*************************************************************************************************
void CRC16_rxt11(uchar addr1, uchar wDataLen1)
{
	uchar chCRCHi = 0; // 高CRC字节初始化
	uint chCRC=0;
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
		wIndex = chCRCHi ^ rx1buffer[n+addr1];
		chCRC<<=8;
		chCRC^=TABLE1021[wIndex];
	}
	//return ((chCRCHi << 8) | chCRCLo); chCRCLo;//chCRCHi;//
	DATAlist[0x7b]=chCRC/256;
     dd2:	90 93 ef 04 	sts	0x04EF, r25
	DATAlist[0x7a]=chCRC-(DATAlist[0x7b]*256);
     dd6:	80 93 ee 04 	sts	0x04EE, r24
}
     dda:	08 95       	ret

00000ddc <__vector_16>:

//***************************************************************************************************************
//  T0定时中断 比较流量是否已经够了  中断处理程序
//----------------------------------
SIGNAL(TIMER0_OVF_vect)
{   //uint num1;
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 92       	push	r2
     de8:	3f 92       	push	r3
     dea:	4f 92       	push	r4
     dec:	5f 92       	push	r5
     dee:	6f 92       	push	r6
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	00 d0       	rcall	.+0      	; 0xe24 <__vector_16+0x48>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <__vector_16+0x4a>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
	unsigned char w,k;
	
	TCNT0=0;               //重发初值，下次中断也10MS
     e2a:	12 be       	out	0x32, r1	; 50
    T0counter++;
     e2c:	80 91 0a 04 	lds	r24, 0x040A
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	80 93 0a 04 	sts	0x040A, r24
	//PORTC^=(1<<LED_LINK);
    if(T0counter>20)//10-9   100   
     e36:	85 31       	cpi	r24, 0x15	; 21
     e38:	78 f1       	brcs	.+94     	; 0xe98 <__vector_16+0xbc>
	 {T0counter=0;
     e3a:	10 92 0a 04 	sts	0x040A, r1
	  time1s++;
     e3e:	80 91 e7 03 	lds	r24, 0x03E7
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 e7 03 	sts	0x03E7, r24
	  
	  if(time1s>18)    //10-18s  18-1.5s  20-62s   1.5s   时间片检测
     e48:	83 31       	cpi	r24, 0x13	; 19
     e4a:	90 f0       	brcs	.+36     	; 0xe70 <__vector_16+0x94>
	    { // PORTG^=(1<<LED_LINK); 
			time1s=0;
     e4c:	10 92 e7 03 	sts	0x03E7, r1
			LEDRUN;
     e50:	95 b3       	in	r25, 0x15	; 21
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 27       	eor	r24, r25
     e56:	85 bb       	out	0x15, r24	; 21
			count18s++;
     e58:	80 91 f4 03 	lds	r24, 0x03F4
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	80 93 f4 03 	sts	0x03F4, r24
			if(count18s>13)//20s
     e62:	8e 30       	cpi	r24, 0x0E	; 14
     e64:	28 f0       	brcs	.+10     	; 0xe70 <__vector_16+0x94>
				{
					minbit|=0x01;//置位20s
     e66:	80 91 f5 03 	lds	r24, 0x03F5
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	80 93 f5 03 	sts	0x03F5, r24

		}	//1.5s		
    
	//---------流量检测，在微信取水的时候检测--------------
	
	 if(TCNT1>30)//开水总量已经达到了要求值，提交记录t1
     e70:	8c b5       	in	r24, 0x2c	; 44
     e72:	9d b5       	in	r25, 0x2d	; 45
     e74:	8f 31       	cpi	r24, 0x1F	; 31
     e76:	91 05       	cpc	r25, r1
     e78:	78 f0       	brcs	.+30     	; 0xe98 <__vector_16+0xbc>
	   {
	     fastatus|=0x10;//需要保存流量了 
     e7a:	80 91 f2 02 	lds	r24, 0x02F2
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	80 93 f2 02 	sts	0x02F2, r24
		 flushcont++;
     e84:	80 91 dc 03 	lds	r24, 0x03DC
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	80 93 dc 03 	sts	0x03DC, r24
		 if(flushcont>240)flushcont=240;//不再增加，等冲洗
     e8e:	81 3f       	cpi	r24, 0xF1	; 241
     e90:	18 f0       	brcs	.+6      	; 0xe98 <__vector_16+0xbc>
     e92:	80 ef       	ldi	r24, 0xF0	; 240
     e94:	80 93 dc 03 	sts	0x03DC, r24
	   }

  }
//*****************************中断接收1处理程序*************************************************
	rx1count++;
     e98:	80 91 13 04 	lds	r24, 0x0413
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 93 13 04 	sts	0x0413, r24
	if(rx1count>15)//处理数据 处理完rx1poit=0  &&(havedata==1)
     ea2:	80 31       	cpi	r24, 0x10	; 16
     ea4:	08 f4       	brcc	.+2      	; 0xea8 <__vector_16+0xcc>
     ea6:	6c c1       	rjmp	.+728    	; 0x1180 <__stack+0x81>
		{rx1count=0;
     ea8:	10 92 13 04 	sts	0x0413, r1
		// PORTC^=(1<<LED_ALARM); 
		 if(rx1poit>16)
     eac:	80 91 fb 03 	lds	r24, 0x03FB
     eb0:	81 31       	cpi	r24, 0x11	; 17
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__vector_16+0xda>
     eb4:	63 c1       	rjmp	.+710    	; 0x117c <__stack+0x7d>
		 {  
			for(w=0;w<rx1poit-3;w++)
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	03 97       	sbiw	r24, 0x03	; 3
     eba:	18 16       	cp	r1, r24
     ebc:	19 06       	cpc	r1, r25
     ebe:	0c f0       	brlt	.+2      	; 0xec2 <__vector_16+0xe6>
     ec0:	5a c1       	rjmp	.+692    	; 0x1176 <__stack+0x77>
     ec2:	00 e0       	ldi	r16, 0x00	; 0
     ec4:	10 e0       	ldi	r17, 0x00	; 0
     ec6:	20 e0       	ldi	r18, 0x00	; 0
			 {if((rx1buffer[w]==0xbb)&&(rx1buffer[w+1]==0x66)&&(rx1buffer[w+2]==0x66)&&(rx1buffer[w+3]==0x80))
     ec8:	0f 2e       	mov	r0, r31
     eca:	f5 e3       	ldi	r31, 0x35	; 53
     ecc:	ef 2e       	mov	r14, r31
     ece:	f4 e0       	ldi	r31, 0x04	; 4
     ed0:	ff 2e       	mov	r15, r31
     ed2:	f0 2d       	mov	r31, r0
				 {
				  //校验ID码
				  wificount=0;
				  LCDNUM[1]|=0x01;
     ed4:	0f 2e       	mov	r0, r31
     ed6:	f5 e1       	ldi	r31, 0x15	; 21
     ed8:	cf 2e       	mov	r12, r31
     eda:	f4 e0       	ldi	r31, 0x04	; 4
     edc:	df 2e       	mov	r13, r31
     ede:	f0 2d       	mov	r31, r0
				  LCDNUM[2]|=0x01;
     ee0:	46 01       	movw	r8, r12
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
				  LCDNUM[3]|=0x01;
     ee8:	66 24       	eor	r6, r6
     eea:	77 24       	eor	r7, r7
     eec:	68 94       	set
     eee:	61 f8       	bld	r6, 1
     ef0:	6c 0c       	add	r6, r12
     ef2:	7d 1c       	adc	r7, r13
				  LCDNUM[4]|=0x01;
     ef4:	0f 2e       	mov	r0, r31
     ef6:	f3 e0       	ldi	r31, 0x03	; 3
     ef8:	4f 2e       	mov	r4, r31
     efa:	55 24       	eor	r5, r5
     efc:	f0 2d       	mov	r31, r0
     efe:	4c 0c       	add	r4, r12
     f00:	5d 1c       	adc	r5, r13
				  LCDNUM[5]|=0x01;

				  if((DATAlist[0x21]&0x80)==0x00)
     f02:	0f 2e       	mov	r0, r31
     f04:	f5 e9       	ldi	r31, 0x95	; 149
     f06:	2f 2e       	mov	r2, r31
     f08:	f4 e0       	ldi	r31, 0x04	; 4
     f0a:	3f 2e       	mov	r3, r31
     f0c:	f0 2d       	mov	r31, r0
											{DATAlist[0x18]=rx1buffer[w+17];
											dealbyte|=0x80;
											}											
									 break;
								  case 0x14://设置倒计时时钟
										DATAlist[0x5e]=rx1buffer[w+17];//
     f0e:	0f 2e       	mov	r0, r31
     f10:	f2 ed       	ldi	r31, 0xD2	; 210
     f12:	af 2e       	mov	r10, r31
     f14:	f4 e0       	ldi	r31, 0x04	; 4
     f16:	bf 2e       	mov	r11, r31
     f18:	f0 2d       	mov	r31, r0
										DATAlist[0x5f]=rx1buffer[w+18];//
     f1a:	a5 01       	movw	r20, r10
     f1c:	4f 5f       	subi	r20, 0xFF	; 255
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	5a 83       	std	Y+2, r21	; 0x02
     f22:	49 83       	std	Y+1, r20	; 0x01
		{rx1count=0;
		// PORTC^=(1<<LED_ALARM); 
		 if(rx1poit>16)
		 {  
			for(w=0;w<rx1poit-3;w++)
			 {if((rx1buffer[w]==0xbb)&&(rx1buffer[w+1]==0x66)&&(rx1buffer[w+2]==0x66)&&(rx1buffer[w+3]==0x80))
     f24:	f7 01       	movw	r30, r14
     f26:	e0 0f       	add	r30, r16
     f28:	f1 1f       	adc	r31, r17
     f2a:	80 81       	ld	r24, Z
     f2c:	8b 3b       	cpi	r24, 0xBB	; 187
     f2e:	09 f0       	breq	.+2      	; 0xf32 <__vector_16+0x156>
     f30:	17 c1       	rjmp	.+558    	; 0x1160 <__stack+0x61>
     f32:	f7 01       	movw	r30, r14
     f34:	e0 0f       	add	r30, r16
     f36:	f1 1f       	adc	r31, r17
     f38:	81 81       	ldd	r24, Z+1	; 0x01
     f3a:	86 36       	cpi	r24, 0x66	; 102
     f3c:	09 f0       	breq	.+2      	; 0xf40 <__vector_16+0x164>
     f3e:	10 c1       	rjmp	.+544    	; 0x1160 <__stack+0x61>
     f40:	f7 01       	movw	r30, r14
     f42:	e0 0f       	add	r30, r16
     f44:	f1 1f       	adc	r31, r17
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	86 36       	cpi	r24, 0x66	; 102
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__vector_16+0x172>
     f4c:	09 c1       	rjmp	.+530    	; 0x1160 <__stack+0x61>
     f4e:	f7 01       	movw	r30, r14
     f50:	e0 0f       	add	r30, r16
     f52:	f1 1f       	adc	r31, r17
     f54:	83 81       	ldd	r24, Z+3	; 0x03
     f56:	80 38       	cpi	r24, 0x80	; 128
     f58:	09 f0       	breq	.+2      	; 0xf5c <__vector_16+0x180>
     f5a:	02 c1       	rjmp	.+516    	; 0x1160 <__stack+0x61>
				 {
				  //校验ID码
				  wificount=0;
     f5c:	10 92 f7 03 	sts	0x03F7, r1
     f60:	10 92 f6 03 	sts	0x03F6, r1
				  LCDNUM[1]|=0x01;
     f64:	d6 01       	movw	r26, r12
     f66:	8c 91       	ld	r24, X
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	8c 93       	st	X, r24
				  LCDNUM[2]|=0x01;
     f6c:	f4 01       	movw	r30, r8
     f6e:	80 81       	ld	r24, Z
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	80 83       	st	Z, r24
				  LCDNUM[3]|=0x01;
     f74:	d3 01       	movw	r26, r6
     f76:	8c 91       	ld	r24, X
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	8c 93       	st	X, r24
				  LCDNUM[4]|=0x01;
     f7c:	f2 01       	movw	r30, r4
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	80 83       	st	Z, r24
				  LCDNUM[5]|=0x01;
     f84:	d6 01       	movw	r26, r12
     f86:	14 96       	adiw	r26, 0x04	; 4
     f88:	8c 91       	ld	r24, X
     f8a:	14 97       	sbiw	r26, 0x04	; 4
     f8c:	81 60       	ori	r24, 0x01	; 1
     f8e:	14 96       	adiw	r26, 0x04	; 4
     f90:	8c 93       	st	X, r24
     f92:	14 97       	sbiw	r26, 0x04	; 4

				  if((DATAlist[0x21]&0x80)==0x00)
     f94:	f1 01       	movw	r30, r2
     f96:	80 81       	ld	r24, Z
     f98:	88 23       	and	r24, r24
     f9a:	3c f0       	brlt	.+14     	; 0xfaa <__vector_16+0x1ce>
					{
					  DATAlist[0x21]|=0x80;
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	80 83       	st	Z, r24
					  fastatus|=0x08;
     fa0:	80 91 f2 02 	lds	r24, 0x02F2
     fa4:	88 60       	ori	r24, 0x08	; 8
     fa6:	80 93 f2 02 	sts	0x02F2, r24
					}
						
				  //-----CRC ---
				  CRC16_rxt11(w,rx1buffer[w+5]);
     faa:	c8 01       	movw	r24, r16
     fac:	05 96       	adiw	r24, 0x05	; 5
     fae:	ac 01       	movw	r20, r24
     fb0:	4e 0d       	add	r20, r14
     fb2:	5f 1d       	adc	r21, r15
     fb4:	5c 83       	std	Y+4, r21	; 0x04
     fb6:	4b 83       	std	Y+3, r20	; 0x03
     fb8:	82 2f       	mov	r24, r18
     fba:	da 01       	movw	r26, r20
     fbc:	6c 91       	ld	r22, X
     fbe:	0e 94 c6 06 	call	0xd8c	; 0xd8c <CRC16_rxt11>
				  if((DATAlist[0x7a]==rx1buffer[w+rx1buffer[w+5]])&&(DATAlist[0x7b]==rx1buffer[w+rx1buffer[w+5]+1]))//CRC校验正确
     fc2:	eb 81       	ldd	r30, Y+3	; 0x03
     fc4:	fc 81       	ldd	r31, Y+4	; 0x04
     fc6:	80 81       	ld	r24, Z
     fc8:	98 01       	movw	r18, r16
     fca:	28 0f       	add	r18, r24
     fcc:	31 1d       	adc	r19, r1
     fce:	f7 01       	movw	r30, r14
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	ae ee       	ldi	r26, 0xEE	; 238
     fd6:	b4 e0       	ldi	r27, 0x04	; 4
     fd8:	9c 91       	ld	r25, X
     fda:	80 81       	ld	r24, Z
     fdc:	98 17       	cp	r25, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <__vector_16+0x206>
     fe0:	bb c0       	rjmp	.+374    	; 0x1158 <__stack+0x59>
     fe2:	f7 01       	movw	r30, r14
     fe4:	e2 0f       	add	r30, r18
     fe6:	f3 1f       	adc	r31, r19
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	8c 91       	ld	r24, X
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	89 17       	cp	r24, r25
     ff0:	09 f0       	breq	.+2      	; 0xff4 <__vector_16+0x218>
     ff2:	b2 c0       	rjmp	.+356    	; 0x1158 <__stack+0x59>
					{
					
				  //-----------------------串口1接收指令处理------------------------------
				  if(rx1buffer[w+15]==0x01)sendbit&=0x01;
     ff4:	f7 01       	movw	r30, r14
     ff6:	e0 0f       	add	r30, r16
     ff8:	f1 1f       	adc	r31, r17
     ffa:	87 85       	ldd	r24, Z+15	; 0x0f
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	31 f4       	brne	.+12     	; 0x100c <__vector_16+0x230>
    1000:	90 91 da 03 	lds	r25, 0x03DA
    1004:	91 70       	andi	r25, 0x01	; 1
    1006:	90 93 da 03 	sts	0x03DA, r25
    100a:	10 c0       	rjmp	.+32     	; 0x102c <__vector_16+0x250>
				  if(rx1buffer[w+15]==0x02)sendbit&=0x02;
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	31 f4       	brne	.+12     	; 0x101c <__vector_16+0x240>
    1010:	90 91 da 03 	lds	r25, 0x03DA
    1014:	92 70       	andi	r25, 0x02	; 2
    1016:	90 93 da 03 	sts	0x03DA, r25
    101a:	10 c0       	rjmp	.+32     	; 0x103c <__vector_16+0x260>
				  if(rx1buffer[w+15]==0x03)sendbit&=0x04;
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	31 f4       	brne	.+12     	; 0x102c <__vector_16+0x250>
    1020:	90 91 da 03 	lds	r25, 0x03DA
    1024:	94 70       	andi	r25, 0x04	; 4
    1026:	90 93 da 03 	sts	0x03DA, r25
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <__vector_16+0x26a>
				  if(rx1buffer[w+15]==0x04)sendbit&=0x08;
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	31 f4       	brne	.+12     	; 0x103c <__vector_16+0x260>
    1030:	80 91 da 03 	lds	r24, 0x03DA
    1034:	88 70       	andi	r24, 0x08	; 8
    1036:	80 93 da 03 	sts	0x03DA, r24
    103a:	8e c0       	rjmp	.+284    	; 0x1158 <__stack+0x59>
				  if(rx1buffer[w+15]==0x05)
    103c:	85 30       	cpi	r24, 0x05	; 5
    103e:	19 f4       	brne	.+6      	; 0x1046 <__vector_16+0x26a>
					{
						needreturn=0x00;
    1040:	10 92 dd 03 	sts	0x03DD, r1
    1044:	89 c0       	rjmp	.+274    	; 0x1158 <__stack+0x59>
					}
				  if(rx1buffer[w+15]==0x06)
    1046:	86 30       	cpi	r24, 0x06	; 6
    1048:	09 f0       	breq	.+2      	; 0x104c <__vector_16+0x270>
    104a:	86 c0       	rjmp	.+268    	; 0x1158 <__stack+0x59>
					{ //BEEP(20);//wrong
					  flatbit|=0x04;//有返回置位
    104c:	80 91 f2 03 	lds	r24, 0x03F2
    1050:	84 60       	ori	r24, 0x04	; 4
    1052:	80 93 f2 03 	sts	0x03F2, r24
					 if((rx1buffer[w+16]>0)&&(rx1buffer[w+16]<0x2F))
    1056:	f7 01       	movw	r30, r14
    1058:	e0 0f       	add	r30, r16
    105a:	f1 1f       	adc	r31, r17
    105c:	80 89       	ldd	r24, Z+16	; 0x10
    105e:	98 2f       	mov	r25, r24
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	9e 32       	cpi	r25, 0x2E	; 46
    1064:	08 f0       	brcs	.+2      	; 0x1068 <__vector_16+0x28c>
    1066:	78 c0       	rjmp	.+240    	; 0x1158 <__stack+0x59>
					    { 	switch(rx1buffer[w+16])
    1068:	83 30       	cpi	r24, 0x03	; 3
    106a:	01 f1       	breq	.+64     	; 0x10ac <__vector_16+0x2d0>
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	30 f4       	brcc	.+12     	; 0x107c <__vector_16+0x2a0>
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	71 f0       	breq	.+28     	; 0x1090 <__vector_16+0x2b4>
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	09 f0       	breq	.+2      	; 0x107a <__vector_16+0x29e>
    1078:	6f c0       	rjmp	.+222    	; 0x1158 <__stack+0x59>
    107a:	11 c0       	rjmp	.+34     	; 0x109e <__vector_16+0x2c2>
    107c:	84 31       	cpi	r24, 0x14	; 20
    107e:	09 f4       	brne	.+2      	; 0x1082 <__vector_16+0x2a6>
    1080:	5c c0       	rjmp	.+184    	; 0x113a <__stack+0x3b>
    1082:	85 31       	cpi	r24, 0x15	; 21
    1084:	09 f4       	brne	.+2      	; 0x1088 <__vector_16+0x2ac>
    1086:	48 c0       	rjmp	.+144    	; 0x1118 <__stack+0x19>
    1088:	86 30       	cpi	r24, 0x06	; 6
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_16+0x2b2>
    108c:	65 c0       	rjmp	.+202    	; 0x1158 <__stack+0x59>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <__vector_16+0x2dc>
								{
									case 0x01://开机
										HT1721C_BL_1;
    1090:	1a 9a       	sbi	0x03, 2	; 3
										dealbyte|=0x01;
    1092:	80 91 e0 03 	lds	r24, 0x03E0
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	80 93 e0 03 	sts	0x03E0, r24
										break;
    109c:	5d c0       	rjmp	.+186    	; 0x1158 <__stack+0x59>
									case 0x02://关机
										HT1721C_BL_0;
    109e:	1a 98       	cbi	0x03, 2	; 3
										dealbyte|=0x02;
    10a0:	80 91 e0 03 	lds	r24, 0x03E0
    10a4:	82 60       	ori	r24, 0x02	; 2
    10a6:	80 93 e0 03 	sts	0x03E0, r24
										break;
    10aa:	56 c0       	rjmp	.+172    	; 0x1158 <__stack+0x59>
								    case 0x03://冲洗
										dealbyte|=0x04;
    10ac:	80 91 e0 03 	lds	r24, 0x03E0
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	80 93 e0 03 	sts	0x03E0, r24
										break;
    10b6:	50 c0       	rjmp	.+160    	; 0x1158 <__stack+0x59>
									case 0x05://BUYONG

										
										break;
									case 0x06://复位滤芯至额定值
										if((rx0buffer[w+17]>0)&&(rx0buffer[w+17]<0x07))
    10b8:	98 01       	movw	r18, r16
    10ba:	2f 5e       	subi	r18, 0xEF	; 239
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	ef e7       	ldi	r30, 0x7F	; 127
    10c0:	f5 e0       	ldi	r31, 0x05	; 5
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	80 81       	ld	r24, Z
    10c8:	81 50       	subi	r24, 0x01	; 1
    10ca:	86 30       	cpi	r24, 0x06	; 6
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <__vector_16+0x2f4>
    10ce:	44 c0       	rjmp	.+136    	; 0x1158 <__stack+0x59>
										{
											DATAlist[rx1buffer[w+17]*2+0x22]=0;
    10d0:	f7 01       	movw	r30, r14
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	20 81       	ld	r18, Z
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	c9 01       	movw	r24, r18
    10dc:	41 96       	adiw	r24, 0x11	; 17
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	8c 58       	subi	r24, 0x8C	; 140
    10e4:	9b 4f       	sbci	r25, 0xFB	; 251
    10e6:	fc 01       	movw	r30, r24
    10e8:	10 82       	st	Z, r1
											DATAlist[rx1buffer[w+17]*2+0x23]=0;
    10ea:	c9 01       	movw	r24, r18
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	8c 58       	subi	r24, 0x8C	; 140
    10f2:	9b 4f       	sbci	r25, 0xFB	; 251
    10f4:	dc 01       	movw	r26, r24
    10f6:	93 96       	adiw	r26, 0x23	; 35
    10f8:	1c 92       	st	X, r1
    10fa:	93 97       	sbiw	r26, 0x23	; 35
											DATAlist[rx1buffer[w+17]+0x19]=rx1buffer[w+20];
    10fc:	2c 58       	subi	r18, 0x8C	; 140
    10fe:	3b 4f       	sbci	r19, 0xFB	; 251
    1100:	f7 01       	movw	r30, r14
    1102:	e0 0f       	add	r30, r16
    1104:	f1 1f       	adc	r31, r17
    1106:	84 89       	ldd	r24, Z+20	; 0x14
    1108:	f9 01       	movw	r30, r18
    110a:	81 8f       	std	Z+25, r24	; 0x19
											dealbyte|=0x20;//需要保存
    110c:	80 91 e0 03 	lds	r24, 0x03E0
    1110:	80 62       	ori	r24, 0x20	; 32
    1112:	80 93 e0 03 	sts	0x03E0, r24
    1116:	20 c0       	rjmp	.+64     	; 0x1158 <__stack+0x59>
										break;
									case 0x09://不用
										
										break;
								  case 0x15://禁止机器
										if((rx1buffer[w+17]==0xaa)||(rx1buffer[w+17]==0xbb))
    1118:	f7 01       	movw	r30, r14
    111a:	e0 0f       	add	r30, r16
    111c:	f1 1f       	adc	r31, r17
    111e:	81 89       	ldd	r24, Z+17	; 0x11
    1120:	8a 3a       	cpi	r24, 0xAA	; 170
    1122:	11 f0       	breq	.+4      	; 0x1128 <__stack+0x29>
    1124:	8b 3b       	cpi	r24, 0xBB	; 187
    1126:	c1 f4       	brne	.+48     	; 0x1158 <__stack+0x59>
											{DATAlist[0x18]=rx1buffer[w+17];
    1128:	ac e8       	ldi	r26, 0x8C	; 140
    112a:	b4 e0       	ldi	r27, 0x04	; 4
    112c:	8c 93       	st	X, r24
											dealbyte|=0x80;
    112e:	80 91 e0 03 	lds	r24, 0x03E0
    1132:	80 68       	ori	r24, 0x80	; 128
    1134:	80 93 e0 03 	sts	0x03E0, r24
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <__stack+0x59>
											}											
									 break;
								  case 0x14://设置倒计时时钟
										DATAlist[0x5e]=rx1buffer[w+17];//
    113a:	f7 01       	movw	r30, r14
    113c:	e0 0f       	add	r30, r16
    113e:	f1 1f       	adc	r31, r17
    1140:	81 89       	ldd	r24, Z+17	; 0x11
    1142:	d5 01       	movw	r26, r10
    1144:	8c 93       	st	X, r24
										DATAlist[0x5f]=rx1buffer[w+18];//
    1146:	82 89       	ldd	r24, Z+18	; 0x12
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
										dealbyte|=0x10;	
    114e:	80 91 e0 03 	lds	r24, 0x03E0
    1152:	80 61       	ori	r24, 0x10	; 16
    1154:	80 93 e0 03 	sts	0x03E0, r24
						}
					}
					}// CRC校验正确					
				  //-----------------------------------------------------------------
				  //--------处理完毕
				  w=rx1poit;
    1158:	20 91 fb 03 	lds	r18, 0x03FB
				  rx1poit=0;
    115c:	10 92 fb 03 	sts	0x03FB, r1
	if(rx1count>15)//处理数据 处理完rx1poit=0  &&(havedata==1)
		{rx1count=0;
		// PORTC^=(1<<LED_ALARM); 
		 if(rx1poit>16)
		 {  
			for(w=0;w<rx1poit-3;w++)
    1160:	2f 5f       	subi	r18, 0xFF	; 255
    1162:	02 2f       	mov	r16, r18
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	80 91 fb 03 	lds	r24, 0x03FB
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	03 97       	sbiw	r24, 0x03	; 3
    116e:	08 17       	cp	r16, r24
    1170:	19 07       	cpc	r17, r25
    1172:	0c f4       	brge	.+2      	; 0x1176 <__stack+0x77>
    1174:	d7 ce       	rjmp	.-594    	; 0xf24 <__vector_16+0x148>
				  rx1poit=0;
				 }	//if			 
		     }	//for
			 
		    w=rx1poit;
		    rx1poit=0;
    1176:	10 92 fb 03 	sts	0x03FB, r1
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <__stack+0x81>
		 
		  	
		} //rx1poit>6
		else
		{rx1poit=0;
    117c:	10 92 fb 03 	sts	0x03FB, r1
		
      }//rx1count>20
  //**********************************************************************************
  //**********************************************************************************
  
}
    1180:	24 96       	adiw	r28, 0x04	; 4
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	bf 91       	pop	r27
    1190:	af 91       	pop	r26
    1192:	9f 91       	pop	r25
    1194:	8f 91       	pop	r24
    1196:	7f 91       	pop	r23
    1198:	6f 91       	pop	r22
    119a:	5f 91       	pop	r21
    119c:	4f 91       	pop	r20
    119e:	3f 91       	pop	r19
    11a0:	2f 91       	pop	r18
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	4f 90       	pop	r4
    11be:	3f 90       	pop	r3
    11c0:	2f 90       	pop	r2
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <TM1726_start>:
//------------------------------------------------
//START TM1726
//-----------------------------------------------
void TM1726_start(void)
{
	TM1726_SDA_1;
    11cc:	d8 9a       	sbi	0x1b, 0	; 27
	TM1726_SCL_1;
    11ce:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	8a 95       	dec	r24
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <TM1726_start+0x6>
    11d6:	00 00       	nop
	_delay_us(10);
	TM1726_SDA_0;
    11d8:	d8 98       	cbi	0x1b, 0	; 27
    11da:	83 e0       	ldi	r24, 0x03	; 3
    11dc:	8a 95       	dec	r24
    11de:	f1 f7       	brne	.-4      	; 0x11dc <TM1726_start+0x10>
    11e0:	00 00       	nop
	_delay_us(10);
	TM1726_SCL_0;
    11e2:	d9 98       	cbi	0x1b, 1	; 27
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	8a 95       	dec	r24
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <TM1726_start+0x1a>
    11ea:	00 00       	nop
	_delay_us(10);	
}
    11ec:	08 95       	ret

000011ee <TM1726_stop>:
//------------------------------------------------
//STOP TM1726
//-----------------------------------------------
void TM1726_stop(void)
{
	TM1726_SDA_0;
    11ee:	d8 98       	cbi	0x1b, 0	; 27
	TM1726_SCL_1;
    11f0:	d9 9a       	sbi	0x1b, 1	; 27
    11f2:	83 e0       	ldi	r24, 0x03	; 3
    11f4:	8a 95       	dec	r24
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <TM1726_stop+0x6>
    11f8:	00 00       	nop
	_delay_us(10);
	TM1726_SDA_1;
    11fa:	d8 9a       	sbi	0x1b, 0	; 27
    11fc:	83 e0       	ldi	r24, 0x03	; 3
    11fe:	8a 95       	dec	r24
    1200:	f1 f7       	brne	.-4      	; 0x11fe <TM1726_stop+0x10>
    1202:	00 00       	nop
	_delay_us(10);
	TM1726_SCL_0;
    1204:	d9 98       	cbi	0x1b, 1	; 27
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	8a 95       	dec	r24
    120a:	f1 f7       	brne	.-4      	; 0x1208 <TM1726_stop+0x1a>
    120c:	00 00       	nop
	_delay_us(10);
}
    120e:	08 95       	ret

00001210 <WRITE_DATA_1726>:
void WRITE_DATA_1726(unsigned char wdata)
{
	unsigned char i,temp;
	
	temp = 0x01;  //80
	TM1726_SDA_0;
    1210:	d8 98       	cbi	0x1b, 0	; 27
	TM1726_SCL_0;
    1212:	d9 98       	cbi	0x1b, 1	; 27
    1214:	00 00       	nop
    1216:	98 e0       	ldi	r25, 0x08	; 8
	_delay_us(TINGD);
	for(i=0 ; i<8 ; i++)
	{
		TM1726_SCL_0;
    1218:	d9 98       	cbi	0x1b, 1	; 27
		if((temp & wdata) == 0)
    121a:	80 fd       	sbrc	r24, 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <WRITE_DATA_1726+0x12>
			{TM1726_SDA_0;}
    121e:	d8 98       	cbi	0x1b, 0	; 27
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <WRITE_DATA_1726+0x14>
		else
			{TM1726_SDA_1;}
    1222:	d8 9a       	sbi	0x1b, 0	; 27
    1224:	00 00       	nop
		_delay_us(TINGD);
		TM1726_SCL_1;				//clk = 1 for data write into 1632
    1226:	d9 9a       	sbi	0x1b, 1	; 27
		wdata >>= 1;   //>>
    1228:	86 95       	lsr	r24
    122a:	91 50       	subi	r25, 0x01	; 1
	
	temp = 0x01;  //80
	TM1726_SDA_0;
	TM1726_SCL_0;
	_delay_us(TINGD);
	for(i=0 ; i<8 ; i++)
    122c:	a9 f7       	brne	.-22     	; 0x1218 <WRITE_DATA_1726+0x8>
			{TM1726_SDA_1;}
		_delay_us(TINGD);
		TM1726_SCL_1;				//clk = 1 for data write into 1632
		wdata >>= 1;   //>>
	}
	TM1726_SCL_0;
    122e:	d9 98       	cbi	0x1b, 1	; 27
	TM1726_SDA_0;
    1230:	d8 98       	cbi	0x1b, 0	; 27
}
    1232:	08 95       	ret

00001234 <WRITE_ALLRAM_1726>:
//-----------------------------------------------
//功能：填充TM1726的RAM数据
//-----------------------------------------------
void WRITE_ALLRAM_1726(unsigned char F_RAM1632_SET)
{
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	d8 2f       	mov	r29, r24
	unsigned char i;
	TM1726_SDA_1;
    123a:	d8 9a       	sbi	0x1b, 0	; 27
	TM1726_SCL_1;
    123c:	d9 9a       	sbi	0x1b, 1	; 27
	TM1726_start();
    123e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TM1726_start>
    1242:	00 00       	nop
	_delay_us(TINGD);
	WRITE_DATA_1726(0xc0);
    1244:	80 ec       	ldi	r24, 0xC0	; 192
    1246:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
    124a:	c2 e1       	ldi	r28, 0x12	; 18
	for(i=0;i<18;i++)
	{	TM1726_SDA_1;
    124c:	d8 9a       	sbi	0x1b, 0	; 27
		TM1726_SCL_1;
    124e:	d9 9a       	sbi	0x1b, 1	; 27
		if(F_RAM1632_SET)
    1250:	dd 23       	and	r29, r29
    1252:	21 f0       	breq	.+8      	; 0x125c <WRITE_ALLRAM_1726+0x28>
	      {WRITE_DATA_1726(0xff);}	//all RAM write 1
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <WRITE_ALLRAM_1726+0x2e>
		else
	      {WRITE_DATA_1726(0x00);}	//all RAM write 0
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
    1262:	c1 50       	subi	r28, 0x01	; 1
	TM1726_SDA_1;
	TM1726_SCL_1;
	TM1726_start();
	_delay_us(TINGD);
	WRITE_DATA_1726(0xc0);
	for(i=0;i<18;i++)
    1264:	99 f7       	brne	.-26     	; 0x124c <WRITE_ALLRAM_1726+0x18>
		if(F_RAM1632_SET)
	      {WRITE_DATA_1726(0xff);}	//all RAM write 1
		else
	      {WRITE_DATA_1726(0x00);}	//all RAM write 0
	}
	TM1726_stop();
    1266:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TM1726_stop>
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <REFRESH_ALLRAM_1726>:
//-----------------------------------------------
//功能：更新HT1632C的RAM数据
//-----------------------------------------------
void REFRESH_ALLRAM_1726(void)
{
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
	unsigned char i;
	TM1726_SDA_1;
    1278:	d8 9a       	sbi	0x1b, 0	; 27
	TM1726_SCL_1;
    127a:	d9 9a       	sbi	0x1b, 1	; 27
	TM1726_start();
    127c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TM1726_start>
    1280:	00 00       	nop
	_delay_us(TINGD);
	WRITE_DATA_1726(0xc0);
    1282:	80 ec       	ldi	r24, 0xC0	; 192
    1284:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
    1288:	c4 e1       	ldi	r28, 0x14	; 20
    128a:	d4 e0       	ldi	r29, 0x04	; 4
	TM1726_stop();
}
//-----------------------------------------------
//功能：更新HT1632C的RAM数据
//-----------------------------------------------
void REFRESH_ALLRAM_1726(void)
    128c:	8e 01       	movw	r16, r28
    128e:	0e 5e       	subi	r16, 0xEE	; 238
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
	TM1726_start();
	_delay_us(TINGD);
	WRITE_DATA_1726(0xc0);
	// all RAM have 96
	for(i=0;i<18;i++)
	{   TM1726_SDA_1;
    1292:	d8 9a       	sbi	0x1b, 0	; 27
		TM1726_SCL_1;
    1294:	d9 9a       	sbi	0x1b, 1	; 27
		WRITE_DATA_1726(LCDNUM[i]);
    1296:	89 91       	ld	r24, Y+
    1298:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
	TM1726_SCL_1;
	TM1726_start();
	_delay_us(TINGD);
	WRITE_DATA_1726(0xc0);
	// all RAM have 96
	for(i=0;i<18;i++)
    129c:	c0 17       	cp	r28, r16
    129e:	d1 07       	cpc	r29, r17
    12a0:	c1 f7       	brne	.-16     	; 0x1292 <REFRESH_ALLRAM_1726+0x22>
	{   TM1726_SDA_1;
		TM1726_SCL_1;
		WRITE_DATA_1726(LCDNUM[i]);
	}
	TM1726_stop();
    12a2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TM1726_stop>
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <INIT_1726>:
//-----------------------------------------------
//功能：初始化TM1726
//-----------------------------------------------
void INIT_1726(void)
{
	TM1726_SDA_1;
    12b0:	d8 9a       	sbi	0x1b, 0	; 27
	TM1726_SCL_1;
    12b2:	d9 9a       	sbi	0x1b, 1	; 27
	TM1726_start();
    12b4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TM1726_start>
    12b8:	00 00       	nop
	_delay_us(TINGD);
	WRITE_DATA_1726(0x37);//27
    12ba:	87 e3       	ldi	r24, 0x37	; 55
    12bc:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
	TM1726_stop();
    12c0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TM1726_stop>
}
    12c4:	08 95       	ret

000012c6 <main>:
	 }
//*********************************************************************************************************************************
//*****************************************************主程序****************************************************************************
//--------------------
int main(void)
{
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	ea 97       	sbiw	r28, 0x3a	; 58
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
 uchar sendpuls=0;//关机状态下发送状态脉冲
 uchar resetcount=0;
 uint bkliul=0;//备份流量，判断流量计故障
 uchar LLJcount=0;//流量计计数
 uchar tdscount=10;//启动TDS检测，制水后检测
  init_devices();
    12da:	0e 94 ba 01 	call	0x374	; 0x374 <init_devices>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12de:	2f e3       	ldi	r18, 0x3F	; 63
    12e0:	3d e0       	ldi	r19, 0x0D	; 13
    12e2:	43 e0       	ldi	r20, 0x03	; 3
    12e4:	21 50       	subi	r18, 0x01	; 1
    12e6:	30 40       	sbci	r19, 0x00	; 0
    12e8:	40 40       	sbci	r20, 0x00	; 0
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <main+0x1e>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <main+0x28>
    12ee:	00 00       	nop
 _delay_ms(1000);
 // init_devices();
 PORTC&=0xfe;//led
    12f0:	a8 98       	cbi	0x15, 0	; 21
 //BEEP(50);
 LCDmode=0;           //显示模式
 BEEP(100);
    12f2:	84 e6       	ldi	r24, 0x64	; 100
    12f4:	0e 94 92 02 	call	0x524	; 0x524 <BEEP>
 RELOAD2_0;
    12f8:	db 98       	cbi	0x1b, 3	; 27
    12fa:	4f e9       	ldi	r20, 0x9F	; 159
    12fc:	56 e8       	ldi	r21, 0x86	; 134
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	41 50       	subi	r20, 0x01	; 1
    1302:	50 40       	sbci	r21, 0x00	; 0
    1304:	60 40       	sbci	r22, 0x00	; 0
    1306:	e1 f7       	brne	.-8      	; 0x1300 <main+0x3a>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <main+0x44>
    130a:	00 00       	nop
 _delay_ms(500);
 RESET_0;
    130c:	da 9a       	sbi	0x1b, 2	; 27
    130e:	6f e3       	ldi	r22, 0x3F	; 63
    1310:	72 e4       	ldi	r23, 0x42	; 66
    1312:	8f e0       	ldi	r24, 0x0F	; 15
    1314:	61 50       	subi	r22, 0x01	; 1
    1316:	70 40       	sbci	r23, 0x00	; 0
    1318:	80 40       	sbci	r24, 0x00	; 0
    131a:	e1 f7       	brne	.-8      	; 0x1314 <main+0x4e>
    131c:	00 c0       	rjmp	.+0      	; 0x131e <main+0x58>
    131e:	00 00       	nop
 _delay_ms(5000);
 RESET_1;
    1320:	da 98       	cbi	0x1b, 2	; 27
 RELOAD2_1;
    1322:	db 9a       	sbi	0x1b, 3	; 27
    1324:	e4 e7       	ldi	r30, 0x74	; 116
    1326:	f4 e0       	ldi	r31, 0x04	; 4
	  
	 }
//*********************************************************************************************************************************
//*****************************************************主程序****************************************************************************
//--------------------
int main(void)
    1328:	8f 01       	movw	r16, r30
    132a:	84 ee       	ldi	r24, 0xE4	; 228
    132c:	94 e0       	ldi	r25, 0x04	; 4
 //--主要数据合法性比较，在设置时也需要增加数据合法性的比较???
 //--------------------------------------------------------------
  //-----------------------------------------
  for(i=0;i<0x70;i++)  //将数据初始化
  {
	  DATAlist[i]=0x00;
    132e:	11 92       	st	Z+, r1
 RELOAD2_1;
 //-----------------------------------------------------------------
 //--主要数据合法性比较，在设置时也需要增加数据合法性的比较???
 //--------------------------------------------------------------
  //-----------------------------------------
  for(i=0;i<0x70;i++)  //将数据初始化
    1330:	e8 17       	cp	r30, r24
    1332:	f9 07       	cpc	r31, r25
    1334:	e1 f7       	brne	.-8      	; 0x132e <main+0x68>
  {
	  DATAlist[i]=0x00;
  }
 temp=EEPROM_read(9);  //
    1336:	89 e0       	ldi	r24, 0x09	; 9
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
 if(temp==0xaa)//保存好的数据，不用初始化
    133e:	8a 3a       	cpi	r24, 0xAA	; 170
    1340:	09 f0       	breq	.+2      	; 0x1344 <main+0x7e>
    1342:	9f c0       	rjmp	.+318    	; 0x1482 <main+0x1bc>
 {
 DATAlist[0x18]=EEPROM_read(25);//保存的是是否禁止机器使用字节
    1344:	89 e1       	ldi	r24, 0x19	; 25
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    134c:	80 93 8c 04 	sts	0x048C, r24
 //Adownline=EEPROM_read(26);//A组加热高低温度
 Bupline=EEPROM_read(27);
    1350:	8b e1       	ldi	r24, 0x1B	; 27
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1358:	c8 2e       	mov	r12, r24
 DATAlist[0x3b]=EEPROM_read(28);//制水总量高位
    135a:	8c e1       	ldi	r24, 0x1C	; 28
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1362:	80 93 af 04 	sts	0x04AF, r24
 DATAlist[0x3c]=EEPROM_read(29);//
    1366:	8d e1       	ldi	r24, 0x1D	; 29
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    136e:	80 93 b0 04 	sts	0x04B0, r24
 DATAlist[0x3d]=EEPROM_read(30);//模式3下的剩余水总量
    1372:	8e e1       	ldi	r24, 0x1E	; 30
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    137a:	80 93 b1 04 	sts	0x04B1, r24
 DATAlist[0x3e]=EEPROM_read(31);//
    137e:	8f e1       	ldi	r24, 0x1F	; 31
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1386:	80 93 b2 04 	sts	0x04B2, r24
 ICEdownline=EEPROM_read(33);//冰水上下温度范围
    138a:	81 e2       	ldi	r24, 0x21	; 33
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1392:	80 93 3e 05 	sts	0x053E, r24
 yupulsh=EEPROM_read(35);//剩余脉冲数保存，少于1升的脉冲数
    1396:	83 e2       	ldi	r24, 0x23	; 35
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    139e:	8c 87       	std	Y+12, r24	; 0x0c
 yupulsl=EEPROM_read(36);
    13a0:	84 e2       	ldi	r24, 0x24	; 36
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    13a8:	8c 83       	std	Y+4, r24	; 0x04
 pule1lh=EEPROM_read(37);
    13aa:	85 e2       	ldi	r24, 0x25	; 37
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    13b2:	f8 2e       	mov	r15, r24
 pule1ll=EEPROM_read(38);//1升脉冲数的高低字节
    13b4:	86 e2       	ldi	r24, 0x26	; 38
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    13bc:	28 2f       	mov	r18, r24
 DATAlist[0x5c]=pule1lh;
    13be:	f0 92 d0 04 	sts	0x04D0, r15
 DATAlist[0x5d]=pule1ll;
    13c2:	80 93 d1 04 	sts	0x04D1, r24
 pule1l=pule1lh*256+pule1ll;//总量
    13c6:	9f 2d       	mov	r25, r15
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	dc 01       	movw	r26, r24
    13cc:	a2 0f       	add	r26, r18
    13ce:	b1 1d       	adc	r27, r1
    13d0:	be 83       	std	Y+6, r27	; 0x06
    13d2:	ad 83       	std	Y+5, r26	; 0x05
 flushontime=EEPROM_read(39);
    13d4:	87 e2       	ldi	r24, 0x27	; 39
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    13dc:	0f 2e       	mov	r0, r31
    13de:	fe e8       	ldi	r31, 0x8E	; 142
    13e0:	ef 2e       	mov	r14, r31
    13e2:	f4 e0       	ldi	r31, 0x04	; 4
    13e4:	ff 2e       	mov	r15, r31
    13e6:	f0 2d       	mov	r31, r0
    13e8:	0f 2e       	mov	r0, r31
    13ea:	fe e4       	ldi	r31, 0x4E	; 78
    13ec:	af 2e       	mov	r10, r31
    13ee:	bb 24       	eor	r11, r11
    13f0:	f0 2d       	mov	r31, r0
  
  for(i=0;i<6;i++)//读出设定的额定寿命值
  {
	  DATAlist[0x1a+i]=EEPROM_read(i+78);  //menmory to 84
    13f2:	c5 01       	movw	r24, r10
    13f4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    13f8:	f7 01       	movw	r30, r14
    13fa:	81 93       	st	Z+, r24
    13fc:	7f 01       	movw	r14, r30
    13fe:	08 94       	sec
    1400:	a1 1c       	adc	r10, r1
    1402:	b1 1c       	adc	r11, r1
 DATAlist[0x5c]=pule1lh;
 DATAlist[0x5d]=pule1ll;
 pule1l=pule1lh*256+pule1ll;//总量
 flushontime=EEPROM_read(39);
  
  for(i=0;i<6;i++)//读出设定的额定寿命值
    1404:	f4 e5       	ldi	r31, 0x54	; 84
    1406:	af 16       	cp	r10, r31
    1408:	b1 04       	cpc	r11, r1
    140a:	99 f7       	brne	.-26     	; 0x13f2 <main+0x12c>
    140c:	0f 2e       	mov	r0, r31
    140e:	f8 e9       	ldi	r31, 0x98	; 152
    1410:	ef 2e       	mov	r14, r31
    1412:	f4 e0       	ldi	r31, 0x04	; 4
    1414:	ff 2e       	mov	r15, r31
    1416:	f0 2d       	mov	r31, r0
    1418:	0f 2e       	mov	r0, r31
    141a:	f6 e5       	ldi	r31, 0x56	; 86
    141c:	af 2e       	mov	r10, r31
    141e:	bb 24       	eor	r11, r11
    1420:	f0 2d       	mov	r31, r0
  {
	  DATAlist[0x1a+i]=EEPROM_read(i+78);  //menmory to 84
  }
  for(i=0;i<12;i++)//读出滤芯使用的值
  {
	  DATAlist[0x24+i]=EEPROM_read(i+86);  //menmory to 98
    1422:	c5 01       	movw	r24, r10
    1424:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1428:	d7 01       	movw	r26, r14
    142a:	8d 93       	st	X+, r24
    142c:	7d 01       	movw	r14, r26
    142e:	08 94       	sec
    1430:	a1 1c       	adc	r10, r1
    1432:	b1 1c       	adc	r11, r1
  
  for(i=0;i<6;i++)//读出设定的额定寿命值
  {
	  DATAlist[0x1a+i]=EEPROM_read(i+78);  //menmory to 84
  }
  for(i=0;i<12;i++)//读出滤芯使用的值
    1434:	b2 e6       	ldi	r27, 0x62	; 98
    1436:	ab 16       	cp	r10, r27
    1438:	b1 04       	cpc	r11, r1
    143a:	99 f7       	brne	.-26     	; 0x1422 <main+0x15c>
  {
	  DATAlist[0x24+i]=EEPROM_read(i+86);  //menmory to 98
  }
   childlock=EEPROM_read(98);
    143c:	82 e6       	ldi	r24, 0x62	; 98
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
   timemode=EEPROM_read(99);
    1444:	83 e6       	ldi	r24, 0x63	; 99
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    144c:	80 93 f3 03 	sts	0x03F3, r24
   timezhishui=EEPROM_read(100);
    1450:	84 e6       	ldi	r24, 0x64	; 100
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1458:	80 93 34 04 	sts	0x0434, r24
   timeflush=EEPROM_read(113);  //冲洗时间
    145c:	81 e7       	ldi	r24, 0x71	; 113
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1464:	80 93 72 04 	sts	0x0472, r24

   DATAlist[0x5e]=EEPROM_read(115);
    1468:	83 e7       	ldi	r24, 0x73	; 115
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1470:	80 93 d2 04 	sts	0x04D2, r24
   DATAlist[0x5f]=EEPROM_read(116);//剩余时间
    1474:	84 e7       	ldi	r24, 0x74	; 116
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    147c:	80 93 d3 04 	sts	0x04D3, r24
    1480:	e6 c0       	rjmp	.+460    	; 0x164e <main+0x388>
 } 
else//没初始化过数据
 {
  
  Bupline=95;Bdownline=75;							//上限温度  Bupline  2017
  DATAlist[0x18]=0xaa;//允许机器使用
    1482:	8a ea       	ldi	r24, 0xAA	; 170
    1484:	80 93 8c 04 	sts	0x048C, r24
  EEPROM_write(25,DATAlist[0x18]);
    1488:	89 e1       	ldi	r24, 0x19	; 25
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	6a ea       	ldi	r22, 0xAA	; 170
    148e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(27,Bupline);//EEPROM_write(28,Bdownline);
    1492:	8b e1       	ldi	r24, 0x1B	; 27
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	6f e5       	ldi	r22, 0x5F	; 95
    1498:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  DATAlist[0x3b]=0x00;//EEPROM_read(28);//制水总量高位
    149c:	10 92 af 04 	sts	0x04AF, r1
  DATAlist[0x3c]=0x00;//EEPROM_read(29);//
    14a0:	10 92 b0 04 	sts	0x04B0, r1
  DATAlist[0x3d]=0x00;//EEPROM_read(30);//模式3下的剩余水总量
    14a4:	10 92 b1 04 	sts	0x04B1, r1
  DATAlist[0x3e]=0x00;//EEPROM_read(31);//
    14a8:	10 92 b2 04 	sts	0x04B2, r1
  EEPROM_write(28,DATAlist[0x3b]);
    14ac:	8c e1       	ldi	r24, 0x1C	; 28
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(29,DATAlist[0x3c]);
    14b6:	8d e1       	ldi	r24, 0x1D	; 29
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	60 91 b0 04 	lds	r22, 0x04B0
    14be:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(30,DATAlist[0x3d]);
    14c2:	8e e1       	ldi	r24, 0x1E	; 30
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	60 91 b1 04 	lds	r22, 0x04B1
    14ca:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(31,DATAlist[0x3e]);
    14ce:	8f e1       	ldi	r24, 0x1F	; 31
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	60 91 b2 04 	lds	r22, 0x04B2
    14d6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  yupulsh=0;
  yupulsl=0;
  EEPROM_write(35,yupulsh);
    14da:	83 e2       	ldi	r24, 0x23	; 35
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(36,yupulsl);
    14e4:	84 e2       	ldi	r24, 0x24	; 36
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  flushontime=10;
  EEPROM_write(39,flushontime);//冲洗时间的设定
    14ee:	87 e2       	ldi	r24, 0x27	; 39
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	6a e0       	ldi	r22, 0x0A	; 10
    14f4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>

  ICEdownline=15;
    14f8:	0f 2e       	mov	r0, r31
    14fa:	ff e0       	ldi	r31, 0x0F	; 15
    14fc:	ff 2e       	mov	r15, r31
    14fe:	f0 2d       	mov	r31, r0
    1500:	f0 92 3e 05 	sts	0x053E, r15
  EEPROM_write(33,ICEdownline);
    1504:	81 e2       	ldi	r24, 0x21	; 33
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	6f e0       	ldi	r22, 0x0F	; 15
    150a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>

  pule1lh=0x05;pule1ll=20;pule1l=1300;
  DATAlist[0x5c]=pule1lh;
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	80 93 d0 04 	sts	0x04D0, r24
  DATAlist[0x5d]=pule1ll;
    1514:	84 e1       	ldi	r24, 0x14	; 20
    1516:	80 93 d1 04 	sts	0x04D1, r24
  EEPROM_write(37,pule1lh);
    151a:	85 e2       	ldi	r24, 0x25	; 37
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	65 e0       	ldi	r22, 0x05	; 5
    1520:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(38,pule1ll);
    1524:	86 e2       	ldi	r24, 0x26	; 38
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	64 e1       	ldi	r22, 0x14	; 20
    152a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>

  EEPROM_write(43,0xaa);
    152e:	8b e2       	ldi	r24, 0x2B	; 43
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	6a ea       	ldi	r22, 0xAA	; 170
    1534:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(9,0xaa);//保存成功标志 
    1538:	89 e0       	ldi	r24, 0x09	; 9
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	6a ea       	ldi	r22, 0xAA	; 170
    153e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>

   
   DATAlist[0x1a]=15;EEPROM_write(78,15);//初始化滤芯额定值
    1542:	f0 92 8e 04 	sts	0x048E, r15
    1546:	8e e4       	ldi	r24, 0x4E	; 78
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	6f e0       	ldi	r22, 0x0F	; 15
    154c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   DATAlist[0x1b]=15;EEPROM_write(79,15);
    1550:	f0 92 8f 04 	sts	0x048F, r15
    1554:	8f e4       	ldi	r24, 0x4F	; 79
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	6f e0       	ldi	r22, 0x0F	; 15
    155a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   DATAlist[0x1c]=30;EEPROM_write(80,30);
    155e:	0f 2e       	mov	r0, r31
    1560:	fe e1       	ldi	r31, 0x1E	; 30
    1562:	ff 2e       	mov	r15, r31
    1564:	f0 2d       	mov	r31, r0
    1566:	f0 92 90 04 	sts	0x0490, r15
    156a:	80 e5       	ldi	r24, 0x50	; 80
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	6e e1       	ldi	r22, 0x1E	; 30
    1570:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   DATAlist[0x1d]=30;EEPROM_write(81,30);
    1574:	f0 92 91 04 	sts	0x0491, r15
    1578:	81 e5       	ldi	r24, 0x51	; 81
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	6e e1       	ldi	r22, 0x1E	; 30
    157e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   DATAlist[0x1e]=25;EEPROM_write(82,25);
    1582:	89 e1       	ldi	r24, 0x19	; 25
    1584:	80 93 92 04 	sts	0x0492, r24
    1588:	82 e5       	ldi	r24, 0x52	; 82
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	69 e1       	ldi	r22, 0x19	; 25
    158e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   DATAlist[0x1f]=13;EEPROM_write(83,13);
    1592:	8d e0       	ldi	r24, 0x0D	; 13
    1594:	80 93 93 04 	sts	0x0493, r24
    1598:	83 e5       	ldi	r24, 0x53	; 83
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	6d e0       	ldi	r22, 0x0D	; 13
    159e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
    15a2:	0f 2e       	mov	r0, r31
    15a4:	f8 e9       	ldi	r31, 0x98	; 152
    15a6:	ef 2e       	mov	r14, r31
    15a8:	f4 e0       	ldi	r31, 0x04	; 4
    15aa:	ff 2e       	mov	r15, r31
    15ac:	f0 2d       	mov	r31, r0
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f6 e5       	ldi	r31, 0x56	; 86
    15b2:	cf 2e       	mov	r12, r31
    15b4:	dd 24       	eor	r13, r13
    15b6:	f0 2d       	mov	r31, r0
   for(i=0;i<12;i++)			//menmory to 86+12==98  初始化滤芯计数
   {
	   DATAlist[0x24+i]=0;
    15b8:	f7 01       	movw	r30, r14
    15ba:	11 92       	st	Z+, r1
    15bc:	7f 01       	movw	r14, r30
	   EEPROM_write((86+i),DATAlist[0x24+i]);
    15be:	c6 01       	movw	r24, r12
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
    15c6:	08 94       	sec
    15c8:	c1 1c       	adc	r12, r1
    15ca:	d1 1c       	adc	r13, r1
   DATAlist[0x1b]=15;EEPROM_write(79,15);
   DATAlist[0x1c]=30;EEPROM_write(80,30);
   DATAlist[0x1d]=30;EEPROM_write(81,30);
   DATAlist[0x1e]=25;EEPROM_write(82,25);
   DATAlist[0x1f]=13;EEPROM_write(83,13);
   for(i=0;i<12;i++)			//menmory to 86+12==98  初始化滤芯计数
    15cc:	f2 e6       	ldi	r31, 0x62	; 98
    15ce:	cf 16       	cp	r12, r31
    15d0:	d1 04       	cpc	r13, r1
    15d2:	91 f7       	brne	.-28     	; 0x15b8 <main+0x2f2>
   {
	   DATAlist[0x24+i]=0;
	   EEPROM_write((86+i),DATAlist[0x24+i]);
   }
   childlock=0xaa;
   EEPROM_write(98,0xaa);		//儿童保护初始化
    15d4:	82 e6       	ldi	r24, 0x62	; 98
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	6a ea       	ldi	r22, 0xAA	; 170
    15da:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   timemode=0;					//定时工作模式关闭   menmory to 99
    15de:	10 92 f3 03 	sts	0x03F3, r1
   EEPROM_write(99,0);
    15e2:	83 e6       	ldi	r24, 0x63	; 99
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   timezhishui=30;
    15ec:	8e e1       	ldi	r24, 0x1E	; 30
    15ee:	80 93 34 04 	sts	0x0434, r24
   EEPROM_write(100,30);			//制水30分钟计时  20s-30*60=1800/20=90   menmory to 100
    15f2:	84 e6       	ldi	r24, 0x64	; 100
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	6e e1       	ldi	r22, 0x1E	; 30
    15f8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   timeflush=18;
    15fc:	82 e1       	ldi	r24, 0x12	; 18
    15fe:	80 93 72 04 	sts	0x0472, r24
   EEPROM_write(113,18);		//制水30分钟冲洗18秒
    1602:	81 e7       	ldi	r24, 0x71	; 113
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	62 e1       	ldi	r22, 0x12	; 18
    1608:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   enablebit=0;
    160c:	10 92 e1 03 	sts	0x03E1, r1
   EEPROM_write(114,0);			//强制加热或者制冷位    menmory to 114
    1610:	82 e7       	ldi	r24, 0x72	; 114
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   DATAlist[0x5e]=0;
    161a:	10 92 d2 04 	sts	0x04D2, r1
   DATAlist[0x5f]=160;     //剩余天数
    161e:	80 ea       	ldi	r24, 0xA0	; 160
    1620:	80 93 d3 04 	sts	0x04D3, r24
   EEPROM_write(115,DATAlist[0x5e]);
    1624:	83 e7       	ldi	r24, 0x73	; 115
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
   EEPROM_write(116,DATAlist[0x5f]); //menmory to 116
    162e:	84 e7       	ldi	r24, 0x74	; 116
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	60 91 d3 04 	lds	r22, 0x04D3
    1636:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
  EEPROM_write(39,flushontime);//冲洗时间的设定

  ICEdownline=15;
  EEPROM_write(33,ICEdownline);

  pule1lh=0x05;pule1ll=20;pule1l=1300;
    163a:	24 e1       	ldi	r18, 0x14	; 20
    163c:	35 e0       	ldi	r19, 0x05	; 5
    163e:	3e 83       	std	Y+6, r19	; 0x06
    1640:	2d 83       	std	Y+5, r18	; 0x05
  EEPROM_write(28,DATAlist[0x3b]);
  EEPROM_write(29,DATAlist[0x3c]);
  EEPROM_write(30,DATAlist[0x3d]);
  EEPROM_write(31,DATAlist[0x3e]);
  yupulsh=0;
  yupulsl=0;
    1642:	1c 82       	std	Y+4, r1	; 0x04
  DATAlist[0x3e]=0x00;//EEPROM_read(31);//
  EEPROM_write(28,DATAlist[0x3b]);
  EEPROM_write(29,DATAlist[0x3c]);
  EEPROM_write(30,DATAlist[0x3d]);
  EEPROM_write(31,DATAlist[0x3e]);
  yupulsh=0;
    1644:	1c 86       	std	Y+12, r1	; 0x0c
   DATAlist[0x5f]=EEPROM_read(116);//剩余时间
 } 
else//没初始化过数据
 {
  
  Bupline=95;Bdownline=75;							//上限温度  Bupline  2017
    1646:	0f 2e       	mov	r0, r31
    1648:	ff e5       	ldi	r31, 0x5F	; 95
    164a:	cf 2e       	mov	r12, r31
    164c:	f0 2d       	mov	r31, r0
   DATAlist[0x5e]=0;
   DATAlist[0x5f]=160;     //剩余天数
   EEPROM_write(115,DATAlist[0x5e]);
   EEPROM_write(116,DATAlist[0x5f]); //menmory to 116
 } 
 DATAlist[0x19]=Bupline;
    164e:	c0 92 8d 04 	sts	0x048D, r12
 
 keybyte=0xff;//可以进去按钮1,-6
 swbyte=0x00;//开关状态为关闭
    1652:	10 92 fc 03 	sts	0x03FC, r1
 JXloop=0;//间歇时间
 enoughwater=0;//取出的水已经足够额度
    1656:	10 92 e9 05 	sts	0x05E9, r1
 hotwater=0;
    165a:	10 92 3d 05 	sts	0x053D, r1
    165e:	10 92 3c 05 	sts	0x053C, r1
 warmwater=0;
    1662:	10 92 7d 05 	sts	0x057D, r1
    1666:	10 92 7c 05 	sts	0x057C, r1
 icewater=0;
    166a:	10 92 0c 04 	sts	0x040C, r1
    166e:	10 92 0b 04 	sts	0x040B, r1
 iceonoff=04;//冰水阀压缩机传送字节
 yasuoji=0;//压缩机
 yasuojicount=0;

//----初始化时段----
  DATAlist[0x80]=EEPROM_read(52);//时间段是否设置了
    1672:	84 e3       	ldi	r24, 0x34	; 52
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    167a:	80 93 f4 04 	sts	0x04F4, r24
  if(DATAlist[0x80]==0xaa)//有保存，读出时间段
    167e:	8a 3a       	cpi	r24, 0xAA	; 170
    1680:	b1 f5       	brne	.+108    	; 0x16ee <main+0x428>
    1682:	0f 2e       	mov	r0, r31
    1684:	f5 ef       	ldi	r31, 0xF5	; 245
    1686:	ef 2e       	mov	r14, r31
    1688:	f4 e0       	ldi	r31, 0x04	; 4
    168a:	ff 2e       	mov	r15, r31
    168c:	f0 2d       	mov	r31, r0
	  
	 }
//*********************************************************************************************************************************
//*****************************************************主程序****************************************************************************
//--------------------
int main(void)
    168e:	0f 2e       	mov	r0, r31
    1690:	f9 e9       	ldi	r31, 0x99	; 153
    1692:	cf 2e       	mov	r12, r31
    1694:	dd 24       	eor	r13, r13
    1696:	f0 2d       	mov	r31, r0
    1698:	c0 0e       	add	r12, r16
    169a:	d1 1e       	adc	r13, r17
    169c:	84 eb       	ldi	r24, 0xB4	; 180
    169e:	9f ef       	ldi	r25, 0xFF	; 255
    16a0:	ac 01       	movw	r20, r24
    16a2:	40 1b       	sub	r20, r16
    16a4:	51 0b       	sbc	r21, r17
    16a6:	8a 01       	movw	r16, r20
    16a8:	c6 01       	movw	r24, r12
    16aa:	67 01       	movw	r12, r14
    16ac:	7c 01       	movw	r14, r24
  DATAlist[0x80]=EEPROM_read(52);//时间段是否设置了
  if(DATAlist[0x80]==0xaa)//有保存，读出时间段
     { 
		for(i=0;i<24;i++)  //将数据初始化
		{
			DATAlist[0x81+i]=EEPROM_read(53+i); //memory to 77  53-77    101-112
    16ae:	c8 01       	movw	r24, r16
    16b0:	8c 0d       	add	r24, r12
    16b2:	9d 1d       	adc	r25, r13
    16b4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    16b8:	d6 01       	movw	r26, r12
    16ba:	8d 93       	st	X+, r24
    16bc:	6d 01       	movw	r12, r26

//----初始化时段----
  DATAlist[0x80]=EEPROM_read(52);//时间段是否设置了
  if(DATAlist[0x80]==0xaa)//有保存，读出时间段
     { 
		for(i=0;i<24;i++)  //将数据初始化
    16be:	ae 15       	cp	r26, r14
    16c0:	bf 05       	cpc	r27, r15
    16c2:	a9 f7       	brne	.-22     	; 0x16ae <main+0x3e8>
    16c4:	0d e0       	ldi	r16, 0x0D	; 13
    16c6:	15 e0       	ldi	r17, 0x05	; 5
    16c8:	0f 2e       	mov	r0, r31
    16ca:	f5 e6       	ldi	r31, 0x65	; 101
    16cc:	ef 2e       	mov	r14, r31
    16ce:	ff 24       	eor	r15, r15
    16d0:	f0 2d       	mov	r31, r0
		{
			DATAlist[0x81+i]=EEPROM_read(53+i); //memory to 77  53-77    101-112
		}
		for(i=0;i<12;i++)  //将数据初始化
		{
			DATAlist[0x99+i]=EEPROM_read(101+i); //memory to    101-112
    16d2:	c7 01       	movw	r24, r14
    16d4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    16d8:	f8 01       	movw	r30, r16
    16da:	81 93       	st	Z+, r24
    16dc:	8f 01       	movw	r16, r30
    16de:	08 94       	sec
    16e0:	e1 1c       	adc	r14, r1
    16e2:	f1 1c       	adc	r15, r1
     { 
		for(i=0;i<24;i++)  //将数据初始化
		{
			DATAlist[0x81+i]=EEPROM_read(53+i); //memory to 77  53-77    101-112
		}
		for(i=0;i<12;i++)  //将数据初始化
    16e4:	f1 e7       	ldi	r31, 0x71	; 113
    16e6:	ef 16       	cp	r14, r31
    16e8:	f1 04       	cpc	r15, r1
    16ea:	99 f7       	brne	.-26     	; 0x16d2 <main+0x40c>
    16ec:	34 c0       	rjmp	.+104    	; 0x1756 <main+0x490>
    16ee:	e6 ef       	ldi	r30, 0xF6	; 246
    16f0:	f4 e0       	ldi	r31, 0x04	; 4
	  
	 }
//*********************************************************************************************************************************
//*****************************************************主程序****************************************************************************
//--------------------
int main(void)
    16f2:	c8 01       	movw	r24, r16
    16f4:	8a 55       	subi	r24, 0x5A	; 90
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
	 }
 else   //没有设置时段初始值
     {
	 	for(i=0;i<18;i++)  //将数据初始化
		{
			DATAlist[0x82+(2*i)]=0;
    16f8:	10 82       	st	Z, r1
    16fa:	32 96       	adiw	r30, 0x02	; 2
			DATAlist[0x99+i]=EEPROM_read(101+i); //memory to    101-112
		}
	 }
 else   //没有设置时段初始值
     {
	 	for(i=0;i<18;i++)  //将数据初始化
    16fc:	e8 17       	cp	r30, r24
    16fe:	f9 07       	cpc	r31, r25
    1700:	d9 f7       	brne	.-10     	; 0x16f8 <main+0x432>
		{
			DATAlist[0x82+(2*i)]=0;
		} 
		DATAlist[0x81]=7;DATAlist[0x83]=9;
    1702:	87 e0       	ldi	r24, 0x07	; 7
    1704:	80 93 f5 04 	sts	0x04F5, r24
    1708:	99 e0       	ldi	r25, 0x09	; 9
    170a:	90 93 f7 04 	sts	0x04F7, r25
		DATAlist[0x85]=0x11;DATAlist[0x87]=0x13;
    170e:	21 e1       	ldi	r18, 0x11	; 17
    1710:	20 93 f9 04 	sts	0x04F9, r18
    1714:	33 e1       	ldi	r19, 0x13	; 19
    1716:	30 93 fb 04 	sts	0x04FB, r19
		DATAlist[0x89]=0x18;DATAlist[0x8b]=0x21;
    171a:	48 e1       	ldi	r20, 0x18	; 24
    171c:	40 93 fd 04 	sts	0x04FD, r20
    1720:	51 e2       	ldi	r21, 0x21	; 33
    1722:	50 93 ff 04 	sts	0x04FF, r21
		DATAlist[0x8d]=7;DATAlist[0x8f]=9;
    1726:	80 93 01 05 	sts	0x0501, r24
    172a:	90 93 03 05 	sts	0x0503, r25
		DATAlist[0x91]=0x11;DATAlist[0x93]=0x13;
    172e:	20 93 05 05 	sts	0x0505, r18
    1732:	30 93 07 05 	sts	0x0507, r19
		DATAlist[0x95]=0x18;DATAlist[0x97]=0x21;	
    1736:	40 93 09 05 	sts	0x0509, r20
    173a:	50 93 0b 05 	sts	0x050B, r21
		DATAlist[0x99]=7; DATAlist[0x9B]=9;
    173e:	80 93 0d 05 	sts	0x050D, r24
    1742:	90 93 0f 05 	sts	0x050F, r25
		DATAlist[0x9D]=0x11;DATAlist[0x9F]=0x13;
    1746:	20 93 11 05 	sts	0x0511, r18
    174a:	30 93 13 05 	sts	0x0513, r19
		DATAlist[0xA1]=0x18;DATAlist[0xA3]=0x21;
    174e:	40 93 15 05 	sts	0x0515, r20
    1752:	50 93 17 05 	sts	0x0517, r21
	 }


   TCCR0=0x05;   //02开启TIMER0定时
    1756:	85 e0       	ldi	r24, 0x05	; 5
    1758:	83 bf       	out	0x33, r24	; 51
//------------------------------------
//----------表的初始化---------------
   iceuptemp=EEPROM_read(0x04);//
    175a:	84 e0       	ldi	r24, 0x04	; 4
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    1762:	18 2f       	mov	r17, r24
   icedowntemp=EEPROM_read(0x05);//15
    1764:	85 e0       	ldi	r24, 0x05	; 5
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    176c:	08 2f       	mov	r16, r24
   if(iceuptemp>50)    //合法性
    176e:	13 33       	cpi	r17, 0x33	; 51
    1770:	28 f0       	brcs	.+10     	; 0x177c <main+0x4b6>
      {
		  iceuptemp=20;
		  EEPROM_write(0x04,iceuptemp); 
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	64 e1       	ldi	r22, 0x14	; 20
    1778:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
	  }
	if(icedowntemp>50)
    177c:	03 33       	cpi	r16, 0x33	; 51
    177e:	28 f0       	brcs	.+10     	; 0x178a <main+0x4c4>
	{
		icedowntemp=15;
		EEPROM_write(0x05,icedowntemp);
    1780:	85 e0       	ldi	r24, 0x05	; 5
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	6f e0       	ldi	r22, 0x0F	; 15
    1786:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
	}
   DATAlist[0x40]=0xaa;           //把表首地址置AA
    178a:	8a ea       	ldi	r24, 0xAA	; 170
    178c:	80 93 b4 04 	sts	0x04B4, r24
   DATAlist[0]=0xaa;
    1790:	80 93 74 04 	sts	0x0474, r24

BEEP(50);
    1794:	82 e3       	ldi	r24, 0x32	; 50
    1796:	0e 94 92 02 	call	0x524	; 0x524 <BEEP>
   HT1721C_BL_1;
    179a:	1a 9a       	sbi	0x03, 2	; 3
   INIT_1721();
    179c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <INIT_1721>
    17a0:	8f e4       	ldi	r24, 0x4F	; 79
    17a2:	93 ec       	ldi	r25, 0xC3	; 195
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <main+0x4de>
    17a8:	00 c0       	rjmp	.+0      	; 0x17aa <main+0x4e4>
    17aa:	00 00       	nop
   _delay_ms(200);
   
   WRITE_ALLRAM_1721(1);
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	0e 94 22 02 	call	0x444	; 0x444 <WRITE_ALLRAM_1721>
    17b2:	a7 ea       	ldi	r26, 0xA7	; 167
    17b4:	b1 e6       	ldi	r27, 0x61	; 97
    17b6:	11 97       	sbiw	r26, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <main+0x4f0>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <main+0x4f6>
    17bc:	00 00       	nop
	_delay_ms(100);
	
//---test LCD and key-----
	INIT_1726();
    17be:	0e 94 58 09 	call	0x12b0	; 0x12b0 <INIT_1726>
    17c2:	ef e4       	ldi	r30, 0x4F	; 79
    17c4:	f3 ec       	ldi	r31, 0xC3	; 195
    17c6:	31 97       	sbiw	r30, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <main+0x500>
    17ca:	00 c0       	rjmp	.+0      	; 0x17cc <main+0x506>
    17cc:	00 00       	nop
	_delay_ms(200);
	WRITE_ALLRAM_1726(1);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	0e 94 1a 09 	call	0x1234	; 0x1234 <WRITE_ALLRAM_1726>
    17d4:	2f eb       	ldi	r18, 0xBF	; 191
    17d6:	37 e2       	ldi	r19, 0x27	; 39
    17d8:	49 e0       	ldi	r20, 0x09	; 9
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	30 40       	sbci	r19, 0x00	; 0
    17de:	40 40       	sbci	r20, 0x00	; 0
    17e0:	e1 f7       	brne	.-8      	; 0x17da <main+0x514>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <main+0x51e>
    17e4:	00 00       	nop
	_delay_ms(3000);
	
	WRITE_ALLRAM_1726(0);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	0e 94 1a 09 	call	0x1234	; 0x1234 <WRITE_ALLRAM_1726>
	LCDNUM[5]=SMGL[IDDAT4-0x30];
    17ec:	80 91 c7 03 	lds	r24, 0x03C7
    17f0:	80 93 19 04 	sts	0x0419, r24
	LCDNUM[6]=SMGL[IDDAT5-0x30];
    17f4:	80 93 1a 04 	sts	0x041A, r24
	LCDNUM[7]=SMGL[IDDAT6-0x30];
    17f8:	80 93 1b 04 	sts	0x041B, r24
	LCDNUM[8]=SMGL[IDDAT7-0x30];
    17fc:	80 91 c9 03 	lds	r24, 0x03C9
    1800:	80 93 1c 04 	sts	0x041C, r24
	LCDNUM[9]=SMGL[IDDAT8-0x30];
    1804:	80 91 cc 03 	lds	r24, 0x03CC
    1808:	80 93 1d 04 	sts	0x041D, r24
	REFRESH_ALLRAM_1726();_delay_ms(10000);
    180c:	0e 94 38 09 	call	0x1270	; 0x1270 <REFRESH_ALLRAM_1726>
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	54 e8       	ldi	r21, 0x84	; 132
    1814:	6e e1       	ldi	r22, 0x1E	; 30
    1816:	41 50       	subi	r20, 0x01	; 1
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	60 40       	sbci	r22, 0x00	; 0
    181c:	e1 f7       	brne	.-8      	; 0x1816 <main+0x550>
    181e:	00 c0       	rjmp	.+0      	; 0x1820 <main+0x55a>
    1820:	00 00       	nop
	LCDNUM[5]=0;
    1822:	10 92 19 04 	sts	0x0419, r1
	LCDNUM[6]=0;
    1826:	10 92 1a 04 	sts	0x041A, r1
	LCDNUM[7]=0;
    182a:	10 92 1b 04 	sts	0x041B, r1
	LCDNUM[8]=0;
    182e:	10 92 1c 04 	sts	0x041C, r1
	LCDNUM[9]=0;
    1832:	10 92 1d 04 	sts	0x041D, r1
	WRITE_ALLRAM_1726(0);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0e 94 1a 09 	call	0x1234	; 0x1234 <WRITE_ALLRAM_1726>
    183c:	6f e7       	ldi	r22, 0x7F	; 127
    183e:	7a e1       	ldi	r23, 0x1A	; 26
    1840:	86 e0       	ldi	r24, 0x06	; 6
    1842:	61 50       	subi	r22, 0x01	; 1
    1844:	70 40       	sbci	r23, 0x00	; 0
    1846:	80 40       	sbci	r24, 0x00	; 0
    1848:	e1 f7       	brne	.-8      	; 0x1842 <main+0x57c>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <main+0x586>
    184c:	00 00       	nop
	
 //------------------
 //---按下设置 和 - 按键，进入滤芯寿命设置
 // read_3key();//use

LCDNUM[13]=0x00;
    184e:	10 92 21 04 	sts	0x0421, r1
	timebit=0x01;
	enterkeyc=10;

 //------------------------
	LCDmode=0;
	DATAlist[0x20]=0x01;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	80 93 94 04 	sts	0x0494, r24
	DATAlist[0x21]=0;
    1858:	10 92 95 04 	sts	0x0495, r1
	fastatus=0x08;
    185c:	88 e0       	ldi	r24, 0x08	; 8
    185e:	80 93 f2 02 	sts	0x02F2, r24
	if(DATAlist[0x18]==0xbb)
    1862:	80 91 8c 04 	lds	r24, 0x048C
    1866:	8b 3b       	cpi	r24, 0xBB	; 187
    1868:	41 f4       	brne	.+16     	; 0x187a <main+0x5b4>
		{
			LCDmode=48;
			//HT1721C_BL_0;
			WRITE_ALLRAM_1726(0);
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	0e 94 1a 09 	call	0x1234	; 0x1234 <WRITE_ALLRAM_1726>
	DATAlist[0x20]=0x01;
	DATAlist[0x21]=0;
	fastatus=0x08;
	if(DATAlist[0x18]==0xbb)
		{
			LCDmode=48;
    1870:	0f 2e       	mov	r0, r31
    1872:	f0 e3       	ldi	r31, 0x30	; 48
    1874:	ff 2e       	mov	r15, r31
    1876:	f0 2d       	mov	r31, r0
    1878:	01 c0       	rjmp	.+2      	; 0x187c <main+0x5b6>
 //------定时工作模式显示-------
	timebit=0x01;
	enterkeyc=10;

 //------------------------
	LCDmode=0;
    187a:	ff 24       	eor	r15, r15
			LCDmode=48;
			//HT1721C_BL_0;
			WRITE_ALLRAM_1726(0);
		}
	LCDNUM[0]=0x00;
	LCDNUM[1]=0x00;
    187c:	10 92 15 04 	sts	0x0415, r1
	LCDNUM[2]=0x00;
    1880:	10 92 16 04 	sts	0x0416, r1
	LCDNUM[3]=0x00;
    1884:	10 92 17 04 	sts	0x0417, r1
	LCDNUM[4]=0x00;
	//------
	LCDNUM[0]|=0x01;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	80 93 14 04 	sts	0x0414, r24
	tempint1=DATAlist[0x5e]*256+DATAlist[0x5f];
    188e:	90 91 d2 04 	lds	r25, 0x04D2
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	20 91 d3 04 	lds	r18, 0x04D3
    1898:	fc 01       	movw	r30, r24
    189a:	e2 0f       	add	r30, r18
    189c:	f1 1d       	adc	r31, r1
	temp=tempint1/10000;
    189e:	cf 01       	movw	r24, r30
    18a0:	60 e1       	ldi	r22, 0x10	; 16
    18a2:	77 e2       	ldi	r23, 0x27	; 39
    18a4:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
	if(temp>0)LCDNUM[0]=(LCDNUM[0]&0x01)|SMGL[temp];
    18a8:	66 23       	and	r22, r22
    18aa:	49 f0       	breq	.+18     	; 0x18be <main+0x5f8>
    18ac:	86 ec       	ldi	r24, 0xC6	; 198
    18ae:	93 e0       	ldi	r25, 0x03	; 3
    18b0:	86 0f       	add	r24, r22
    18b2:	91 1d       	adc	r25, r1
    18b4:	dc 01       	movw	r26, r24
    18b6:	8c 91       	ld	r24, X
    18b8:	81 60       	ori	r24, 0x01	; 1
    18ba:	80 93 14 04 	sts	0x0414, r24
	tempint1=tempint1-(temp*10000);
    18be:	86 2f       	mov	r24, r22
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	20 ef       	ldi	r18, 0xF0	; 240
    18c4:	38 ed       	ldi	r19, 0xD8	; 216
    18c6:	82 9f       	mul	r24, r18
    18c8:	a0 01       	movw	r20, r0
    18ca:	83 9f       	mul	r24, r19
    18cc:	50 0d       	add	r21, r0
    18ce:	92 9f       	mul	r25, r18
    18d0:	50 0d       	add	r21, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	e4 0f       	add	r30, r20
    18d6:	f5 1f       	adc	r31, r21
	temp=tempint1/1000;
    18d8:	cf 01       	movw	r24, r30
    18da:	68 ee       	ldi	r22, 0xE8	; 232
    18dc:	73 e0       	ldi	r23, 0x03	; 3
    18de:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
	if(temp>0)LCDNUM[1]=(LCDNUM[1]&0x01)|SMGL[temp];
    18e2:	66 23       	and	r22, r22
    18e4:	41 f0       	breq	.+16     	; 0x18f6 <main+0x630>
    18e6:	86 ec       	ldi	r24, 0xC6	; 198
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	86 0f       	add	r24, r22
    18ec:	91 1d       	adc	r25, r1
    18ee:	dc 01       	movw	r26, r24
    18f0:	8c 91       	ld	r24, X
    18f2:	80 93 15 04 	sts	0x0415, r24
	tempint1=tempint1-(temp*1000);
    18f6:	86 2f       	mov	r24, r22
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	28 e1       	ldi	r18, 0x18	; 24
    18fc:	3c ef       	ldi	r19, 0xFC	; 252
    18fe:	82 9f       	mul	r24, r18
    1900:	a0 01       	movw	r20, r0
    1902:	83 9f       	mul	r24, r19
    1904:	50 0d       	add	r21, r0
    1906:	92 9f       	mul	r25, r18
    1908:	50 0d       	add	r21, r0
    190a:	11 24       	eor	r1, r1
    190c:	e4 0f       	add	r30, r20
    190e:	f5 1f       	adc	r31, r21
	temp=tempint1/100;
    1910:	cf 01       	movw	r24, r30
    1912:	64 e6       	ldi	r22, 0x64	; 100
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
	if(temp>0)LCDNUM[2]=(LCDNUM[2]&0x01)|SMGL[temp];
    191a:	66 23       	and	r22, r22
    191c:	41 f0       	breq	.+16     	; 0x192e <main+0x668>
    191e:	86 ec       	ldi	r24, 0xC6	; 198
    1920:	93 e0       	ldi	r25, 0x03	; 3
    1922:	86 0f       	add	r24, r22
    1924:	91 1d       	adc	r25, r1
    1926:	dc 01       	movw	r26, r24
    1928:	8c 91       	ld	r24, X
    192a:	80 93 16 04 	sts	0x0416, r24
	tempint1=tempint1-(temp*100);
    192e:	86 2f       	mov	r24, r22
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	2c e9       	ldi	r18, 0x9C	; 156
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	82 9f       	mul	r24, r18
    1938:	a0 01       	movw	r20, r0
    193a:	83 9f       	mul	r24, r19
    193c:	50 0d       	add	r21, r0
    193e:	92 9f       	mul	r25, r18
    1940:	50 0d       	add	r21, r0
    1942:	11 24       	eor	r1, r1
    1944:	9a 01       	movw	r18, r20
    1946:	2e 0f       	add	r18, r30
    1948:	3f 1f       	adc	r19, r31
	temp=tempint1/10;
    194a:	c9 01       	movw	r24, r18
    194c:	6a e0       	ldi	r22, 0x0A	; 10
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
	if(temp>0)LCDNUM[3]=(LCDNUM[3]&0x01)|SMGL[temp];
    1954:	66 23       	and	r22, r22
    1956:	41 f0       	breq	.+16     	; 0x1968 <main+0x6a2>
    1958:	86 ec       	ldi	r24, 0xC6	; 198
    195a:	93 e0       	ldi	r25, 0x03	; 3
    195c:	86 0f       	add	r24, r22
    195e:	91 1d       	adc	r25, r1
    1960:	fc 01       	movw	r30, r24
    1962:	80 81       	ld	r24, Z
    1964:	80 93 17 04 	sts	0x0417, r24
	tempint1=tempint1-(temp*10);
    1968:	86 ef       	ldi	r24, 0xF6	; 246
    196a:	9f ef       	ldi	r25, 0xFF	; 255
    196c:	68 9f       	mul	r22, r24
    196e:	80 2d       	mov	r24, r0
    1970:	11 24       	eor	r1, r1
	temp=tempint1;
	LCDNUM[4]=(LCDNUM[4]&0x01)|SMGL[temp];
    1972:	28 0f       	add	r18, r24
    1974:	86 ec       	ldi	r24, 0xC6	; 198
    1976:	93 e0       	ldi	r25, 0x03	; 3
    1978:	82 0f       	add	r24, r18
    197a:	91 1d       	adc	r25, r1
    197c:	dc 01       	movw	r26, r24
    197e:	8c 91       	ld	r24, X
    1980:	80 93 18 04 	sts	0x0418, r24
	DATAlist[0x09]=0x00;
    1984:	10 92 7d 04 	sts	0x047D, r1
	DATAlist[0x0a]=0x00;
    1988:	10 92 7e 04 	sts	0x047E, r1
	DATAlist[0x0b]=0x00;
    198c:	10 92 7f 04 	sts	0x047F, r1
	//-----
	TCNT1=0;
    1990:	1d bc       	out	0x2d, r1	; 45
    1992:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0x00; //00
    1994:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x07;  //07  启动T1计数
    1996:	87 e0       	ldi	r24, 0x07	; 7
    1998:	8e bd       	out	0x2e, r24	; 46
   flushontime=EEPROM_read(39);
    199a:	87 e2       	ldi	r24, 0x27	; 39
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    19a2:	89 83       	std	Y+1, r24	; 0x01
   if(flushontime>0)
    19a4:	88 23       	and	r24, r24
    19a6:	19 f0       	breq	.+6      	; 0x19ae <main+0x6e8>
	{	BENGON;
    19a8:	c2 9a       	sbi	0x18, 2	; 24
		FA_INWATERON;
    19aa:	1f 9a       	sbi	0x03, 7	; 3
		FA_FLUSHON;
    19ac:	1e 9a       	sbi	0x03, 6	; 3
		_delay_ms(3000);
		if(DATAlist[0x18]==0xaa)//许能否？
			{
				send_reply(0);
				HT1721C_BL_1;
				LCDmode=0;
    19ae:	ba e0       	ldi	r27, 0x0A	; 10
    19b0:	b9 a3       	lds	r27, 0x59
    19b2:	1e 86       	std	Y+14, r1	; 0x0e
    19b4:	1f a6       	lds	r17, 0xbf
    19b6:	1e a6       	lds	r17, 0xbe
    19b8:	e2 ec       	ldi	r30, 0xC2	; 194
    19ba:	e9 87       	std	Y+9, r30	; 0x09
    19bc:	66 24       	eor	r6, r6
    19be:	fa ef       	ldi	r31, 0xFA	; 250
    19c0:	fd a7       	lds	r31, 0x7d
    19c2:	21 e0       	ldi	r18, 0x01	; 1
    19c4:	29 ab       	sts	0x59, r18
    19c6:	1d 86       	std	Y+13, r1	; 0x0d
    19c8:	1c aa       	sts	0x9c, r17
    19ca:	1b aa       	sts	0x9b, r17
    19cc:	18 aa       	sts	0x98, r17
    19ce:	1a aa       	sts	0x9a, r17
    19d0:	31 e0       	ldi	r19, 0x01	; 1
    19d2:	3a a7       	lds	r19, 0x7a
    19d4:	77 24       	eor	r7, r7
    19d6:	ee 24       	eor	r14, r14
  }

 if(LCDmode==48)
	{
		_delay_ms(3000);
		if(DATAlist[0x18]==0xaa)//许能否？
    19d8:	0f 2e       	mov	r0, r31
    19da:	fc e8       	ldi	r31, 0x8C	; 140
    19dc:	4f 2e       	mov	r4, r31
    19de:	f4 e0       	ldi	r31, 0x04	; 4
    19e0:	5f 2e       	mov	r5, r31
    19e2:	f0 2d       	mov	r31, r0
				HT1721C_BL_1;
				LCDmode=0;
				EEPROM_write(25,DATAlist[0x18]);
				dealbyte&=0x7f;
				
				DATAlist[0x20]=0x01;
    19e4:	a2 01       	movw	r20, r4
    19e6:	48 5f       	subi	r20, 0xF8	; 248
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	5d a3       	lds	r21, 0x5d
    19ec:	4c a3       	lds	r20, 0x5c
		HT1721C_BL_1;
		LCDmode=0;
		dealbyte&=0xfe;
		
		DATAlist[0x20]=0x01;
		DATAlist[0x21]=0x00;
    19ee:	64 e9       	ldi	r22, 0x94	; 148
    19f0:	74 e0       	ldi	r23, 0x04	; 4
    19f2:	6f 5f       	subi	r22, 0xFF	; 255
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	7c a7       	lds	r23, 0x7c
    19f8:	6b a7       	lds	r22, 0x7b
		yupulsl=thistimepuls-temp*pule1l-yupulsl*256;
		EEPROM_write(35,yupulsh);
		EEPROM_write(36,yupulsl);//保存余量
		if(temp>0)//需要保存滤芯数值，总量
			{   
				tempint1=DATAlist[0x24]*256+DATAlist[0x25]+temp; //滤芯1
    19fa:	0f 2e       	mov	r0, r31
    19fc:	f8 e9       	ldi	r31, 0x98	; 152
    19fe:	af 2e       	mov	r10, r31
    1a00:	f4 e0       	ldi	r31, 0x04	; 4
    1a02:	bf 2e       	mov	r11, r31
    1a04:	f0 2d       	mov	r31, r0
    1a06:	c5 01       	movw	r24, r10
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	9f a3       	lds	r25, 0x5f
    1a0c:	8e a3       	lds	r24, 0x5e
				DATAlist[0x2F]=tempint1-(DATAlist[0x2E]*256);
				for(i=0;i<12;i++)			//menmory to 86+12==98  保存数据
				{
					EEPROM_write((86+i),DATAlist[0x24+i]);
				}
				tempint1=DATAlist[0x3b]*256+DATAlist[0x3c]+temp; 
    1a0e:	af ea       	ldi	r26, 0xAF	; 175
    1a10:	b4 e0       	ldi	r27, 0x04	; 4
    1a12:	11 96       	adiw	r26, 0x01	; 1
    1a14:	b8 a3       	lds	r27, 0x58
    1a16:	af 8f       	std	Y+31, r26	; 0x1f
				else
					{
						tempint1=0;
					}
				DATAlist[0x3d]=tempint1/256;
				DATAlist[0x3e]=tempint1-(DATAlist[0x3d]*256);
    1a18:	e1 eb       	ldi	r30, 0xB1	; 177
    1a1a:	f4 e0       	ldi	r31, 0x04	; 4
    1a1c:	31 96       	adiw	r30, 0x01	; 1
    1a1e:	f9 a7       	lds	r31, 0x79
    1a20:	e8 a7       	lds	r30, 0x78
LCD0loop++;
if(LCD0loop>8)LCD0loop=1;
switch(LCD0loop)
  {   case 1://TDS
	        //------水滴-----
			   LCDNUM[12]|=0x10;
    1a22:	0f 2e       	mov	r0, r31
    1a24:	f0 e2       	ldi	r31, 0x20	; 32
    1a26:	cf 2e       	mov	r12, r31
    1a28:	f4 e0       	ldi	r31, 0x04	; 4
    1a2a:	df 2e       	mov	r13, r31
    1a2c:	f0 2d       	mov	r31, r0
			   LCDNUM[11]&=0xef;
    1a2e:	16 01       	movw	r2, r12
    1a30:	08 94       	sec
    1a32:	21 08       	sbc	r2, r1
    1a34:	31 08       	sbc	r3, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a36:	f4 e6       	ldi	r31, 0x64	; 100
    1a38:	fa 95       	dec	r31
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <main+0x772>
    1a3c:	00 c0       	rjmp	.+0      	; 0x1a3e <main+0x778>
  tdscount=10;//TDS检测

while(1)
    {
	 _delay_us(302);
     loopnum++;
    1a3e:	80 91 f0 03 	lds	r24, 0x03F0
    1a42:	90 91 f1 03 	lds	r25, 0x03F1
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	90 93 f1 03 	sts	0x03F1, r25
    1a4c:	80 93 f0 03 	sts	0x03F0, r24
	 if(loopnum>760)//50000---1000
    1a50:	22 e0       	ldi	r18, 0x02	; 2
    1a52:	89 3f       	cpi	r24, 0xF9	; 249
    1a54:	92 07       	cpc	r25, r18
    1a56:	78 f3       	brcs	.-34     	; 0x1a36 <main+0x770>
	  {loopnum=0;
    1a58:	10 92 f1 03 	sts	0x03F1, r1
    1a5c:	10 92 f0 03 	sts	0x03F0, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a60:	87 e8       	ldi	r24, 0x87	; 135
    1a62:	93 e1       	ldi	r25, 0x13	; 19
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <main+0x79e>
    1a68:	00 c0       	rjmp	.+0      	; 0x1a6a <main+0x7a4>
    1a6a:	00 00       	nop
		_delay_ms(20);

	//------------------保存下发的数据-----------------------------
		if(savebit!=0)
    1a6c:	80 91 e3 03 	lds	r24, 0x03E3
    1a70:	88 23       	and	r24, r24
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <main+0x7b0>
    1a74:	64 c0       	rjmp	.+200    	; 0x1b3e <main+0x878>
			{
				if((savebit&0x01)==0x01)//保存冲洗时间
    1a76:	80 ff       	sbrs	r24, 0
    1a78:	11 c0       	rjmp	.+34     	; 0x1a9c <main+0x7d6>
					{
						EEPROM_write(100,timezhishui);//保存
    1a7a:	84 e6       	ldi	r24, 0x64	; 100
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	60 91 34 04 	lds	r22, 0x0434
    1a82:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(113,timeflush);//保存
    1a86:	81 e7       	ldi	r24, 0x71	; 113
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	60 91 72 04 	lds	r22, 0x0472
    1a8e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						savebit&=0xfe;
    1a92:	80 91 e3 03 	lds	r24, 0x03E3
    1a96:	8e 7f       	andi	r24, 0xFE	; 254
    1a98:	80 93 e3 03 	sts	0x03E3, r24
					}
				if((savebit&0x08)==0x08)//保存额定滤芯值
    1a9c:	80 91 e3 03 	lds	r24, 0x03E3
    1aa0:	83 ff       	sbrs	r24, 3
    1aa2:	29 c0       	rjmp	.+82     	; 0x1af6 <main+0x830>
					{
						EEPROM_write(78,DATAlist[0x1a]);
    1aa4:	8e e4       	ldi	r24, 0x4E	; 78
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	60 91 8e 04 	lds	r22, 0x048E
    1aac:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(79,DATAlist[0x1b]);
    1ab0:	8f e4       	ldi	r24, 0x4F	; 79
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	60 91 8f 04 	lds	r22, 0x048F
    1ab8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(80,DATAlist[0x1c]);
    1abc:	80 e5       	ldi	r24, 0x50	; 80
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	60 91 90 04 	lds	r22, 0x0490
    1ac4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(81,DATAlist[0x1d]);
    1ac8:	81 e5       	ldi	r24, 0x51	; 81
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	60 91 91 04 	lds	r22, 0x0491
    1ad0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(82,DATAlist[0x1e]);
    1ad4:	82 e5       	ldi	r24, 0x52	; 82
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	60 91 92 04 	lds	r22, 0x0492
    1adc:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(83,DATAlist[0x1f]);
    1ae0:	83 e5       	ldi	r24, 0x53	; 83
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	60 91 93 04 	lds	r22, 0x0493
    1ae8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						savebit&=0xf7;
    1aec:	80 91 e3 03 	lds	r24, 0x03E3
    1af0:	87 7f       	andi	r24, 0xF7	; 247
    1af2:	80 93 e3 03 	sts	0x03E3, r24
					}
				if((savebit&0x80)==0x80)//保存复位滤芯值
    1af6:	80 91 e3 03 	lds	r24, 0x03E3
    1afa:	88 23       	and	r24, r24
    1afc:	d4 f4       	brge	.+52     	; 0x1b32 <main+0x86c>
    1afe:	85 01       	movw	r16, r10
    1b00:	a6 e5       	ldi	r26, 0x56	; 86
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	bb 83       	std	Y+3, r27	; 0x03
    1b06:	aa 83       	std	Y+2, r26	; 0x02
					{
						for(i=0;i<12;i++)  //将数据初始化
						{
							EEPROM_write((86+i),DATAlist[0x24+i]);
    1b08:	f8 01       	movw	r30, r16
    1b0a:	61 91       	ld	r22, Z+
    1b0c:	8f 01       	movw	r16, r30
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	9b 81       	ldd	r25, Y+3	; 0x03
    1b12:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
    1b16:	2a 81       	ldd	r18, Y+2	; 0x02
    1b18:	3b 81       	ldd	r19, Y+3	; 0x03
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	3b 83       	std	Y+3, r19	; 0x03
    1b20:	2a 83       	std	Y+2, r18	; 0x02
						EEPROM_write(83,DATAlist[0x1f]);
						savebit&=0xf7;
					}
				if((savebit&0x80)==0x80)//保存复位滤芯值
					{
						for(i=0;i<12;i++)  //将数据初始化
    1b22:	22 36       	cpi	r18, 0x62	; 98
    1b24:	31 05       	cpc	r19, r1
    1b26:	81 f7       	brne	.-32     	; 0x1b08 <main+0x842>
						{
							EEPROM_write((86+i),DATAlist[0x24+i]);
						}
						savebit&=0x7f;
    1b28:	80 91 e3 03 	lds	r24, 0x03E3
    1b2c:	8f 77       	andi	r24, 0x7F	; 127
    1b2e:	80 93 e3 03 	sts	0x03E3, r24
    1b32:	8f e4       	ldi	r24, 0x4F	; 79
    1b34:	93 ec       	ldi	r25, 0xC3	; 195
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <main+0x870>
    1b3a:	00 c0       	rjmp	.+0      	; 0x1b3c <main+0x876>
    1b3c:	00 00       	nop
					}
				//send0_reply(0);
				_delay_ms(200);
			}
			if((savebit2&0x01)==0x01)
    1b3e:	80 91 e2 03 	lds	r24, 0x03E2
    1b42:	80 ff       	sbrs	r24, 0
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <main+0x892>
				{
					//send0_reply(0);
					savebit2&=0xfe;
    1b46:	8e 7f       	andi	r24, 0xFE	; 254
    1b48:	80 93 e2 03 	sts	0x03E2, r24
    1b4c:	af e4       	ldi	r26, 0x4F	; 79
    1b4e:	b3 ec       	ldi	r27, 0xC3	; 195
    1b50:	11 97       	sbiw	r26, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <main+0x88a>
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <main+0x890>
    1b56:	00 00       	nop
					_delay_ms(200);
				}

		

			if((dealbyte&0x10)==0x10)//设置剩余时间
    1b58:	80 91 e0 03 	lds	r24, 0x03E0
    1b5c:	84 ff       	sbrs	r24, 4
    1b5e:	b7 c0       	rjmp	.+366    	; 0x1cce <main+0xa08>
					{   EEPROM_write(115,DATAlist[0x5e]);
    1b60:	83 e7       	ldi	r24, 0x73	; 115
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	60 91 d2 04 	lds	r22, 0x04D2
    1b68:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(116,DATAlist[0x5f]);
    1b6c:	84 e7       	ldi	r24, 0x74	; 116
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	60 91 d3 04 	lds	r22, 0x04D3
    1b74:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						send_reply(0);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
						dealbyte&=0xef;
    1b7e:	80 91 e0 03 	lds	r24, 0x03E0
    1b82:	8f 7e       	andi	r24, 0xEF	; 239
    1b84:	80 93 e0 03 	sts	0x03E0, r24
						//------
						LCDNUM[0]=LCDNUM[0]&0x01;
    1b88:	80 91 14 04 	lds	r24, 0x0414
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	21 70       	andi	r18, 0x01	; 1
    1b90:	20 93 14 04 	sts	0x0414, r18
						LCDNUM[1]=LCDNUM[1]&0x01;
    1b94:	80 91 15 04 	lds	r24, 0x0415
    1b98:	81 70       	andi	r24, 0x01	; 1
    1b9a:	8a 83       	std	Y+2, r24	; 0x02
    1b9c:	80 93 15 04 	sts	0x0415, r24
						LCDNUM[2]=LCDNUM[2]&0x01;
    1ba0:	80 91 16 04 	lds	r24, 0x0416
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	8a 87       	std	Y+10, r24	; 0x0a
    1ba8:	80 93 16 04 	sts	0x0416, r24
						LCDNUM[3]=LCDNUM[3]&0x01;
    1bac:	80 91 17 04 	lds	r24, 0x0417
    1bb0:	18 2f       	mov	r17, r24
    1bb2:	11 70       	andi	r17, 0x01	; 1
    1bb4:	10 93 17 04 	sts	0x0417, r17
						LCDNUM[4]=LCDNUM[4]&0x01;
    1bb8:	80 91 18 04 	lds	r24, 0x0418
    1bbc:	08 2f       	mov	r16, r24
    1bbe:	01 70       	andi	r16, 0x01	; 1
						tempint1=DATAlist[0x5e]*256+DATAlist[0x5f];
    1bc0:	90 90 d2 04 	lds	r9, 0x04D2
    1bc4:	88 24       	eor	r8, r8
    1bc6:	80 91 d3 04 	lds	r24, 0x04D3
    1bca:	f4 01       	movw	r30, r8
    1bcc:	e8 0f       	add	r30, r24
    1bce:	f1 1d       	adc	r31, r1
						temp=tempint1/10000;
    1bd0:	cf 01       	movw	r24, r30
    1bd2:	60 e1       	ldi	r22, 0x10	; 16
    1bd4:	77 e2       	ldi	r23, 0x27	; 39
    1bd6:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
						if(temp>0)LCDNUM[0]=(LCDNUM[0]&0x01)|SMGL[temp];
    1bda:	66 23       	and	r22, r22
    1bdc:	49 f0       	breq	.+18     	; 0x1bf0 <main+0x92a>
    1bde:	86 ec       	ldi	r24, 0xC6	; 198
    1be0:	93 e0       	ldi	r25, 0x03	; 3
    1be2:	86 0f       	add	r24, r22
    1be4:	91 1d       	adc	r25, r1
    1be6:	dc 01       	movw	r26, r24
    1be8:	8c 91       	ld	r24, X
    1bea:	82 2b       	or	r24, r18
    1bec:	80 93 14 04 	sts	0x0414, r24
						tempint1=tempint1-(temp*10000);
    1bf0:	86 2f       	mov	r24, r22
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	20 ef       	ldi	r18, 0xF0	; 240
    1bf6:	38 ed       	ldi	r19, 0xD8	; 216
    1bf8:	82 9f       	mul	r24, r18
    1bfa:	a0 01       	movw	r20, r0
    1bfc:	83 9f       	mul	r24, r19
    1bfe:	50 0d       	add	r21, r0
    1c00:	92 9f       	mul	r25, r18
    1c02:	50 0d       	add	r21, r0
    1c04:	11 24       	eor	r1, r1
    1c06:	e4 0f       	add	r30, r20
    1c08:	f5 1f       	adc	r31, r21
						temp=tempint1/1000;
    1c0a:	cf 01       	movw	r24, r30
    1c0c:	68 ee       	ldi	r22, 0xE8	; 232
    1c0e:	73 e0       	ldi	r23, 0x03	; 3
    1c10:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
						if(temp>0)LCDNUM[1]=(LCDNUM[1]&0x01)|SMGL[temp];
    1c14:	66 23       	and	r22, r22
    1c16:	51 f0       	breq	.+20     	; 0x1c2c <main+0x966>
    1c18:	86 ec       	ldi	r24, 0xC6	; 198
    1c1a:	93 e0       	ldi	r25, 0x03	; 3
    1c1c:	86 0f       	add	r24, r22
    1c1e:	91 1d       	adc	r25, r1
    1c20:	dc 01       	movw	r26, r24
    1c22:	8c 91       	ld	r24, X
    1c24:	2a 81       	ldd	r18, Y+2	; 0x02
    1c26:	82 2b       	or	r24, r18
    1c28:	80 93 15 04 	sts	0x0415, r24
						tempint1=tempint1-(temp*1000);
    1c2c:	86 2f       	mov	r24, r22
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	28 e1       	ldi	r18, 0x18	; 24
    1c32:	3c ef       	ldi	r19, 0xFC	; 252
    1c34:	82 9f       	mul	r24, r18
    1c36:	a0 01       	movw	r20, r0
    1c38:	83 9f       	mul	r24, r19
    1c3a:	50 0d       	add	r21, r0
    1c3c:	92 9f       	mul	r25, r18
    1c3e:	50 0d       	add	r21, r0
    1c40:	11 24       	eor	r1, r1
    1c42:	e4 0f       	add	r30, r20
    1c44:	f5 1f       	adc	r31, r21
						temp=tempint1/100;
    1c46:	cf 01       	movw	r24, r30
    1c48:	64 e6       	ldi	r22, 0x64	; 100
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
						if(temp>0)LCDNUM[2]=(LCDNUM[2]&0x01)|SMGL[temp];
    1c50:	66 23       	and	r22, r22
    1c52:	51 f0       	breq	.+20     	; 0x1c68 <main+0x9a2>
    1c54:	86 ec       	ldi	r24, 0xC6	; 198
    1c56:	93 e0       	ldi	r25, 0x03	; 3
    1c58:	86 0f       	add	r24, r22
    1c5a:	91 1d       	adc	r25, r1
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	8c 91       	ld	r24, X
    1c60:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c62:	82 2b       	or	r24, r18
    1c64:	80 93 16 04 	sts	0x0416, r24
						tempint1=tempint1-(temp*100);
    1c68:	86 2f       	mov	r24, r22
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	2c e9       	ldi	r18, 0x9C	; 156
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	82 9f       	mul	r24, r18
    1c72:	a0 01       	movw	r20, r0
    1c74:	83 9f       	mul	r24, r19
    1c76:	50 0d       	add	r21, r0
    1c78:	92 9f       	mul	r25, r18
    1c7a:	50 0d       	add	r21, r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	e4 0f       	add	r30, r20
    1c80:	f5 1f       	adc	r31, r21
						temp=tempint1/10;
    1c82:	cf 01       	movw	r24, r30
    1c84:	6a e0       	ldi	r22, 0x0A	; 10
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
						if(temp>0)LCDNUM[3]=(LCDNUM[3]&0x01)|SMGL[temp];
    1c8c:	66 23       	and	r22, r22
    1c8e:	49 f0       	breq	.+18     	; 0x1ca2 <main+0x9dc>
    1c90:	86 ec       	ldi	r24, 0xC6	; 198
    1c92:	93 e0       	ldi	r25, 0x03	; 3
    1c94:	86 0f       	add	r24, r22
    1c96:	91 1d       	adc	r25, r1
    1c98:	dc 01       	movw	r26, r24
    1c9a:	8c 91       	ld	r24, X
    1c9c:	81 2b       	or	r24, r17
    1c9e:	80 93 17 04 	sts	0x0417, r24
						tempint1=tempint1-(temp*10);
    1ca2:	86 2f       	mov	r24, r22
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	9c 01       	movw	r18, r24
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	82 0f       	add	r24, r18
    1cb6:	93 1f       	adc	r25, r19
						temp=tempint1;
						LCDNUM[4]=(LCDNUM[4]&0x01)|SMGL[temp];
    1cb8:	be 2f       	mov	r27, r30
    1cba:	b8 1b       	sub	r27, r24
    1cbc:	26 ec       	ldi	r18, 0xC6	; 198
    1cbe:	33 e0       	ldi	r19, 0x03	; 3
    1cc0:	2b 0f       	add	r18, r27
    1cc2:	31 1d       	adc	r19, r1
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 2b       	or	r24, r16
    1cca:	80 93 18 04 	sts	0x0418, r24
		

//ONE----------------------------------------------------------------------------------
//----------更新显示内容------------
//----------------------------------------------------------------------------------
if(LCDmode==0)
    1cce:	ff 20       	and	r15, r15
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <main+0xa10>
    1cd2:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <main+0x1a7e>
    1cd6:	2f e7       	ldi	r18, 0x7F	; 127
    1cd8:	3a e1       	ldi	r19, 0x1A	; 26
    1cda:	46 e0       	ldi	r20, 0x06	; 6
    1cdc:	21 50       	subi	r18, 0x01	; 1
    1cde:	30 40       	sbci	r19, 0x00	; 0
    1ce0:	40 40       	sbci	r20, 0x00	; 0
    1ce2:	e1 f7       	brne	.-8      	; 0x1cdc <main+0xa16>
    1ce4:	00 c0       	rjmp	.+0      	; 0x1ce6 <main+0xa20>
    1ce6:	00 00       	nop
{
 _delay_ms(2000);

LCD0loop++;
    1ce8:	e3 94       	inc	r14
if(LCD0loop>8)LCD0loop=1;
    1cea:	38 e0       	ldi	r19, 0x08	; 8
    1cec:	3e 15       	cp	r19, r14
    1cee:	10 f1       	brcs	.+68     	; 0x1d34 <main+0xa6e>
switch(LCD0loop)
    1cf0:	44 e0       	ldi	r20, 0x04	; 4
    1cf2:	e4 16       	cp	r14, r20
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <main+0xa32>
    1cf6:	32 c2       	rjmp	.+1124   	; 0x215c <main+0xe96>
    1cf8:	4e 15       	cp	r20, r14
    1cfa:	60 f0       	brcs	.+24     	; 0x1d14 <main+0xa4e>
    1cfc:	52 e0       	ldi	r21, 0x02	; 2
    1cfe:	e5 16       	cp	r14, r21
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <main+0xa3e>
    1d02:	50 c1       	rjmp	.+672    	; 0x1fa4 <main+0xcde>
    1d04:	5e 15       	cp	r21, r14
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <main+0xa44>
    1d08:	08 c2       	rjmp	.+1040   	; 0x211a <main+0xe54>
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	e6 16       	cp	r14, r22
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <main+0xa4c>
    1d10:	23 c6       	rjmp	.+3142   	; 0x2958 <main+0x1692>
    1d12:	12 c0       	rjmp	.+36     	; 0x1d38 <main+0xa72>
    1d14:	76 e0       	ldi	r23, 0x06	; 6
    1d16:	e7 16       	cp	r14, r23
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <main+0xa56>
    1d1a:	09 c4       	rjmp	.+2066   	; 0x252e <main+0x1268>
    1d1c:	e7 16       	cp	r14, r23
    1d1e:	08 f4       	brcc	.+2      	; 0x1d22 <main+0xa5c>
    1d20:	b7 c2       	rjmp	.+1390   	; 0x2290 <main+0xfca>
    1d22:	87 e0       	ldi	r24, 0x07	; 7
    1d24:	e8 16       	cp	r14, r24
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <main+0xa64>
    1d28:	bc c4       	rjmp	.+2424   	; 0x26a2 <main+0x13dc>
    1d2a:	98 e0       	ldi	r25, 0x08	; 8
    1d2c:	e9 16       	cp	r14, r25
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <main+0xa6c>
    1d30:	13 c6       	rjmp	.+3110   	; 0x2958 <main+0x1692>
    1d32:	ce c4       	rjmp	.+2460   	; 0x26d0 <main+0x140a>
if(LCDmode==0)
{
 _delay_ms(2000);

LCD0loop++;
if(LCD0loop>8)LCD0loop=1;
    1d34:	ee 24       	eor	r14, r14
    1d36:	e3 94       	inc	r14
switch(LCD0loop)
  {   case 1://TDS
	        //------水滴-----
			   LCDNUM[12]|=0x10;
    1d38:	d6 01       	movw	r26, r12
    1d3a:	8c 91       	ld	r24, X
    1d3c:	80 61       	ori	r24, 0x10	; 16
    1d3e:	8c 93       	st	X, r24
			   LCDNUM[11]&=0xef;
    1d40:	f1 01       	movw	r30, r2
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 7e       	andi	r24, 0xEF	; 239
    1d46:	80 83       	st	Z, r24
			   LCDNUM[7]&=0xfe;
    1d48:	f6 01       	movw	r30, r12
    1d4a:	35 97       	sbiw	r30, 0x05	; 5
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8e 7f       	andi	r24, 0xFE	; 254
    1d50:	80 83       	st	Z, r24
			   LCDNUM[6]&=0xfe;
    1d52:	f6 01       	movw	r30, r12
    1d54:	36 97       	sbiw	r30, 0x06	; 6
    1d56:	80 81       	ld	r24, Z
    1d58:	8e 7f       	andi	r24, 0xFE	; 254
    1d5a:	80 83       	st	Z, r24
			   LCDNUM[15]&=0xef;
    1d5c:	13 96       	adiw	r26, 0x03	; 3
    1d5e:	8c 91       	ld	r24, X
    1d60:	13 97       	sbiw	r26, 0x03	; 3
    1d62:	8f 7e       	andi	r24, 0xEF	; 239
    1d64:	13 96       	adiw	r26, 0x03	; 3
    1d66:	8c 93       	st	X, r24
    1d68:	13 97       	sbiw	r26, 0x03	; 3
			   LCDNUM[16]&=0xef;
    1d6a:	14 96       	adiw	r26, 0x04	; 4
    1d6c:	8c 91       	ld	r24, X
    1d6e:	14 97       	sbiw	r26, 0x04	; 4
    1d70:	8f 7e       	andi	r24, 0xEF	; 239
    1d72:	14 96       	adiw	r26, 0x04	; 4
    1d74:	8c 93       	st	X, r24
		
			if(tdscount>0){ //TDS值，在制水的时候才检测
    1d76:	b9 a1       	lds	r27, 0x49
    1d78:	bb 23       	and	r27, r27
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <main+0xab8>
    1d7c:	ed c5       	rjmp	.+3034   	; 0x2958 <main+0x1692>
				tdscount--;
    1d7e:	b1 50       	subi	r27, 0x01	; 1
    1d80:	b9 a3       	lds	r27, 0x59
				PORTD&=~(1<<PD4);
    1d82:	94 98       	cbi	0x12, 4	; 18
				PORTD&=~(1<<PD5);
    1d84:	95 98       	cbi	0x12, 5	; 18
    1d86:	e7 ea       	ldi	r30, 0xA7	; 167
    1d88:	f1 e6       	ldi	r31, 0x61	; 97
    1d8a:	31 97       	sbiw	r30, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <main+0xac4>
    1d8e:	00 c0       	rjmp	.+0      	; 0x1d90 <main+0xaca>
    1d90:	00 00       	nop
				_delay_ms(100);
				ad_getdat(6);//TDS值
    1d92:	86 e0       	ldi	r24, 0x06	; 6
    1d94:	0e 94 b9 00 	call	0x172	; 0x172 <ad_getdat>
				ad_getdat(7);//TDS值  运算
    1d98:	87 e0       	ldi	r24, 0x07	; 7
    1d9a:	0e 94 b9 00 	call	0x172	; 0x172 <ad_getdat>
				PORTD|=(1<<PD4);
    1d9e:	94 9a       	sbi	0x12, 4	; 18
				PORTD|=(1<<PD5);
    1da0:	95 9a       	sbi	0x12, 5	; 18
				tempint1=DATAlist[0x41+12]*256+DATAlist[0x41+13];
    1da2:	f0 91 c1 04 	lds	r31, 0x04C1
    1da6:	fe ab       	sts	0x5e, r31
    1da8:	1d aa       	sts	0x9d, r17
    1daa:	80 91 c2 04 	lds	r24, 0x04C2
    1dae:	2d a9       	sts	0x4d, r18
    1db0:	3e a9       	sts	0x4e, r19
    1db2:	28 0f       	add	r18, r24
    1db4:	31 1d       	adc	r19, r1
				tempint1=(65535-tempint1)/100;  //16
    1db6:	c9 01       	movw	r24, r18
    1db8:	a0 e0       	ldi	r26, 0x00	; 0
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	2f ef       	ldi	r18, 0xFF	; 255
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	28 1b       	sub	r18, r24
    1dc6:	39 0b       	sbc	r19, r25
    1dc8:	4a 0b       	sbc	r20, r26
    1dca:	5b 0b       	sbc	r21, r27
    1dcc:	ca 01       	movw	r24, r20
    1dce:	b9 01       	movw	r22, r18
    1dd0:	24 e6       	ldi	r18, 0x64	; 100
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	0e 94 98 18 	call	0x3130	; 0x3130 <__divmodsi4>
    1ddc:	82 2f       	mov	r24, r18
    1dde:	93 2f       	mov	r25, r19
		tempint1=tempint1/2;
    1de0:	ac 01       	movw	r20, r24
    1de2:	56 95       	lsr	r21
    1de4:	47 95       	ror	r20
    1de6:	5b 83       	std	Y+3, r21	; 0x03
    1de8:	4a 83       	std	Y+2, r20	; 0x02
				DATAlist[0x41+12]=tempint1/256;
    1dea:	50 93 c1 04 	sts	0x04C1, r21
				DATAlist[0x41+13]=tempint1-(DATAlist[0x41+12]*256);
    1dee:	1a 81       	ldd	r17, Y+2	; 0x02
    1df0:	40 93 c2 04 	sts	0x04C2, r20
				tempint2=DATAlist[0x41+14]*256+DATAlist[0x41+15];
    1df4:	50 91 c3 04 	lds	r21, 0x04C3
    1df8:	58 af       	sts	0x78, r21
    1dfa:	1f aa       	sts	0x9f, r17
    1dfc:	80 91 c4 04 	lds	r24, 0x04C4
    1e00:	6f a9       	sts	0x4f, r22
    1e02:	78 ad       	sts	0x68, r23
    1e04:	68 0f       	add	r22, r24
    1e06:	71 1d       	adc	r23, r1
				tempint2=(65535-tempint2)/100;
    1e08:	cb 01       	movw	r24, r22
    1e0a:	a0 e0       	ldi	r26, 0x00	; 0
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	2f ef       	ldi	r18, 0xFF	; 255
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	28 1b       	sub	r18, r24
    1e18:	39 0b       	sbc	r19, r25
    1e1a:	4a 0b       	sbc	r20, r26
    1e1c:	5b 0b       	sbc	r21, r27
    1e1e:	ca 01       	movw	r24, r20
    1e20:	b9 01       	movw	r22, r18
    1e22:	24 e6       	ldi	r18, 0x64	; 100
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	0e 94 98 18 	call	0x3130	; 0x3130 <__divmodsi4>
    1e2e:	82 2f       	mov	r24, r18
    1e30:	93 2f       	mov	r25, r19
		tempint2=tempint2/2;
    1e32:	9c 01       	movw	r18, r24
    1e34:	36 95       	lsr	r19
    1e36:	27 95       	ror	r18
				DATAlist[0x41+14]=tempint2/256;
    1e38:	30 93 c3 04 	sts	0x04C3, r19
				DATAlist[0x41+15]=tempint2-(DATAlist[0x41+14]*256);
    1e3c:	02 2f       	mov	r16, r18
    1e3e:	20 93 c4 04 	sts	0x04C4, r18
				if(((bkhottemp!=DATAlist[0x44])||(bkcoldtemp!=DATAlist[0x46])||(tds1num!=tempint1)||(tds2num!=tempint2))&&(needreturn==0))//值发生变化，上传
    1e42:	40 91 b8 04 	lds	r20, 0x04B8
    1e46:	5a a9       	sts	0x4a, r21
    1e48:	54 17       	cp	r21, r20
    1e4a:	99 f4       	brne	.+38     	; 0x1e72 <main+0xbac>
    1e4c:	50 91 ba 04 	lds	r21, 0x04BA
    1e50:	68 a9       	sts	0x48, r22
    1e52:	56 17       	cp	r21, r22
    1e54:	71 f4       	brne	.+28     	; 0x1e72 <main+0xbac>
    1e56:	7b a9       	sts	0x4b, r23
    1e58:	87 2f       	mov	r24, r23
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e5e:	bb 81       	ldd	r27, Y+3	; 0x03
    1e60:	8a 17       	cp	r24, r26
    1e62:	9b 07       	cpc	r25, r27
    1e64:	31 f4       	brne	.+12     	; 0x1e72 <main+0xbac>
    1e66:	bc a9       	sts	0x4c, r27
    1e68:	8b 2f       	mov	r24, r27
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	82 17       	cp	r24, r18
    1e6e:	93 07       	cpc	r25, r19
    1e70:	69 f0       	breq	.+26     	; 0x1e8c <main+0xbc6>
    1e72:	80 91 dd 03 	lds	r24, 0x03DD
    1e76:	88 23       	and	r24, r24
    1e78:	51 f4       	brne	.+20     	; 0x1e8e <main+0xbc8>
					{	//                                                                                             消费记录已经发送完毕
						bkhottemp=DATAlist[0x44];
						bkcoldtemp=DATAlist[0x46];
    1e7a:	e0 91 ba 04 	lds	r30, 0x04BA
    1e7e:	e8 ab       	sts	0x58, r30
						tds1num=tempint1;
						tds2num=tempint2;
    1e80:	0c ab       	sts	0x5c, r16
				DATAlist[0x41+15]=tempint2-(DATAlist[0x41+14]*256);
				if(((bkhottemp!=DATAlist[0x44])||(bkcoldtemp!=DATAlist[0x46])||(tds1num!=tempint1)||(tds2num!=tempint2))&&(needreturn==0))//值发生变化，上传
					{	//                                                                                             消费记录已经发送完毕
						bkhottemp=DATAlist[0x44];
						bkcoldtemp=DATAlist[0x46];
						tds1num=tempint1;
    1e82:	1b ab       	sts	0x5b, r17
		tempint2=tempint2/2;
				DATAlist[0x41+14]=tempint2/256;
				DATAlist[0x41+15]=tempint2-(DATAlist[0x41+14]*256);
				if(((bkhottemp!=DATAlist[0x44])||(bkcoldtemp!=DATAlist[0x46])||(tds1num!=tempint1)||(tds2num!=tempint2))&&(needreturn==0))//值发生变化，上传
					{	//                                                                                             消费记录已经发送完毕
						bkhottemp=DATAlist[0x44];
    1e84:	4a ab       	sts	0x5a, r20
						bkcoldtemp=DATAlist[0x46];
						tds1num=tempint1;
						tds2num=tempint2;
						//if(resetcount<2)send_tds_temp_speed();
						sendtime=1;//?
    1e86:	f1 e0       	ldi	r31, 0x01	; 1
    1e88:	fd 87       	std	Y+13, r31	; 0x0d
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <main+0xbc8>
				tempint2=DATAlist[0x41+14]*256+DATAlist[0x41+15];
				tempint2=(65535-tempint2)/100;
		tempint2=tempint2/2;
				DATAlist[0x41+14]=tempint2/256;
				DATAlist[0x41+15]=tempint2-(DATAlist[0x41+14]*256);
				if(((bkhottemp!=DATAlist[0x44])||(bkcoldtemp!=DATAlist[0x46])||(tds1num!=tempint1)||(tds2num!=tempint2))&&(needreturn==0))//值发生变化，上传
    1e8c:	58 ab       	sts	0x58, r21
						//if(resetcount<2)send_tds_temp_speed();
						sendtime=1;//?
					}
			//TDS值
				LCDNUM[10]|=0x10;//
				LCDNUM[17]=0x10;
    1e8e:	80 e1       	ldi	r24, 0x10	; 16
    1e90:	80 93 25 04 	sts	0x0425, r24
				LCDNUM[13]&=0x10;
    1e94:	80 91 21 04 	lds	r24, 0x0421
    1e98:	80 71       	andi	r24, 0x10	; 16
    1e9a:	80 93 21 04 	sts	0x0421, r24
 
			   temp=tempint1/100;
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea2:	64 e6       	ldi	r22, 0x64	; 100
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
			   if(temp>0)
    1eaa:	66 23       	and	r22, r22
    1eac:	71 f0       	breq	.+28     	; 0x1eca <main+0xc04>
			      {
					  LCDNUM[16]=(LCDNUM[16]&0x10)|SMG[temp];       //高4位
    1eae:	80 ed       	ldi	r24, 0xD0	; 208
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	e6 0f       	add	r30, r22
    1eb6:	f1 1d       	adc	r31, r1
    1eb8:	80 91 24 04 	lds	r24, 0x0424
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	90 71       	andi	r25, 0x10	; 16
    1ec0:	80 81       	ld	r24, Z
    1ec2:	89 2b       	or	r24, r25
    1ec4:	80 93 24 04 	sts	0x0424, r24
    1ec8:	05 c0       	rjmp	.+10     	; 0x1ed4 <main+0xc0e>
					 // LCDNUM[10]=(LCDNUM[10]&0x8F)|((SMG[temp]&0x0f)<<4);//低4位
				  }
				else
				  {
					  LCDNUM[16]&=0x10;
    1eca:	80 91 24 04 	lds	r24, 0x0424
    1ece:	80 71       	andi	r24, 0x10	; 16
    1ed0:	80 93 24 04 	sts	0x0424, r24
				  }
				temp1=tempint1-(100*temp);//取后两位
    1ed4:	8c e9       	ldi	r24, 0x9C	; 156
    1ed6:	68 9f       	mul	r22, r24
    1ed8:	80 2d       	mov	r24, r0
    1eda:	11 24       	eor	r1, r1
    1edc:	a8 2f       	mov	r26, r24
    1ede:	a1 0f       	add	r26, r17
				temp=temp1/10;
    1ee0:	8a 2f       	mov	r24, r26
    1ee2:	6a e0       	ldi	r22, 0x0A	; 10
    1ee4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__udivmodqi4>
    1ee8:	68 2f       	mov	r22, r24
				 LCDNUM[15]=(LCDNUM[15]&0x10)|SMG[temp];
    1eea:	40 ed       	ldi	r20, 0xD0	; 208
    1eec:	53 e0       	ldi	r21, 0x03	; 3
    1eee:	fa 01       	movw	r30, r20
    1ef0:	e8 0f       	add	r30, r24
    1ef2:	f1 1d       	adc	r31, r1
    1ef4:	80 91 23 04 	lds	r24, 0x0423
    1ef8:	98 2f       	mov	r25, r24
    1efa:	90 71       	andi	r25, 0x10	; 16
    1efc:	80 81       	ld	r24, Z
    1efe:	89 2b       	or	r24, r25
    1f00:	80 93 23 04 	sts	0x0423, r24
				temp=temp1-(temp*10);
    1f04:	86 2f       	mov	r24, r22
    1f06:	88 0f       	add	r24, r24
    1f08:	98 2f       	mov	r25, r24
    1f0a:	99 0f       	add	r25, r25
    1f0c:	99 0f       	add	r25, r25
    1f0e:	89 0f       	add	r24, r25
				 LCDNUM[14]=(LCDNUM[14]&0x10)|SMG[temp];
    1f10:	e3 e2       	ldi	r30, 0x23	; 35
    1f12:	f4 e0       	ldi	r31, 0x04	; 4
					  LCDNUM[16]&=0x10;
				  }
				temp1=tempint1-(100*temp);//取后两位
				temp=temp1/10;
				 LCDNUM[15]=(LCDNUM[15]&0x10)|SMG[temp];
				temp=temp1-(temp*10);
    1f14:	a8 1b       	sub	r26, r24
				 LCDNUM[14]=(LCDNUM[14]&0x10)|SMG[temp];
    1f16:	4a 0f       	add	r20, r26
    1f18:	51 1d       	adc	r21, r1
    1f1a:	82 91       	ld	r24, -Z
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	90 71       	andi	r25, 0x10	; 16
    1f20:	da 01       	movw	r26, r20
    1f22:	8c 91       	ld	r24, X
    1f24:	89 2b       	or	r24, r25
    1f26:	80 83       	st	Z, r24
				
			//纯水-----
				 temp=tempint2/100;
    1f28:	c9 01       	movw	r24, r18
    1f2a:	64 e6       	ldi	r22, 0x64	; 100
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
				 if(temp>0)
    1f32:	66 23       	and	r22, r22
    1f34:	69 f0       	breq	.+26     	; 0x1f50 <main+0xc8a>
				 {
					   LCDNUM[12]=(LCDNUM[12]&0x10)|SMG[temp];
    1f36:	80 ed       	ldi	r24, 0xD0	; 208
    1f38:	93 e0       	ldi	r25, 0x03	; 3
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e6 0f       	add	r30, r22
    1f3e:	f1 1d       	adc	r31, r1
    1f40:	d6 01       	movw	r26, r12
    1f42:	8c 91       	ld	r24, X
    1f44:	98 2f       	mov	r25, r24
    1f46:	90 71       	andi	r25, 0x10	; 16
    1f48:	80 81       	ld	r24, Z
    1f4a:	89 2b       	or	r24, r25
    1f4c:	8c 93       	st	X, r24
    1f4e:	04 c0       	rjmp	.+8      	; 0x1f58 <main+0xc92>
				 }
				 else
				 {
					 LCDNUM[12]&=0x10;
    1f50:	f6 01       	movw	r30, r12
    1f52:	80 81       	ld	r24, Z
    1f54:	80 71       	andi	r24, 0x10	; 16
    1f56:	80 83       	st	Z, r24
				 }
				 temp1=tempint2-(100*temp);//取后两位
    1f58:	8c e9       	ldi	r24, 0x9C	; 156
    1f5a:	68 9f       	mul	r22, r24
    1f5c:	80 2d       	mov	r24, r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	38 2f       	mov	r19, r24
    1f62:	30 0f       	add	r19, r16
				 temp=temp1/10;
    1f64:	83 2f       	mov	r24, r19
    1f66:	6a e0       	ldi	r22, 0x0A	; 10
    1f68:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__udivmodqi4>
    1f6c:	28 2f       	mov	r18, r24
				  LCDNUM[11]=(LCDNUM[11]&0x10)|SMG[temp];
    1f6e:	e0 ed       	ldi	r30, 0xD0	; 208
    1f70:	f3 e0       	ldi	r31, 0x03	; 3
    1f72:	df 01       	movw	r26, r30
    1f74:	a8 0f       	add	r26, r24
    1f76:	b1 1d       	adc	r27, r1
    1f78:	80 91 1f 04 	lds	r24, 0x041F
    1f7c:	98 2f       	mov	r25, r24
    1f7e:	90 71       	andi	r25, 0x10	; 16
    1f80:	8c 91       	ld	r24, X
    1f82:	89 2b       	or	r24, r25
    1f84:	80 93 1f 04 	sts	0x041F, r24
				 temp=temp1-(temp*10);
    1f88:	82 2f       	mov	r24, r18
    1f8a:	88 0f       	add	r24, r24
    1f8c:	98 2f       	mov	r25, r24
    1f8e:	99 0f       	add	r25, r25
    1f90:	99 0f       	add	r25, r25
    1f92:	89 0f       	add	r24, r25
    1f94:	38 1b       	sub	r19, r24
				  LCDNUM[10]=(LCDNUM[10]&0x10)|SMG[temp];
    1f96:	e3 0f       	add	r30, r19
    1f98:	f1 1d       	adc	r31, r1
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 61       	ori	r24, 0x10	; 16
    1f9e:	80 93 1e 04 	sts	0x041E, r24
    1fa2:	da c4       	rjmp	.+2484   	; 0x2958 <main+0x1692>
			}			 					 
			 break;
		case 2://设置wifi？
			   //------水滴-----
			   LCDNUM[12]&=0xef;
    1fa4:	d6 01       	movw	r26, r12
    1fa6:	8c 91       	ld	r24, X
    1fa8:	8f 7e       	andi	r24, 0xEF	; 239
    1faa:	8c 93       	st	X, r24
			   LCDNUM[11]|=0x10;
    1fac:	f1 01       	movw	r30, r2
    1fae:	80 81       	ld	r24, Z
    1fb0:	80 61       	ori	r24, 0x10	; 16
    1fb2:	80 83       	st	Z, r24
			   LCDNUM[7]&=0xfe;
    1fb4:	f6 01       	movw	r30, r12
    1fb6:	35 97       	sbiw	r30, 0x05	; 5
    1fb8:	80 81       	ld	r24, Z
    1fba:	8e 7f       	andi	r24, 0xFE	; 254
    1fbc:	80 83       	st	Z, r24
			   LCDNUM[6]&=0xfe;
    1fbe:	f6 01       	movw	r30, r12
    1fc0:	36 97       	sbiw	r30, 0x06	; 6
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8e 7f       	andi	r24, 0xFE	; 254
    1fc6:	80 83       	st	Z, r24
			   LCDNUM[15]&=0xef;
    1fc8:	13 96       	adiw	r26, 0x03	; 3
    1fca:	8c 91       	ld	r24, X
    1fcc:	13 97       	sbiw	r26, 0x03	; 3
    1fce:	8f 7e       	andi	r24, 0xEF	; 239
    1fd0:	13 96       	adiw	r26, 0x03	; 3
    1fd2:	8c 93       	st	X, r24
    1fd4:	13 97       	sbiw	r26, 0x03	; 3
			   LCDNUM[16]&=0xef;
    1fd6:	14 96       	adiw	r26, 0x04	; 4
    1fd8:	8c 91       	ld	r24, X
    1fda:	14 97       	sbiw	r26, 0x04	; 4
    1fdc:	8f 7e       	andi	r24, 0xEF	; 239
    1fde:	14 96       	adiw	r26, 0x04	; 4
    1fe0:	8c 93       	st	X, r24
			   //---------
			
			sendtime++;
    1fe2:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fe4:	bf 5f       	subi	r27, 0xFF	; 255
    1fe6:	bd 87       	std	Y+13, r27	; 0x0d
			if(sendtime>12) //8-12  18-32  
    1fe8:	bd 30       	cpi	r27, 0x0D	; 13
    1fea:	a8 f5       	brcc	.+106    	; 0x2056 <main+0xd90>
				{sendtime=0;
				}				
			if(sendtime==2)
    1fec:	b2 30       	cpi	r27, 0x02	; 2
    1fee:	19 f5       	brne	.+70     	; 0x2036 <main+0xd70>
				{

					//if(resetcount<2) send_tds_temp_speed();//如果在这里发送，则在不同那里不必再发送
					// _delay_ms(200);
					if(resetcount<2)
    1ff0:	e9 85       	ldd	r30, Y+9	; 0x09
    1ff2:	e2 30       	cpi	r30, 0x02	; 2
    1ff4:	98 f4       	brcc	.+38     	; 0x201c <main+0xd56>
						{
							if((sendbit&0x01)==0x01)//01
    1ff6:	80 91 da 03 	lds	r24, 0x03DA
    1ffa:	80 ff       	sbrs	r24, 0
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <main+0xd3e>
								{
									send_status();
    1ffe:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
    2002:	0c c0       	rjmp	.+24     	; 0x201c <main+0xd56>
								}
							else if((sendbit&0x04)==0x04)//03
    2004:	82 ff       	sbrs	r24, 2
    2006:	03 c0       	rjmp	.+6      	; 0x200e <main+0xd48>
								{
									send_filter();
    2008:	0e 94 86 05 	call	0xb0c	; 0xb0c <send_filter>
    200c:	07 c0       	rjmp	.+14     	; 0x201c <main+0xd56>
								}
							else if((sendbit&0x08)==0x08)//04
    200e:	83 ff       	sbrs	r24, 3
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <main+0xd52>
								{
									send_error();
    2012:	0e 94 27 05 	call	0xa4e	; 0xa4e <send_error>
    2016:	02 c0       	rjmp	.+4      	; 0x201c <main+0xd56>
								}
							else
								{
									send_tds_temp_speed();
    2018:	0e 94 10 06 	call	0xc20	; 0xc20 <send_tds_temp_speed>
    201c:	8f e4       	ldi	r24, 0x4F	; 79
    201e:	93 ec       	ldi	r25, 0xC3	; 195
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <main+0xd5a>
    2024:	00 c0       	rjmp	.+0      	; 0x2026 <main+0xd60>
    2026:	00 00       	nop
    2028:	a3 ec       	ldi	r26, 0xC3	; 195
    202a:	b9 e0       	ldi	r27, 0x09	; 9
    202c:	11 97       	sbiw	r26, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <main+0xd66>
    2030:	00 c0       	rjmp	.+0      	; 0x2032 <main+0xd6c>
    2032:	00 00       	nop
    2034:	37 c0       	rjmp	.+110    	; 0x20a4 <main+0xdde>
								}
						}
					_delay_ms(200);
				}
			if(sendtime==4)
    2036:	bd 85       	ldd	r27, Y+13	; 0x0d
    2038:	b4 30       	cpi	r27, 0x04	; 4
    203a:	71 f4       	brne	.+28     	; 0x2058 <main+0xd92>
    203c:	ef e4       	ldi	r30, 0x4F	; 79
    203e:	f3 ec       	ldi	r31, 0xC3	; 195
    2040:	31 97       	sbiw	r30, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <main+0xd7a>
    2044:	00 c0       	rjmp	.+0      	; 0x2046 <main+0xd80>
    2046:	00 00       	nop
    2048:	83 ec       	ldi	r24, 0xC3	; 195
    204a:	99 e0       	ldi	r25, 0x09	; 9
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <main+0xd86>
    2050:	00 c0       	rjmp	.+0      	; 0x2052 <main+0xd8c>
    2052:	00 00       	nop
    2054:	27 c0       	rjmp	.+78     	; 0x20a4 <main+0xdde>
			   LCDNUM[16]&=0xef;
			   //---------
			
			sendtime++;
			if(sendtime>12) //8-12  18-32  
				{sendtime=0;
    2056:	1d 86       	std	Y+13, r1	; 0x0d
    2058:	a3 ec       	ldi	r26, 0xC3	; 195
    205a:	b9 e0       	ldi	r27, 0x09	; 9
    205c:	11 97       	sbiw	r26, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <main+0xd96>
    2060:	00 c0       	rjmp	.+0      	; 0x2062 <main+0xd9c>
    2062:	00 00       	nop
				 {
					 _delay_ms(200);
					// send_status();
				 }			 
			_delay_ms(10);
			if(sendtime==8)
    2064:	bd 85       	ldd	r27, Y+13	; 0x0d
    2066:	b8 30       	cpi	r27, 0x08	; 8
    2068:	e9 f4       	brne	.+58     	; 0x20a4 <main+0xdde>
				{
					if(((fastatus&0x08)==0x08)&&(needreturn==0)&&(resetcount<2))//有置位，记录发送完毕
    206a:	80 91 f2 02 	lds	r24, 0x02F2
    206e:	83 ff       	sbrs	r24, 3
    2070:	19 c0       	rjmp	.+50     	; 0x20a4 <main+0xdde>
    2072:	80 91 dd 03 	lds	r24, 0x03DD
    2076:	88 23       	and	r24, r24
    2078:	a9 f4       	brne	.+42     	; 0x20a4 <main+0xdde>
    207a:	e9 85       	ldd	r30, Y+9	; 0x09
    207c:	e2 30       	cpi	r30, 0x02	; 2
    207e:	90 f4       	brcc	.+36     	; 0x20a4 <main+0xdde>
    2080:	87 ea       	ldi	r24, 0xA7	; 167
    2082:	91 e6       	ldi	r25, 0x61	; 97
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <main+0xdbe>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <main+0xdc4>
    208a:	00 00       	nop
					{  _delay_ms(100);
						fastatus&=0xf7;                   //哪里发生很多01数据过来？？？
    208c:	80 91 f2 02 	lds	r24, 0x02F2
    2090:	87 7f       	andi	r24, 0xF7	; 247
    2092:	80 93 f2 02 	sts	0x02F2, r24
						sendbit|=0x01;
    2096:	80 91 da 03 	lds	r24, 0x03DA
    209a:	81 60       	ori	r24, 0x01	; 1
    209c:	80 93 da 03 	sts	0x03DA, r24
						send_status();
    20a0:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
					}
				}
			
			wificount++;
    20a4:	80 91 f6 03 	lds	r24, 0x03F6
    20a8:	90 91 f7 03 	lds	r25, 0x03F7
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	90 93 f7 03 	sts	0x03F7, r25
    20b2:	80 93 f6 03 	sts	0x03F6, r24
			if(wificount==50)//没有返回，则取消wifi图标
    20b6:	82 33       	cpi	r24, 0x32	; 50
    20b8:	91 05       	cpc	r25, r1
    20ba:	21 f5       	brne	.+72     	; 0x2104 <main+0xe3e>
				{
					
					DATAlist[0x21]&=0x7f;
    20bc:	80 91 95 04 	lds	r24, 0x0495
    20c0:	8f 77       	andi	r24, 0x7F	; 127
    20c2:	80 93 95 04 	sts	0x0495, r24
					fastatus|=0x08;//需要发送
    20c6:	80 91 f2 02 	lds	r24, 0x02F2
    20ca:	88 60       	ori	r24, 0x08	; 8
    20cc:	80 93 f2 02 	sts	0x02F2, r24
					//LCDNUM[0]&=0xf3;//取消wifi图标
					LCDNUM[1]&=0xfe;
    20d0:	80 91 15 04 	lds	r24, 0x0415
    20d4:	8e 7f       	andi	r24, 0xFE	; 254
    20d6:	80 93 15 04 	sts	0x0415, r24
					LCDNUM[2]&=0xfe;
    20da:	80 91 16 04 	lds	r24, 0x0416
    20de:	8e 7f       	andi	r24, 0xFE	; 254
    20e0:	80 93 16 04 	sts	0x0416, r24
					LCDNUM[3]&=0xfe;
    20e4:	80 91 17 04 	lds	r24, 0x0417
    20e8:	8e 7f       	andi	r24, 0xFE	; 254
    20ea:	80 93 17 04 	sts	0x0417, r24
					LCDNUM[4]&=0xfe;
    20ee:	80 91 18 04 	lds	r24, 0x0418
    20f2:	8e 7f       	andi	r24, 0xFE	; 254
    20f4:	80 93 18 04 	sts	0x0418, r24
					LCDNUM[5]&=0xfe;
    20f8:	80 91 19 04 	lds	r24, 0x0419
    20fc:	8e 7f       	andi	r24, 0xFE	; 254
    20fe:	80 93 19 04 	sts	0x0419, r24
    2102:	2a c4       	rjmp	.+2132   	; 0x2958 <main+0x1692>
					//BEEP(200);
				}
			if(wificount>80) //重新设置wifi？   在此设置wifi重启  如果不是GPRS将此放大
    2104:	81 35       	cpi	r24, 0x51	; 81
    2106:	91 05       	cpc	r25, r1
    2108:	08 f4       	brcc	.+2      	; 0x210c <main+0xe46>
    210a:	26 c4       	rjmp	.+2124   	; 0x2958 <main+0x1692>
				{
					wificount=0;
    210c:	10 92 f7 03 	sts	0x03F7, r1
    2110:	10 92 f6 03 	sts	0x03F6, r1
					resetcount=201;  
    2114:	99 ec       	ldi	r25, 0xC9	; 201
    2116:	99 87       	std	Y+9, r25	; 0x09
    2118:	1f c4       	rjmp	.+2110   	; 0x2958 <main+0x1692>
				}
		break;
	  
	  case 3:
			//------水滴-----
			LCDNUM[12]&=0xef;
    211a:	d6 01       	movw	r26, r12
    211c:	8c 91       	ld	r24, X
    211e:	8f 7e       	andi	r24, 0xEF	; 239
    2120:	8c 93       	st	X, r24
			LCDNUM[11]&=0xef;
    2122:	f1 01       	movw	r30, r2
    2124:	80 81       	ld	r24, Z
    2126:	8f 7e       	andi	r24, 0xEF	; 239
    2128:	80 83       	st	Z, r24
			LCDNUM[7]|=0x01;
    212a:	f6 01       	movw	r30, r12
    212c:	35 97       	sbiw	r30, 0x05	; 5
    212e:	80 81       	ld	r24, Z
    2130:	81 60       	ori	r24, 0x01	; 1
    2132:	80 83       	st	Z, r24
			LCDNUM[6]&=0xfe;
    2134:	f6 01       	movw	r30, r12
    2136:	36 97       	sbiw	r30, 0x06	; 6
    2138:	80 81       	ld	r24, Z
    213a:	8e 7f       	andi	r24, 0xFE	; 254
    213c:	80 83       	st	Z, r24
			LCDNUM[15]&=0xef;
    213e:	13 96       	adiw	r26, 0x03	; 3
    2140:	8c 91       	ld	r24, X
    2142:	13 97       	sbiw	r26, 0x03	; 3
    2144:	8f 7e       	andi	r24, 0xEF	; 239
    2146:	13 96       	adiw	r26, 0x03	; 3
    2148:	8c 93       	st	X, r24
    214a:	13 97       	sbiw	r26, 0x03	; 3
			LCDNUM[16]&=0xef;
    214c:	14 96       	adiw	r26, 0x04	; 4
    214e:	8c 91       	ld	r24, X
    2150:	14 97       	sbiw	r26, 0x04	; 4
    2152:	8f 7e       	andi	r24, 0xEF	; 239
    2154:	14 96       	adiw	r26, 0x04	; 4
    2156:	8c 93       	st	X, r24
    2158:	14 97       	sbiw	r26, 0x04	; 4
			//---------

	
		break;
    215a:	fe c3       	rjmp	.+2044   	; 0x2958 <main+0x1692>
	  case 4://检查时间以及是否强制
			//------水滴-----
			LCDNUM[12]&=0xef;
    215c:	f6 01       	movw	r30, r12
    215e:	80 81       	ld	r24, Z
    2160:	8f 7e       	andi	r24, 0xEF	; 239
    2162:	80 83       	st	Z, r24
			LCDNUM[11]&=0xef;
    2164:	d1 01       	movw	r26, r2
    2166:	8c 91       	ld	r24, X
    2168:	8f 7e       	andi	r24, 0xEF	; 239
    216a:	8c 93       	st	X, r24
			LCDNUM[7]&=0xfe;
			LCDNUM[6]|=0x01;
			LCDNUM[15]&=0xef;
    216c:	83 81       	ldd	r24, Z+3	; 0x03
    216e:	8f 7e       	andi	r24, 0xEF	; 239
    2170:	83 83       	std	Z+3, r24	; 0x03
			LCDNUM[16]&=0xef;
    2172:	84 81       	ldd	r24, Z+4	; 0x04
    2174:	8f 7e       	andi	r24, 0xEF	; 239
    2176:	84 83       	std	Z+4, r24	; 0x04
	 //---------显示流量--------------
			LCDNUM[8]|=0x01;//流量
			
			tempint1=DATAlist[0x3b]*256+DATAlist[0x3c];
    2178:	ef ea       	ldi	r30, 0xAF	; 175
    217a:	f4 e0       	ldi	r31, 0x04	; 4
    217c:	f0 81       	ld	r31, Z
    217e:	fb a3       	lds	r31, 0x5b
    2180:	1a a2       	lds	r17, 0x9a
    2182:	af 8d       	ldd	r26, Y+31	; 0x1f
    2184:	b8 a1       	lds	r27, 0x48
    2186:	8c 91       	ld	r24, X
    2188:	ea a1       	lds	r30, 0x4a
    218a:	fb a1       	lds	r31, 0x4b
    218c:	e8 0f       	add	r30, r24
    218e:	f1 1d       	adc	r31, r1
			temp=tempint1/10000;
    2190:	cf 01       	movw	r24, r30
    2192:	60 e1       	ldi	r22, 0x10	; 16
    2194:	77 e2       	ldi	r23, 0x27	; 39
    2196:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
			LCDNUM[5]=(LCDNUM[5]&0x01)|SMGL[temp];
    219a:	46 2f       	mov	r20, r22
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	b6 01       	movw	r22, r12
    21a0:	67 50       	subi	r22, 0x07	; 7
    21a2:	70 40       	sbci	r23, 0x00	; 0
    21a4:	26 ec       	ldi	r18, 0xC6	; 198
    21a6:	33 e0       	ldi	r19, 0x03	; 3
    21a8:	24 0f       	add	r18, r20
    21aa:	35 1f       	adc	r19, r21
    21ac:	db 01       	movw	r26, r22
    21ae:	8c 91       	ld	r24, X
    21b0:	98 2f       	mov	r25, r24
    21b2:	91 70       	andi	r25, 0x01	; 1
    21b4:	d9 01       	movw	r26, r18
    21b6:	8c 91       	ld	r24, X
    21b8:	89 2b       	or	r24, r25
    21ba:	db 01       	movw	r26, r22
    21bc:	8c 93       	st	X, r24
			tempint1=tempint1-(temp*10000);
    21be:	80 ef       	ldi	r24, 0xF0	; 240
    21c0:	98 ed       	ldi	r25, 0xD8	; 216
    21c2:	48 9f       	mul	r20, r24
    21c4:	90 01       	movw	r18, r0
    21c6:	49 9f       	mul	r20, r25
    21c8:	30 0d       	add	r19, r0
    21ca:	58 9f       	mul	r21, r24
    21cc:	30 0d       	add	r19, r0
    21ce:	11 24       	eor	r1, r1
    21d0:	89 01       	movw	r16, r18
    21d2:	0e 0f       	add	r16, r30
    21d4:	1f 1f       	adc	r17, r31
			temp=tempint1/1000;
    21d6:	c8 01       	movw	r24, r16
    21d8:	68 ee       	ldi	r22, 0xE8	; 232
    21da:	73 e0       	ldi	r23, 0x03	; 3
    21dc:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
			LCDNUM[6]=(LCDNUM[6]&0x01)|SMGL[temp];
    21e0:	46 2f       	mov	r20, r22
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	e6 ec       	ldi	r30, 0xC6	; 198
    21e6:	f3 e0       	ldi	r31, 0x03	; 3
    21e8:	e4 0f       	add	r30, r20
    21ea:	f5 1f       	adc	r31, r21
    21ec:	80 81       	ld	r24, Z
    21ee:	81 60       	ori	r24, 0x01	; 1
    21f0:	80 93 1a 04 	sts	0x041A, r24
			tempint1=tempint1-(temp*1000);
    21f4:	88 e1       	ldi	r24, 0x18	; 24
    21f6:	9c ef       	ldi	r25, 0xFC	; 252
    21f8:	48 9f       	mul	r20, r24
    21fa:	90 01       	movw	r18, r0
    21fc:	49 9f       	mul	r20, r25
    21fe:	30 0d       	add	r19, r0
    2200:	58 9f       	mul	r21, r24
    2202:	30 0d       	add	r19, r0
    2204:	11 24       	eor	r1, r1
    2206:	02 0f       	add	r16, r18
    2208:	13 1f       	adc	r17, r19
			temp=tempint1/100;
    220a:	c8 01       	movw	r24, r16
    220c:	64 e6       	ldi	r22, 0x64	; 100
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
			LCDNUM[7]=(LCDNUM[7]&0x01)|SMGL[temp];
    2214:	46 2f       	mov	r20, r22
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	e6 ec       	ldi	r30, 0xC6	; 198
    221a:	f3 e0       	ldi	r31, 0x03	; 3
    221c:	e4 0f       	add	r30, r20
    221e:	f5 1f       	adc	r31, r21
    2220:	80 81       	ld	r24, Z
    2222:	80 93 1b 04 	sts	0x041B, r24
			tempint1=tempint1-(temp*100);
    2226:	8c e9       	ldi	r24, 0x9C	; 156
    2228:	9f ef       	ldi	r25, 0xFF	; 255
    222a:	48 9f       	mul	r20, r24
    222c:	90 01       	movw	r18, r0
    222e:	49 9f       	mul	r20, r25
    2230:	30 0d       	add	r19, r0
    2232:	58 9f       	mul	r21, r24
    2234:	30 0d       	add	r19, r0
    2236:	11 24       	eor	r1, r1
    2238:	02 0f       	add	r16, r18
    223a:	13 1f       	adc	r17, r19
			temp=tempint1/10;
    223c:	c8 01       	movw	r24, r16
    223e:	6a e0       	ldi	r22, 0x0A	; 10
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
			LCDNUM[8]=(LCDNUM[8]&0x01)|SMGL[temp];
    2246:	26 2f       	mov	r18, r22
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	e6 ec       	ldi	r30, 0xC6	; 198
    224c:	f3 e0       	ldi	r31, 0x03	; 3
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	80 81       	ld	r24, Z
    2254:	81 60       	ori	r24, 0x01	; 1
    2256:	80 93 1c 04 	sts	0x041C, r24
			tempint1=tempint1-(temp*10);
    225a:	a9 01       	movw	r20, r18
    225c:	44 0f       	add	r20, r20
    225e:	55 1f       	adc	r21, r21
    2260:	c9 01       	movw	r24, r18
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	84 0f       	add	r24, r20
    2270:	95 1f       	adc	r25, r21
			temp=tempint1;
    2272:	20 2f       	mov	r18, r16
    2274:	28 1b       	sub	r18, r24
			LCDNUM[9]=(LCDNUM[9]&0x01)|SMGL[temp];
    2276:	f6 01       	movw	r30, r12
    2278:	33 97       	sbiw	r30, 0x03	; 3
    227a:	a6 ec       	ldi	r26, 0xC6	; 198
    227c:	b3 e0       	ldi	r27, 0x03	; 3
    227e:	a2 0f       	add	r26, r18
    2280:	b1 1d       	adc	r27, r1
    2282:	80 81       	ld	r24, Z
    2284:	98 2f       	mov	r25, r24
    2286:	91 70       	andi	r25, 0x01	; 1
    2288:	8c 91       	ld	r24, X
    228a:	89 2b       	or	r24, r25
    228c:	80 83       	st	Z, r24
			

	
		break;
    228e:	64 c3       	rjmp	.+1736   	; 0x2958 <main+0x1692>
	  case 5:// 
			//------水滴-----
			LCDNUM[12]&=0xef;
    2290:	f6 01       	movw	r30, r12
    2292:	80 81       	ld	r24, Z
    2294:	8f 7e       	andi	r24, 0xEF	; 239
    2296:	80 83       	st	Z, r24
			LCDNUM[11]&=0xef;
    2298:	d1 01       	movw	r26, r2
    229a:	8c 91       	ld	r24, X
    229c:	8f 7e       	andi	r24, 0xEF	; 239
    229e:	8c 93       	st	X, r24
			LCDNUM[7]&=0xfe;
    22a0:	35 97       	sbiw	r30, 0x05	; 5
    22a2:	80 81       	ld	r24, Z
    22a4:	8e 7f       	andi	r24, 0xFE	; 254
    22a6:	80 83       	st	Z, r24
			LCDNUM[6]&=0xfe;
    22a8:	f6 01       	movw	r30, r12
    22aa:	36 97       	sbiw	r30, 0x06	; 6
    22ac:	80 81       	ld	r24, Z
    22ae:	8e 7f       	andi	r24, 0xFE	; 254
    22b0:	80 83       	st	Z, r24
			LCDNUM[15]|=0x10;
    22b2:	f6 01       	movw	r30, r12
    22b4:	83 81       	ldd	r24, Z+3	; 0x03
    22b6:	80 61       	ori	r24, 0x10	; 16
    22b8:	83 83       	std	Z+3, r24	; 0x03
			LCDNUM[16]&=0xef;
    22ba:	84 81       	ldd	r24, Z+4	; 0x04
    22bc:	8f 7e       	andi	r24, 0xEF	; 239
    22be:	84 83       	std	Z+4, r24	; 0x04
		//----------保存工作模式----
		if((enbit&0x04)==0x04)//需要保存工作模式
    22c0:	80 91 f9 03 	lds	r24, 0x03F9
    22c4:	82 ff       	sbrs	r24, 2
    22c6:	0b c0       	rjmp	.+22     	; 0x22de <main+0x1018>
		{
			EEPROM_write(41,workmode);
    22c8:	89 e2       	ldi	r24, 0x29	; 41
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	60 91 71 04 	lds	r22, 0x0471
    22d0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
			enbit&=0xfb;
    22d4:	80 91 f9 03 	lds	r24, 0x03F9
    22d8:	8b 7f       	andi	r24, 0xFB	; 251
    22da:	80 93 f9 03 	sts	0x03F9, r24
		}
		//---------------------------------------
		//处理服务器发送过来的指令
			if((dealbyte&0x01)==0x01)//开机
    22de:	80 91 e0 03 	lds	r24, 0x03E0
    22e2:	80 ff       	sbrs	r24, 0
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <main+0x1032>
				{
					send_reply(0);
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
					HT1721C_BL_1;
    22ec:	1a 9a       	sbi	0x03, 2	; 3
					LCDmode=0;
					dealbyte&=0xfe;
    22ee:	80 91 e0 03 	lds	r24, 0x03E0
    22f2:	8e 7f       	andi	r24, 0xFE	; 254
    22f4:	80 93 e0 03 	sts	0x03E0, r24
					//send_reply(0);
				}
			if((dealbyte&0x02)==0x02)//关机
    22f8:	80 91 e0 03 	lds	r24, 0x03E0
    22fc:	81 ff       	sbrs	r24, 1
    22fe:	3b c0       	rjmp	.+118    	; 0x2376 <main+0x10b0>
				{
				send_reply(0);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
				HT1721C_BL_0;
    2306:	1a 98       	cbi	0x03, 2	; 3
				LCDmode=42;
				dealbyte&=0xfd;
    2308:	80 91 e0 03 	lds	r24, 0x03E0
    230c:	8d 7f       	andi	r24, 0xFD	; 253
    230e:	80 93 e0 03 	sts	0x03E0, r24
				//send_reply(0);
				FA_HOTOFF;
    2312:	1d 98       	cbi	0x03, 5	; 3
				FA_WARMOFF;
    2314:	1c 98       	cbi	0x03, 4	; 3
				//FA_COOLOFF;
				fastatus&=0xf8;//3个阀门的状态关闭
    2316:	90 91 f2 02 	lds	r25, 0x02F2
    231a:	89 2f       	mov	r24, r25
    231c:	88 7f       	andi	r24, 0xF8	; 248
    231e:	80 93 f2 02 	sts	0x02F2, r24
				FA_INWATEROFF;
    2322:	1f 98       	cbi	0x03, 7	; 3
				waterbit&=0xfb;//置位 关闭制水
				FA_FLUSHOFF;
    2324:	1e 98       	cbi	0x03, 6	; 3
				minbit&=0xfd;//关闭冲洗阀
    2326:	80 91 f5 03 	lds	r24, 0x03F5
    232a:	8d 7f       	andi	r24, 0xFD	; 253
    232c:	80 93 f5 03 	sts	0x03F5, r24
				COOLOFF;
    2330:	e5 e6       	ldi	r30, 0x65	; 101
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	87 7f       	andi	r24, 0xF7	; 247
    2338:	80 83       	st	Z, r24
				coolcount=60;
				waterbit&=0xef;//置0，压缩机已关闭
				//HEATAOFF;
				waterbit&=0xdf;//置0，加热已关闭
				BENG1OFF;
    233a:	c1 98       	cbi	0x18, 1	; 24
				BENGOFF;
    233c:	c2 98       	cbi	0x18, 2	; 24
				fastatus&=0xf7;
    233e:	89 2f       	mov	r24, r25
    2340:	80 7f       	andi	r24, 0xF0	; 240
    2342:	80 93 f2 02 	sts	0x02F2, r24
				DATAlist[0x20]=0x00;
    2346:	a4 e9       	ldi	r26, 0x94	; 148
    2348:	b4 e0       	ldi	r27, 0x04	; 4
    234a:	1c 92       	st	X, r1
				DATAlist[0x21]=0x00;
    234c:	eb a5       	lds	r30, 0x6b
    234e:	fc a5       	lds	r31, 0x6c
    2350:	10 82       	st	Z, r1
    2352:	2f e3       	ldi	r18, 0x3F	; 63
    2354:	3d e0       	ldi	r19, 0x0D	; 13
    2356:	43 e0       	ldi	r20, 0x03	; 3
    2358:	21 50       	subi	r18, 0x01	; 1
    235a:	30 40       	sbci	r19, 0x00	; 0
    235c:	40 40       	sbci	r20, 0x00	; 0
    235e:	e1 f7       	brne	.-8      	; 0x2358 <main+0x1092>
    2360:	00 c0       	rjmp	.+0      	; 0x2362 <main+0x109c>
    2362:	00 00       	nop
				_delay_ms(1000);
				send_status();
    2364:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
				WRITE_ALLRAM_1726(0);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	0e 94 1a 09 	call	0x1234	; 0x1234 <WRITE_ALLRAM_1726>
				}
			if((dealbyte&0x02)==0x02)//关机
				{
				send_reply(0);
				HT1721C_BL_0;
				LCDmode=42;
    236e:	0f 2e       	mov	r0, r31
    2370:	fa e2       	ldi	r31, 0x2A	; 42
    2372:	ff 2e       	mov	r15, r31
    2374:	f0 2d       	mov	r31, r0
				DATAlist[0x21]=0x00;
				_delay_ms(1000);
				send_status();
				WRITE_ALLRAM_1726(0);
				}
			if((dealbyte&0x04)==0x04)//冲洗模式
    2376:	80 91 e0 03 	lds	r24, 0x03E0
    237a:	82 ff       	sbrs	r24, 2
    237c:	25 c0       	rjmp	.+74     	; 0x23c8 <main+0x1102>
			  {
				send_reply(0);
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
				dealbyte&=0xfb;
    2384:	80 91 e0 03 	lds	r24, 0x03E0
    2388:	8b 7f       	andi	r24, 0xFB	; 251
    238a:	80 93 e0 03 	sts	0x03E0, r24
				flushontime=EEPROM_read(39);
    238e:	87 e2       	ldi	r24, 0x27	; 39
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    2396:	89 83       	std	Y+1, r24	; 0x01
				BENGON;
    2398:	c2 9a       	sbi	0x18, 2	; 24
				FA_INWATERON;
    239a:	1f 9a       	sbi	0x03, 7	; 3
				FA_FLUSHON;
    239c:	1e 9a       	sbi	0x03, 6	; 3
				DATAlist[0x21]|=0x10;
    239e:	80 91 95 04 	lds	r24, 0x0495
    23a2:	80 61       	ori	r24, 0x10	; 16
    23a4:	80 93 95 04 	sts	0x0495, r24
    23a8:	4f e3       	ldi	r20, 0x3F	; 63
    23aa:	5d e0       	ldi	r21, 0x0D	; 13
    23ac:	63 e0       	ldi	r22, 0x03	; 3
    23ae:	41 50       	subi	r20, 0x01	; 1
    23b0:	50 40       	sbci	r21, 0x00	; 0
    23b2:	60 40       	sbci	r22, 0x00	; 0
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <main+0x10e8>
    23b6:	00 c0       	rjmp	.+0      	; 0x23b8 <main+0x10f2>
    23b8:	00 00       	nop
				_delay_ms(1000);
				sendbit|=0x01;
    23ba:	80 91 da 03 	lds	r24, 0x03DA
    23be:	81 60       	ori	r24, 0x01	; 1
    23c0:	80 93 da 03 	sts	0x03DA, r24
				send_status();
    23c4:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
			  }	
			if(flushontime>0)
    23c8:	59 81       	ldd	r21, Y+1	; 0x01
    23ca:	55 23       	and	r21, r21
    23cc:	d1 f0       	breq	.+52     	; 0x2402 <main+0x113c>
				{
					flushontime--;
    23ce:	51 50       	subi	r21, 0x01	; 1
    23d0:	59 83       	std	Y+1, r21	; 0x01
					if(flushontime==0)
    23d2:	55 23       	and	r21, r21
    23d4:	b1 f4       	brne	.+44     	; 0x2402 <main+0x113c>
						{
							BENGOFF;
    23d6:	c2 98       	cbi	0x18, 2	; 24
							FA_INWATEROFF;
    23d8:	1f 98       	cbi	0x03, 7	; 3
							FA_FLUSHOFF;
    23da:	1e 98       	cbi	0x03, 6	; 3
							DATAlist[0x21]&=0xef;
    23dc:	80 91 95 04 	lds	r24, 0x0495
    23e0:	8f 7e       	andi	r24, 0xEF	; 239
    23e2:	80 93 95 04 	sts	0x0495, r24
    23e6:	6f e3       	ldi	r22, 0x3F	; 63
    23e8:	7d e0       	ldi	r23, 0x0D	; 13
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	61 50       	subi	r22, 0x01	; 1
    23ee:	70 40       	sbci	r23, 0x00	; 0
    23f0:	80 40       	sbci	r24, 0x00	; 0
    23f2:	e1 f7       	brne	.-8      	; 0x23ec <main+0x1126>
    23f4:	00 c0       	rjmp	.+0      	; 0x23f6 <main+0x1130>
    23f6:	00 00       	nop
							_delay_ms(1000);
							//send_status();
							fastatus|=0x08;
    23f8:	80 91 f2 02 	lds	r24, 0x02F2
    23fc:	88 60       	ori	r24, 0x08	; 8
    23fe:	80 93 f2 02 	sts	0x02F2, r24
						}
				}
						

				if((dealbyte&0x20)==0x20)//复位滤芯到设定值
    2402:	80 91 e0 03 	lds	r24, 0x03E0
    2406:	85 ff       	sbrs	r24, 5
    2408:	41 c0       	rjmp	.+130    	; 0x248c <main+0x11c6>
					{	EEPROM_write(78,DATAlist[0x1a]);
    240a:	8e e4       	ldi	r24, 0x4E	; 78
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	60 91 8e 04 	lds	r22, 0x048E
    2412:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(79,DATAlist[0x1b]);
    2416:	8f e4       	ldi	r24, 0x4F	; 79
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	60 91 8f 04 	lds	r22, 0x048F
    241e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(80,DATAlist[0x1c]);
    2422:	80 e5       	ldi	r24, 0x50	; 80
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	60 91 90 04 	lds	r22, 0x0490
    242a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(81,DATAlist[0x1d]);
    242e:	81 e5       	ldi	r24, 0x51	; 81
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	60 91 91 04 	lds	r22, 0x0491
    2436:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(82,DATAlist[0x1e]);
    243a:	82 e5       	ldi	r24, 0x52	; 82
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	60 91 92 04 	lds	r22, 0x0492
    2442:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						EEPROM_write(83,DATAlist[0x1f]);
    2446:	83 e5       	ldi	r24, 0x53	; 83
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	60 91 93 04 	lds	r22, 0x0493
    244e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
    2452:	08 e9       	ldi	r16, 0x98	; 152
    2454:	14 e0       	ldi	r17, 0x04	; 4
    2456:	86 e5       	ldi	r24, 0x56	; 86
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9b 83       	std	Y+3, r25	; 0x03
    245c:	8a 83       	std	Y+2, r24	; 0x02
						for(i=0;i<12;i++)  //保存复位滤芯值
						{
							EEPROM_write((86+i),DATAlist[0x24+i]);
    245e:	d8 01       	movw	r26, r16
    2460:	6d 91       	ld	r22, X+
    2462:	8d 01       	movw	r16, r26
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
    246c:	ea 81       	ldd	r30, Y+2	; 0x02
    246e:	fb 81       	ldd	r31, Y+3	; 0x03
    2470:	31 96       	adiw	r30, 0x01	; 1
    2472:	fb 83       	std	Y+3, r31	; 0x03
    2474:	ea 83       	std	Y+2, r30	; 0x02
						EEPROM_write(79,DATAlist[0x1b]);
						EEPROM_write(80,DATAlist[0x1c]);
						EEPROM_write(81,DATAlist[0x1d]);
						EEPROM_write(82,DATAlist[0x1e]);
						EEPROM_write(83,DATAlist[0x1f]);
						for(i=0;i<12;i++)  //保存复位滤芯值
    2476:	e2 36       	cpi	r30, 0x62	; 98
    2478:	f1 05       	cpc	r31, r1
    247a:	89 f7       	brne	.-30     	; 0x245e <main+0x1198>
						{
							EEPROM_write((86+i),DATAlist[0x24+i]);
						}
						send_reply(0);
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
						dealbyte&=0xdf;
    2482:	80 91 e0 03 	lds	r24, 0x03E0
    2486:	8f 7d       	andi	r24, 0xDF	; 223
    2488:	80 93 e0 03 	sts	0x03E0, r24
					}	

				if((dealbyte&0x80)==0x80)//禁止机器
    248c:	80 91 e0 03 	lds	r24, 0x03E0
    2490:	88 23       	and	r24, r24
    2492:	0c f0       	brlt	.+2      	; 0x2496 <main+0x11d0>
    2494:	61 c2       	rjmp	.+1218   	; 0x2958 <main+0x1692>
					{   EEPROM_write(25,DATAlist[0x18]);
    2496:	89 e1       	ldi	r24, 0x19	; 25
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	d2 01       	movw	r26, r4
    249c:	6c 91       	ld	r22, X
    249e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
						send_reply(0);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
						dealbyte&=0x7f;
    24a8:	80 91 e0 03 	lds	r24, 0x03E0
    24ac:	8f 77       	andi	r24, 0x7F	; 127
    24ae:	80 93 e0 03 	sts	0x03E0, r24
						if(DATAlist[0x18]==0xbb)
    24b2:	f2 01       	movw	r30, r4
    24b4:	80 81       	ld	r24, Z
    24b6:	8b 3b       	cpi	r24, 0xBB	; 187
    24b8:	09 f0       	breq	.+2      	; 0x24bc <main+0x11f6>
    24ba:	4e c2       	rjmp	.+1180   	; 0x2958 <main+0x1692>
						 {
							//send_reply(0);
							HT1721C_BL_0;
    24bc:	1a 98       	cbi	0x03, 2	; 3
							LCDmode=48;
							dealbyte&=0x7f;
    24be:	80 91 e0 03 	lds	r24, 0x03E0
    24c2:	8f 77       	andi	r24, 0x7F	; 127
    24c4:	80 93 e0 03 	sts	0x03E0, r24
							//send_reply(0);
							FA_HOTOFF;
    24c8:	1d 98       	cbi	0x03, 5	; 3
							FA_WARMOFF;
    24ca:	1c 98       	cbi	0x03, 4	; 3
							//FA_COOLOFF;
							fastatus&=0xf8;//3个阀门的状态关闭
    24cc:	90 91 f2 02 	lds	r25, 0x02F2
    24d0:	89 2f       	mov	r24, r25
    24d2:	88 7f       	andi	r24, 0xF8	; 248
    24d4:	80 93 f2 02 	sts	0x02F2, r24
							FA_INWATEROFF;
    24d8:	1f 98       	cbi	0x03, 7	; 3
							waterbit&=0xfb;//置位 关闭制水
							FA_FLUSHOFF;
    24da:	1e 98       	cbi	0x03, 6	; 3
							minbit&=0xfd;//关闭冲洗阀
    24dc:	80 91 f5 03 	lds	r24, 0x03F5
    24e0:	8d 7f       	andi	r24, 0xFD	; 253
    24e2:	80 93 f5 03 	sts	0x03F5, r24
							COOLOFF;
    24e6:	e5 e6       	ldi	r30, 0x65	; 101
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	87 7f       	andi	r24, 0xF7	; 247
    24ee:	80 83       	st	Z, r24
							coolcount=60;
							waterbit&=0xef;//置0，压缩机已关闭
							//HEATAOFF;
							waterbit&=0xdf;//置0，加热已关闭
							BENG1OFF;
    24f0:	c1 98       	cbi	0x18, 1	; 24
							BENGOFF;
    24f2:	c2 98       	cbi	0x18, 2	; 24
							fastatus&=0xf7;
    24f4:	89 2f       	mov	r24, r25
    24f6:	80 7f       	andi	r24, 0xF0	; 240
    24f8:	80 93 f2 02 	sts	0x02F2, r24
							DATAlist[0x20]=0x00;
    24fc:	a4 e9       	ldi	r26, 0x94	; 148
    24fe:	b4 e0       	ldi	r27, 0x04	; 4
    2500:	1c 92       	st	X, r1
							DATAlist[0x21]=0x00;
    2502:	eb a5       	lds	r30, 0x6b
    2504:	fc a5       	lds	r31, 0x6c
    2506:	10 82       	st	Z, r1
    2508:	2f e3       	ldi	r18, 0x3F	; 63
    250a:	3d e0       	ldi	r19, 0x0D	; 13
    250c:	43 e0       	ldi	r20, 0x03	; 3
    250e:	21 50       	subi	r18, 0x01	; 1
    2510:	30 40       	sbci	r19, 0x00	; 0
    2512:	40 40       	sbci	r20, 0x00	; 0
    2514:	e1 f7       	brne	.-8      	; 0x250e <main+0x1248>
    2516:	00 c0       	rjmp	.+0      	; 0x2518 <main+0x1252>
    2518:	00 00       	nop
							_delay_ms(1000);
							send_status();
    251a:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
							WRITE_ALLRAM_1726(0);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	0e 94 1a 09 	call	0x1234	; 0x1234 <WRITE_ALLRAM_1726>
						dealbyte&=0x7f;
						if(DATAlist[0x18]==0xbb)
						 {
							//send_reply(0);
							HT1721C_BL_0;
							LCDmode=48;
    2524:	0f 2e       	mov	r0, r31
    2526:	f0 e3       	ldi	r31, 0x30	; 48
    2528:	ff 2e       	mov	r15, r31
    252a:	f0 2d       	mov	r31, r0
    252c:	15 c2       	rjmp	.+1066   	; 0x2958 <main+0x1692>
						}
					}
	  break;
	  case 6:
			//------水滴-----
			LCDNUM[12]&=0xef;
    252e:	d6 01       	movw	r26, r12
    2530:	8c 91       	ld	r24, X
    2532:	8f 7e       	andi	r24, 0xEF	; 239
    2534:	8c 93       	st	X, r24
			LCDNUM[11]&=0xef;
    2536:	f1 01       	movw	r30, r2
    2538:	80 81       	ld	r24, Z
    253a:	8f 7e       	andi	r24, 0xEF	; 239
    253c:	80 83       	st	Z, r24
			LCDNUM[7]&=0xfe;
    253e:	f6 01       	movw	r30, r12
    2540:	35 97       	sbiw	r30, 0x05	; 5
    2542:	80 81       	ld	r24, Z
    2544:	8e 7f       	andi	r24, 0xFE	; 254
    2546:	80 83       	st	Z, r24
			LCDNUM[6]&=0xfe;
    2548:	f6 01       	movw	r30, r12
    254a:	36 97       	sbiw	r30, 0x06	; 6
    254c:	80 81       	ld	r24, Z
    254e:	8e 7f       	andi	r24, 0xFE	; 254
    2550:	80 83       	st	Z, r24
			LCDNUM[15]&=0xef;
    2552:	13 96       	adiw	r26, 0x03	; 3
    2554:	8c 91       	ld	r24, X
    2556:	13 97       	sbiw	r26, 0x03	; 3
    2558:	8f 7e       	andi	r24, 0xEF	; 239
    255a:	13 96       	adiw	r26, 0x03	; 3
    255c:	8c 93       	st	X, r24
    255e:	13 97       	sbiw	r26, 0x03	; 3
			LCDNUM[16]|=0x10;
    2560:	14 96       	adiw	r26, 0x04	; 4
    2562:	8c 91       	ld	r24, X
    2564:	14 97       	sbiw	r26, 0x04	; 4
    2566:	80 61       	ori	r24, 0x10	; 16
    2568:	14 96       	adiw	r26, 0x04	; 4
    256a:	8c 93       	st	X, r24
    256c:	14 97       	sbiw	r26, 0x04	; 4
			if(((LCDNUM[1]&0x01)==0x01)&&((wifibit&0x01)==0x01)&&(resetcount<2))
    256e:	80 91 15 04 	lds	r24, 0x0415
    2572:	80 ff       	sbrs	r24, 0
    2574:	39 c0       	rjmp	.+114    	; 0x25e8 <main+0x1322>
    2576:	b9 a9       	sts	0x49, r27
    2578:	bb 23       	and	r27, r27
    257a:	b1 f1       	breq	.+108    	; 0x25e8 <main+0x1322>
    257c:	e9 85       	ldd	r30, Y+9	; 0x09
    257e:	e2 30       	cpi	r30, 0x02	; 2
    2580:	98 f5       	brcc	.+102    	; 0x25e8 <main+0x1322>
    2582:	8f e4       	ldi	r24, 0x4F	; 79
    2584:	93 ec       	ldi	r25, 0xC3	; 195
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <main+0x12c0>
    258a:	00 c0       	rjmp	.+0      	; 0x258c <main+0x12c6>
    258c:	00 00       	nop
				{_delay_ms(200);
				 sendbit|=0x0d;	
    258e:	80 91 da 03 	lds	r24, 0x03DA
    2592:	8d 60       	ori	r24, 0x0D	; 13
    2594:	80 93 da 03 	sts	0x03DA, r24
    2598:	2f e7       	ldi	r18, 0x7F	; 127
    259a:	3a e1       	ldi	r19, 0x1A	; 26
    259c:	46 e0       	ldi	r20, 0x06	; 6
    259e:	21 50       	subi	r18, 0x01	; 1
    25a0:	30 40       	sbci	r19, 0x00	; 0
    25a2:	40 40       	sbci	r20, 0x00	; 0
    25a4:	e1 f7       	brne	.-8      	; 0x259e <main+0x12d8>
    25a6:	00 c0       	rjmp	.+0      	; 0x25a8 <main+0x12e2>
    25a8:	00 00       	nop
				 wifibit&=0xfe;	
				 _delay_ms(2000);
				 send_status();	
    25aa:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	5a e1       	ldi	r21, 0x1A	; 26
    25b2:	66 e0       	ldi	r22, 0x06	; 6
    25b4:	41 50       	subi	r20, 0x01	; 1
    25b6:	50 40       	sbci	r21, 0x00	; 0
    25b8:	60 40       	sbci	r22, 0x00	; 0
    25ba:	e1 f7       	brne	.-8      	; 0x25b4 <main+0x12ee>
    25bc:	00 c0       	rjmp	.+0      	; 0x25be <main+0x12f8>
    25be:	00 00       	nop
				 _delay_ms(2000);
				 send_error();
    25c0:	0e 94 27 05 	call	0xa4e	; 0xa4e <send_error>
    25c4:	6f e7       	ldi	r22, 0x7F	; 127
    25c6:	7a e1       	ldi	r23, 0x1A	; 26
    25c8:	86 e0       	ldi	r24, 0x06	; 6
    25ca:	61 50       	subi	r22, 0x01	; 1
    25cc:	70 40       	sbci	r23, 0x00	; 0
    25ce:	80 40       	sbci	r24, 0x00	; 0
    25d0:	e1 f7       	brne	.-8      	; 0x25ca <main+0x1304>
    25d2:	00 c0       	rjmp	.+0      	; 0x25d4 <main+0x130e>
    25d4:	00 00       	nop
				 _delay_ms(2000);
				 send_filter();
    25d6:	0e 94 86 05 	call	0xb0c	; 0xb0c <send_filter>
    25da:	8f e4       	ldi	r24, 0x4F	; 79
    25dc:	93 ec       	ldi	r25, 0xC3	; 195
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <main+0x1318>
    25e2:	00 c0       	rjmp	.+0      	; 0x25e4 <main+0x131e>
    25e4:	00 00       	nop
			LCDNUM[15]&=0xef;
			LCDNUM[16]|=0x10;
			if(((LCDNUM[1]&0x01)==0x01)&&((wifibit&0x01)==0x01)&&(resetcount<2))
				{_delay_ms(200);
				 sendbit|=0x0d;	
				 wifibit&=0xfe;	
    25e6:	19 aa       	sts	0x99, r17
			  }
			  else
			  {
				  LCDNUM[13]|=0x10;
			  }*/
			  ad_getdat(5);//
    25e8:	85 e0       	ldi	r24, 0x05	; 5
    25ea:	0e 94 b9 00 	call	0x172	; 0x172 <ad_getdat>
    25ee:	a7 ea       	ldi	r26, 0xA7	; 167
    25f0:	b1 e6       	ldi	r27, 0x61	; 97
    25f2:	11 97       	sbiw	r26, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <main+0x132c>
    25f6:	00 c0       	rjmp	.+0      	; 0x25f8 <main+0x1332>
    25f8:	00 00       	nop
  		      _delay_ms(100);
			  if(DATAlist[0x41+10]>200)//gao,没漏水
    25fa:	80 91 bf 04 	lds	r24, 0x04BF
    25fe:	89 3c       	cpi	r24, 0xC9	; 201
    2600:	58 f0       	brcs	.+22     	; 0x2618 <main+0x1352>
				{
					LCDNUM[13]&=0xef;
    2602:	80 91 21 04 	lds	r24, 0x0421
    2606:	8f 7e       	andi	r24, 0xEF	; 239
    2608:	80 93 21 04 	sts	0x0421, r24
					DATAlist[0x09]&=0xef;
    260c:	80 91 7d 04 	lds	r24, 0x047D
    2610:	8f 7e       	andi	r24, 0xEF	; 239
    2612:	80 93 7d 04 	sts	0x047D, r24
    2616:	26 c0       	rjmp	.+76     	; 0x2664 <main+0x139e>
    2618:	2f e5       	ldi	r18, 0x5F	; 95
    261a:	3a ee       	ldi	r19, 0xEA	; 234
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	21 50       	subi	r18, 0x01	; 1
    2620:	30 40       	sbci	r19, 0x00	; 0
    2622:	40 40       	sbci	r20, 0x00	; 0
    2624:	e1 f7       	brne	.-8      	; 0x261e <main+0x1358>
    2626:	00 c0       	rjmp	.+0      	; 0x2628 <main+0x1362>
    2628:	00 00       	nop
				}
				else
				{    _delay_ms(300);
					 ad_getdat(5);
    262a:	85 e0       	ldi	r24, 0x05	; 5
    262c:	0e 94 b9 00 	call	0x172	; 0x172 <ad_getdat>
    2630:	87 ea       	ldi	r24, 0xA7	; 167
    2632:	91 e6       	ldi	r25, 0x61	; 97
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <main+0x136e>
    2638:	00 c0       	rjmp	.+0      	; 0x263a <main+0x1374>
    263a:	00 00       	nop
					 _delay_ms(100);
					if(DATAlist[0x41+10]<200) //再确认一下
    263c:	80 91 bf 04 	lds	r24, 0x04BF
    2640:	88 3c       	cpi	r24, 0xC8	; 200
    2642:	80 f4       	brcc	.+32     	; 0x2664 <main+0x139e>
					 {
						LCDNUM[13]|=0x10;
    2644:	80 91 21 04 	lds	r24, 0x0421
    2648:	80 61       	ori	r24, 0x10	; 16
    264a:	80 93 21 04 	sts	0x0421, r24
						DATAlist[0x09]|=0x10;
    264e:	80 91 7d 04 	lds	r24, 0x047D
    2652:	80 61       	ori	r24, 0x10	; 16
    2654:	80 93 7d 04 	sts	0x047D, r24
						BEEP(50);
    2658:	82 e3       	ldi	r24, 0x32	; 50
    265a:	0e 94 92 02 	call	0x524	; 0x524 <BEEP>
						BENGOFF;
    265e:	c2 98       	cbi	0x18, 2	; 24
						FA_INWATEROFF;
    2660:	1f 98       	cbi	0x03, 7	; 3
						FA_FLUSHOFF;
    2662:	1e 98       	cbi	0x03, 6	; 3
					 }
					
				}
			  if(((DATAlist[0x41+10]>200)&&(loushuibk<201))||((DATAlist[0x41+10]<201)&&(loushuibk>200))&&(resetcount<2))//发送漏水信息
    2664:	10 91 bf 04 	lds	r17, 0x04BF
    2668:	19 3c       	cpi	r17, 0xC9	; 201
    266a:	20 f0       	brcs	.+8      	; 0x2674 <main+0x13ae>
    266c:	9d a5       	lds	r25, 0x6d
    266e:	99 3c       	cpi	r25, 0xC9	; 201
    2670:	48 f0       	brcs	.+18     	; 0x2684 <main+0x13be>
    2672:	72 c1       	rjmp	.+740    	; 0x2958 <main+0x1692>
    2674:	ad a5       	lds	r26, 0x6d
    2676:	a9 3c       	cpi	r26, 0xC9	; 201
    2678:	08 f4       	brcc	.+2      	; 0x267c <main+0x13b6>
    267a:	6e c1       	rjmp	.+732    	; 0x2958 <main+0x1692>
    267c:	b9 85       	ldd	r27, Y+9	; 0x09
    267e:	b2 30       	cpi	r27, 0x02	; 2
    2680:	08 f0       	brcs	.+2      	; 0x2684 <main+0x13be>
    2682:	6a c1       	rjmp	.+724    	; 0x2958 <main+0x1692>
				{
					loushuibk=DATAlist[0x41+10];
					sendbit|=0x08;
    2684:	80 91 da 03 	lds	r24, 0x03DA
    2688:	88 60       	ori	r24, 0x08	; 8
    268a:	80 93 da 03 	sts	0x03DA, r24
					send_error();//发送错误代码
    268e:	0e 94 27 05 	call	0xa4e	; 0xa4e <send_error>
    2692:	ef e4       	ldi	r30, 0x4F	; 79
    2694:	f3 ec       	ldi	r31, 0xC3	; 195
    2696:	31 97       	sbiw	r30, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <main+0x13d0>
    269a:	00 c0       	rjmp	.+0      	; 0x269c <main+0x13d6>
    269c:	00 00       	nop
					 }
					
				}
			  if(((DATAlist[0x41+10]>200)&&(loushuibk<201))||((DATAlist[0x41+10]<201)&&(loushuibk>200))&&(resetcount<2))//发送漏水信息
				{
					loushuibk=DATAlist[0x41+10];
    269e:	1d a7       	lds	r17, 0x7d
    26a0:	5b c1       	rjmp	.+694    	; 0x2958 <main+0x1692>
				}
				
			break;
	  case 7:
		//---------------发生是否缺水的信息------------------------
					if((((DATAlist[0x0b]&0x02)==0x02)&&((timebit&0x10)==0x00))||(((DATAlist[0x0b]&0x02)==0x00)&&((timebit&0x10)==0x10)))//不同
    26a2:	80 91 7f 04 	lds	r24, 0x047F
    26a6:	81 ff       	sbrs	r24, 1
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <main+0x13ec>
    26aa:	fa a5       	lds	r31, 0x6a
    26ac:	f4 ff       	sbrs	r31, 4
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <main+0x13f2>
    26b0:	53 c1       	rjmp	.+678    	; 0x2958 <main+0x1692>
    26b2:	2a a5       	lds	r18, 0x6a
    26b4:	24 ff       	sbrs	r18, 4
    26b6:	50 c1       	rjmp	.+672    	; 0x2958 <main+0x1692>
						{   timebit^=0x10;
    26b8:	80 e1       	ldi	r24, 0x10	; 16
    26ba:	3a a5       	lds	r19, 0x6a
    26bc:	38 27       	eor	r19, r24
    26be:	3a a7       	lds	r19, 0x7a
							sendbit|=0x08;
    26c0:	80 91 da 03 	lds	r24, 0x03DA
    26c4:	88 60       	ori	r24, 0x08	; 8
    26c6:	80 93 da 03 	sts	0x03DA, r24
							send_error();
    26ca:	0e 94 27 05 	call	0xa4e	; 0xa4e <send_error>
    26ce:	44 c1       	rjmp	.+648    	; 0x2958 <main+0x1692>
						}
	
		break;
	  case 8:
		if(resetcount>0)
    26d0:	49 85       	ldd	r20, Y+9	; 0x09
    26d2:	44 23       	and	r20, r20
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <main+0x1412>
    26d6:	40 c1       	rjmp	.+640    	; 0x2958 <main+0x1692>
		{resetcount--;
    26d8:	41 50       	subi	r20, 0x01	; 1
    26da:	49 87       	std	Y+9, r20	; 0x09
		 switch(resetcount)
    26dc:	4f 3b       	cpi	r20, 0xBF	; 191
    26de:	81 f1       	breq	.+96     	; 0x2740 <main+0x147a>
    26e0:	40 3c       	cpi	r20, 0xC0	; 192
    26e2:	88 f4       	brcc	.+34     	; 0x2706 <main+0x1440>
    26e4:	44 3a       	cpi	r20, 0xA4	; 164
    26e6:	09 f4       	brne	.+2      	; 0x26ea <main+0x1424>
    26e8:	e8 c0       	rjmp	.+464    	; 0x28ba <main+0x15f4>
    26ea:	45 3a       	cpi	r20, 0xA5	; 165
    26ec:	20 f4       	brcc	.+8      	; 0x26f6 <main+0x1430>
    26ee:	42 3a       	cpi	r20, 0xA2	; 162
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <main+0x142e>
    26f2:	32 c1       	rjmp	.+612    	; 0x2958 <main+0x1692>
    26f4:	2e c1       	rjmp	.+604    	; 0x2952 <main+0x168c>
    26f6:	59 85       	ldd	r21, Y+9	; 0x09
    26f8:	5a 3a       	cpi	r21, 0xAA	; 170
    26fa:	09 f4       	brne	.+2      	; 0x26fe <main+0x1438>
    26fc:	71 c0       	rjmp	.+226    	; 0x27e0 <main+0x151a>
    26fe:	5b 3a       	cpi	r21, 0xAB	; 171
    2700:	09 f0       	breq	.+2      	; 0x2704 <main+0x143e>
    2702:	2a c1       	rjmp	.+596    	; 0x2958 <main+0x1692>
    2704:	1f c0       	rjmp	.+62     	; 0x2744 <main+0x147e>
    2706:	69 85       	ldd	r22, Y+9	; 0x09
    2708:	63 3c       	cpi	r22, 0xC3	; 195
    270a:	b1 f0       	breq	.+44     	; 0x2738 <main+0x1472>
    270c:	64 3c       	cpi	r22, 0xC4	; 196
    270e:	20 f4       	brcc	.+8      	; 0x2718 <main+0x1452>
    2710:	61 3c       	cpi	r22, 0xC1	; 193
    2712:	09 f0       	breq	.+2      	; 0x2716 <main+0x1450>
    2714:	21 c1       	rjmp	.+578    	; 0x2958 <main+0x1692>
    2716:	12 c0       	rjmp	.+36     	; 0x273c <main+0x1476>
    2718:	79 85       	ldd	r23, Y+9	; 0x09
    271a:	75 3c       	cpi	r23, 0xC5	; 197
    271c:	29 f0       	breq	.+10     	; 0x2728 <main+0x1462>
    271e:	77 3c       	cpi	r23, 0xC7	; 199
    2720:	09 f0       	breq	.+2      	; 0x2724 <main+0x145e>
    2722:	1a c1       	rjmp	.+564    	; 0x2958 <main+0x1692>
			{
				case 199:
					RELOAD2_0;
    2724:	db 98       	cbi	0x1b, 3	; 27
					//BEEP(10);
					//BEEP(200);
				   break;
    2726:	18 c1       	rjmp	.+560    	; 0x2958 <main+0x1692>
				case 197:
					RESET_0;
    2728:	da 9a       	sbi	0x1b, 2	; 27
    272a:	83 ec       	ldi	r24, 0xC3	; 195
    272c:	99 e0       	ldi	r25, 0x09	; 9
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <main+0x1468>
    2732:	00 c0       	rjmp	.+0      	; 0x2734 <main+0x146e>
    2734:	00 00       	nop
    2736:	10 c1       	rjmp	.+544    	; 0x2958 <main+0x1692>
					_delay_ms(10);
					//RESET_0;
					//BEEP(10);
				   break;
				case 195:
					RESET_1;
    2738:	da 98       	cbi	0x1b, 2	; 27
				   break;
    273a:	0e c1       	rjmp	.+540    	; 0x2958 <main+0x1692>
				case 193:
					RELOAD2_1;
    273c:	db 9a       	sbi	0x1b, 3	; 27
				   break;
    273e:	0c c1       	rjmp	.+536    	; 0x2958 <main+0x1692>
				case 191:
					RELOAD2_1;
    2740:	db 9a       	sbi	0x1b, 3	; 27
				   break;
    2742:	0a c1       	rjmp	.+532    	; 0x2958 <main+0x1692>
				case 171://ate0172
				   //gprs_init();
				       rx1poit=0;
    2744:	10 92 fb 03 	sts	0x03FB, r1
				       for(ip=&sendhx[0];ip<(&sendhx[0]+4);ip++) //ATE0
    2748:	86 e6       	ldi	r24, 0x66	; 102
    274a:	93 e0       	ldi	r25, 0x03	; 3
    274c:	90 93 04 04 	sts	0x0404, r25
    2750:	80 93 03 04 	sts	0x0403, r24
    2754:	9c 01       	movw	r18, r24
    2756:	2c 5f       	subi	r18, 0xFC	; 252
    2758:	3f 4f       	sbci	r19, 0xFF	; 255
    275a:	82 17       	cp	r24, r18
    275c:	93 07       	cpc	r25, r19
    275e:	90 f4       	brcc	.+36     	; 0x2784 <main+0x14be>
    2760:	0a e6       	ldi	r16, 0x6A	; 106
    2762:	13 e0       	ldi	r17, 0x03	; 3
				       {
					       putchar1(*ip);
    2764:	dc 01       	movw	r26, r24
    2766:	8c 91       	ld	r24, X
    2768:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
					RELOAD2_1;
				   break;
				case 171://ate0172
				   //gprs_init();
				       rx1poit=0;
				       for(ip=&sendhx[0];ip<(&sendhx[0]+4);ip++) //ATE0
    276c:	80 91 03 04 	lds	r24, 0x0403
    2770:	90 91 04 04 	lds	r25, 0x0404
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	90 93 04 04 	sts	0x0404, r25
    277a:	80 93 03 04 	sts	0x0403, r24
    277e:	80 17       	cp	r24, r16
    2780:	91 07       	cpc	r25, r17
    2782:	80 f3       	brcs	.-32     	; 0x2764 <main+0x149e>
				       {
					       putchar1(*ip);
				       }
				       putchar1(0x0d);
    2784:	8d e0       	ldi	r24, 0x0D	; 13
    2786:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
				       putchar1(0x0a);
    278a:	8a e0       	ldi	r24, 0x0A	; 10
    278c:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
				       //---wait reply--
				       rx1buffer[1]=0x00;
    2790:	10 92 36 04 	sts	0x0436, r1
    2794:	ef e4       	ldi	r30, 0x4F	; 79
    2796:	f3 ec       	ldi	r31, 0xC3	; 195
    2798:	31 97       	sbiw	r30, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <main+0x14d2>
    279c:	00 c0       	rjmp	.+0      	; 0x279e <main+0x14d8>
    279e:	00 00       	nop
				       _delay_ms(200);
				       rx1poit=0;
    27a0:	10 92 fb 03 	sts	0x03FB, r1
    27a4:	44 e6       	ldi	r20, 0x64	; 100
				       for(temp=0;temp<100;temp++)
				       {
					       if(rx1buffer[rx1poit-3]==0x4F) temp=101;
    27a6:	25 e3       	ldi	r18, 0x35	; 53
    27a8:	34 e0       	ldi	r19, 0x04	; 4
    27aa:	80 91 fb 03 	lds	r24, 0x03FB
    27ae:	b9 01       	movw	r22, r18
    27b0:	68 0f       	add	r22, r24
    27b2:	71 1d       	adc	r23, r1
    27b4:	cb 01       	movw	r24, r22
    27b6:	03 97       	sbiw	r24, 0x03	; 3
    27b8:	dc 01       	movw	r26, r24
    27ba:	8c 91       	ld	r24, X
    27bc:	8f 34       	cpi	r24, 0x4F	; 79
    27be:	09 f4       	brne	.+2      	; 0x27c2 <main+0x14fc>
    27c0:	43 c3       	rjmp	.+1670   	; 0x2e48 <main+0x1b82>
    27c2:	eb e7       	ldi	r30, 0x7B	; 123
    27c4:	f2 e9       	ldi	r31, 0x92	; 146
    27c6:	31 97       	sbiw	r30, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <main+0x1500>
    27ca:	00 c0       	rjmp	.+0      	; 0x27cc <main+0x1506>
    27cc:	00 00       	nop
    27ce:	41 50       	subi	r20, 0x01	; 1
				       putchar1(0x0a);
				       //---wait reply--
				       rx1buffer[1]=0x00;
				       _delay_ms(200);
				       rx1poit=0;
				       for(temp=0;temp<100;temp++)
    27d0:	61 f7       	brne	.-40     	; 0x27aa <main+0x14e4>
    27d2:	87 ea       	ldi	r24, 0xA7	; 167
    27d4:	91 e6       	ldi	r25, 0x61	; 97
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <main+0x1510>
    27da:	00 c0       	rjmp	.+0      	; 0x27dc <main+0x1516>
    27dc:	00 00       	nop
    27de:	bc c0       	rjmp	.+376    	; 0x2958 <main+0x1692>
				       }
				       _delay_ms(100);
				   break;
				case 170:
						//-----------------
						rx1poit=0;
    27e0:	10 92 fb 03 	sts	0x03FB, r1
						for(ip=&sendnet[0];ip<(&sendnet[0]+37);ip++) //
    27e4:	8a e0       	ldi	r24, 0x0A	; 10
    27e6:	93 e0       	ldi	r25, 0x03	; 3
    27e8:	90 93 04 04 	sts	0x0404, r25
    27ec:	80 93 03 04 	sts	0x0403, r24
    27f0:	9c 01       	movw	r18, r24
    27f2:	2b 5d       	subi	r18, 0xDB	; 219
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	82 17       	cp	r24, r18
    27f8:	93 07       	cpc	r25, r19
    27fa:	90 f4       	brcc	.+36     	; 0x2820 <main+0x155a>
    27fc:	0f e2       	ldi	r16, 0x2F	; 47
    27fe:	13 e0       	ldi	r17, 0x03	; 3
						{
							putchar1(*ip);
    2800:	dc 01       	movw	r26, r24
    2802:	8c 91       	ld	r24, X
    2804:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
				       _delay_ms(100);
				   break;
				case 170:
						//-----------------
						rx1poit=0;
						for(ip=&sendnet[0];ip<(&sendnet[0]+37);ip++) //
    2808:	80 91 03 04 	lds	r24, 0x0403
    280c:	90 91 04 04 	lds	r25, 0x0404
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	90 93 04 04 	sts	0x0404, r25
    2816:	80 93 03 04 	sts	0x0403, r24
    281a:	80 17       	cp	r24, r16
    281c:	91 07       	cpc	r25, r17
    281e:	80 f3       	brcs	.-32     	; 0x2800 <main+0x153a>
						{
							putchar1(*ip);
						}
						putchar1(0x0d);
    2820:	8d e0       	ldi	r24, 0x0D	; 13
    2822:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
						putchar1(0x0a);
    2826:	8a e0       	ldi	r24, 0x0A	; 10
    2828:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
						//---wait reply--
						rx1buffer[1]=0x00;
    282c:	10 92 36 04 	sts	0x0436, r1
    2830:	2f e7       	ldi	r18, 0x7F	; 127
    2832:	3d e8       	ldi	r19, 0x8D	; 141
    2834:	4b e5       	ldi	r20, 0x5B	; 91
    2836:	21 50       	subi	r18, 0x01	; 1
    2838:	30 40       	sbci	r19, 0x00	; 0
    283a:	40 40       	sbci	r20, 0x00	; 0
    283c:	e1 f7       	brne	.-8      	; 0x2836 <main+0x1570>
    283e:	00 c0       	rjmp	.+0      	; 0x2840 <main+0x157a>
    2840:	00 00       	nop
    2842:	4f ef       	ldi	r20, 0xFF	; 255
    2844:	58 e0       	ldi	r21, 0x08	; 8
    2846:	6d e3       	ldi	r22, 0x3D	; 61
    2848:	41 50       	subi	r20, 0x01	; 1
    284a:	50 40       	sbci	r21, 0x00	; 0
    284c:	60 40       	sbci	r22, 0x00	; 0
    284e:	e1 f7       	brne	.-8      	; 0x2848 <main+0x1582>
    2850:	00 c0       	rjmp	.+0      	; 0x2852 <main+0x158c>
    2852:	00 00       	nop
    2854:	6f e7       	ldi	r22, 0x7F	; 127
    2856:	74 e8       	ldi	r23, 0x84	; 132
    2858:	8e e1       	ldi	r24, 0x1E	; 30
    285a:	61 50       	subi	r22, 0x01	; 1
    285c:	70 40       	sbci	r23, 0x00	; 0
    285e:	80 40       	sbci	r24, 0x00	; 0
    2860:	e1 f7       	brne	.-8      	; 0x285a <main+0x1594>
    2862:	00 c0       	rjmp	.+0      	; 0x2864 <main+0x159e>
    2864:	00 00       	nop
    2866:	8f e7       	ldi	r24, 0x7F	; 127
    2868:	94 e8       	ldi	r25, 0x84	; 132
    286a:	ae e1       	ldi	r26, 0x1E	; 30
    286c:	81 50       	subi	r24, 0x01	; 1
    286e:	90 40       	sbci	r25, 0x00	; 0
    2870:	a0 40       	sbci	r26, 0x00	; 0
    2872:	e1 f7       	brne	.-8      	; 0x286c <main+0x15a6>
    2874:	00 c0       	rjmp	.+0      	; 0x2876 <main+0x15b0>
    2876:	00 00       	nop
    2878:	48 ec       	ldi	r20, 0xC8	; 200
						_delay_ms(10000);
						_delay_ms(10000);
						
						for(temp=0;temp<200;temp++)
						{
							if(rx1buffer[rx1poit-3]==0x4f) temp=201;
    287a:	25 e3       	ldi	r18, 0x35	; 53
    287c:	34 e0       	ldi	r19, 0x04	; 4
    287e:	80 91 fb 03 	lds	r24, 0x03FB
    2882:	d9 01       	movw	r26, r18
    2884:	a8 0f       	add	r26, r24
    2886:	b1 1d       	adc	r27, r1
    2888:	cd 01       	movw	r24, r26
    288a:	03 97       	sbiw	r24, 0x03	; 3
    288c:	fc 01       	movw	r30, r24
    288e:	80 81       	ld	r24, Z
    2890:	8f 34       	cpi	r24, 0x4F	; 79
    2892:	09 f4       	brne	.+2      	; 0x2896 <main+0x15d0>
    2894:	e0 c2       	rjmp	.+1472   	; 0x2e56 <main+0x1b90>
    2896:	8f e4       	ldi	r24, 0x4F	; 79
    2898:	93 ec       	ldi	r25, 0xC3	; 195
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <main+0x15d4>
    289e:	00 c0       	rjmp	.+0      	; 0x28a0 <main+0x15da>
    28a0:	00 00       	nop
    28a2:	41 50       	subi	r20, 0x01	; 1
						_delay_ms(30000);
						_delay_ms(20000);
						_delay_ms(10000);
						_delay_ms(10000);
						
						for(temp=0;temp<200;temp++)
    28a4:	61 f7       	brne	.-40     	; 0x287e <main+0x15b8>
    28a6:	2f e3       	ldi	r18, 0x3F	; 63
    28a8:	3d e0       	ldi	r19, 0x0D	; 13
    28aa:	43 e0       	ldi	r20, 0x03	; 3
    28ac:	21 50       	subi	r18, 0x01	; 1
    28ae:	30 40       	sbci	r19, 0x00	; 0
    28b0:	40 40       	sbci	r20, 0x00	; 0
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <main+0x15e6>
    28b4:	00 c0       	rjmp	.+0      	; 0x28b6 <main+0x15f0>
    28b6:	00 00       	nop
    28b8:	4f c0       	rjmp	.+158    	; 0x2958 <main+0x1692>
						}
						_delay_ms(1000);
						//---
						break;
				case 164:
					rx1poit=0;
    28ba:	10 92 fb 03 	sts	0x03FB, r1
					for(ip=&sendtc[0];ip<(&sendtc[0]+13);ip++) //
    28be:	8c ef       	ldi	r24, 0xFC	; 252
    28c0:	92 e0       	ldi	r25, 0x02	; 2
    28c2:	90 93 04 04 	sts	0x0404, r25
    28c6:	80 93 03 04 	sts	0x0403, r24
    28ca:	9c 01       	movw	r18, r24
    28cc:	23 5f       	subi	r18, 0xF3	; 243
    28ce:	3f 4f       	sbci	r19, 0xFF	; 255
    28d0:	82 17       	cp	r24, r18
    28d2:	93 07       	cpc	r25, r19
    28d4:	90 f4       	brcc	.+36     	; 0x28fa <main+0x1634>
    28d6:	09 e0       	ldi	r16, 0x09	; 9
    28d8:	13 e0       	ldi	r17, 0x03	; 3
					{
						putchar1(*ip);
    28da:	dc 01       	movw	r26, r24
    28dc:	8c 91       	ld	r24, X
    28de:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
						_delay_ms(1000);
						//---
						break;
				case 164:
					rx1poit=0;
					for(ip=&sendtc[0];ip<(&sendtc[0]+13);ip++) //
    28e2:	80 91 03 04 	lds	r24, 0x0403
    28e6:	90 91 04 04 	lds	r25, 0x0404
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	90 93 04 04 	sts	0x0404, r25
    28f0:	80 93 03 04 	sts	0x0403, r24
    28f4:	80 17       	cp	r24, r16
    28f6:	91 07       	cpc	r25, r17
    28f8:	80 f3       	brcs	.-32     	; 0x28da <main+0x1614>
					{
						putchar1(*ip);
					}
					putchar1(0x0d);
    28fa:	8d e0       	ldi	r24, 0x0D	; 13
    28fc:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
					putchar1(0x0a);
    2900:	8a e0       	ldi	r24, 0x0A	; 10
    2902:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
					//---wait reply--
					rx1buffer[1]=0x00;
    2906:	10 92 36 04 	sts	0x0436, r1
    290a:	ef e4       	ldi	r30, 0x4F	; 79
    290c:	f3 ec       	ldi	r31, 0xC3	; 195
    290e:	31 97       	sbiw	r30, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <main+0x1648>
    2912:	00 c0       	rjmp	.+0      	; 0x2914 <main+0x164e>
    2914:	00 00       	nop
    2916:	44 e6       	ldi	r20, 0x64	; 100
					_delay_ms(200);
					
					for(temp=0;temp<100;temp++)
					{
						if(rx1buffer[rx1poit-3]==0x4f) temp=101;
    2918:	25 e3       	ldi	r18, 0x35	; 53
    291a:	34 e0       	ldi	r19, 0x04	; 4
    291c:	80 91 fb 03 	lds	r24, 0x03FB
    2920:	b9 01       	movw	r22, r18
    2922:	68 0f       	add	r22, r24
    2924:	71 1d       	adc	r23, r1
    2926:	cb 01       	movw	r24, r22
    2928:	03 97       	sbiw	r24, 0x03	; 3
    292a:	dc 01       	movw	r26, r24
    292c:	8c 91       	ld	r24, X
    292e:	8f 34       	cpi	r24, 0x4F	; 79
    2930:	09 f4       	brne	.+2      	; 0x2934 <main+0x166e>
    2932:	98 c2       	rjmp	.+1328   	; 0x2e64 <main+0x1b9e>
    2934:	e7 ea       	ldi	r30, 0xA7	; 167
    2936:	f1 e6       	ldi	r31, 0x61	; 97
    2938:	31 97       	sbiw	r30, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <main+0x1672>
    293c:	00 c0       	rjmp	.+0      	; 0x293e <main+0x1678>
    293e:	00 00       	nop
    2940:	41 50       	subi	r20, 0x01	; 1
					putchar1(0x0a);
					//---wait reply--
					rx1buffer[1]=0x00;
					_delay_ms(200);
					
					for(temp=0;temp<100;temp++)
    2942:	61 f7       	brne	.-40     	; 0x291c <main+0x1656>
    2944:	87 ea       	ldi	r24, 0xA7	; 167
    2946:	91 e6       	ldi	r25, 0x61	; 97
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <main+0x1682>
    294c:	00 c0       	rjmp	.+0      	; 0x294e <main+0x1688>
    294e:	00 00       	nop
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <main+0x1692>
					}
					_delay_ms(100);
					//---
					break;
				case 162:
				   resetcount=0;
    2952:	19 86       	std	Y+9, r1	; 0x09
				   sendtime=1;
    2954:	91 e0       	ldi	r25, 0x01	; 1
    2956:	9d 87       	std	Y+13, r25	; 0x0d

	   default:break;
  }
//ONE.2----------------检测各个接口信号--------------------------------------------------------
//-------制水检测---------
   if((flushontime==0)&&(LCDmode==0))
    2958:	a9 81       	ldd	r26, Y+1	; 0x01
    295a:	aa 23       	and	r26, r26
    295c:	09 f0       	breq	.+2      	; 0x2960 <main+0x169a>
    295e:	d9 c0       	rjmp	.+434    	; 0x2b12 <main+0x184c>
    2960:	ff 20       	and	r15, r15
    2962:	09 f0       	breq	.+2      	; 0x2966 <main+0x16a0>
    2964:	d6 c0       	rjmp	.+428    	; 0x2b12 <main+0x184c>
    {  
     if((PINB&0x80)==0x80)//1 1
    2966:	b7 9b       	sbis	0x16, 7	; 22
    2968:	24 c0       	rjmp	.+72     	; 0x29b2 <main+0x16ec>
		{   LLJcount=0;
			LCDNUM[14]&=0xef;
    296a:	e2 e2       	ldi	r30, 0x22	; 34
    296c:	f4 e0       	ldi	r31, 0x04	; 4
    296e:	80 81       	ld	r24, Z
    2970:	8f 7e       	andi	r24, 0xEF	; 239
    2972:	80 83       	st	Z, r24
			if((PINB&0x40)==0x00)//水满
    2974:	b6 99       	sbic	0x16, 6	; 22
    2976:	18 c0       	rjmp	.+48     	; 0x29a8 <main+0x16e2>
				{
					BENGOFF;
    2978:	c2 98       	cbi	0x18, 2	; 24
					FA_INWATEROFF;
    297a:	1f 98       	cbi	0x03, 7	; 3
					FA_FLUSHOFF;
    297c:	1e 98       	cbi	0x03, 6	; 3
					
					if(flushcont>200)//制水10升了，冲洗一次
    297e:	80 91 dc 03 	lds	r24, 0x03DC
    2982:	89 3c       	cpi	r24, 0xC9	; 201
    2984:	50 f0       	brcs	.+20     	; 0x299a <main+0x16d4>
						{
							flushcont=0;
    2986:	10 92 dc 03 	sts	0x03DC, r1
							flushontime=EEPROM_read(39);
    298a:	87 e2       	ldi	r24, 0x27	; 39
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EEPROM_read>
    2992:	89 83       	std	Y+1, r24	; 0x01
							BENGON;
    2994:	c2 9a       	sbi	0x18, 2	; 24
							FA_INWATERON;
    2996:	1f 9a       	sbi	0x03, 7	; 3
							FA_FLUSHON;
    2998:	1e 9a       	sbi	0x03, 6	; 3
						}
					DATAlist[0x0b]&=0xfd;//有水
    299a:	80 91 7f 04 	lds	r24, 0x047F
    299e:	8d 7f       	andi	r24, 0xFD	; 253
    29a0:	80 93 7f 04 	sts	0x047F, r24
//ONE.2----------------检测各个接口信号--------------------------------------------------------
//-------制水检测---------
   if((flushontime==0)&&(LCDmode==0))
    {  
     if((PINB&0x80)==0x80)//1 1
		{   LLJcount=0;
    29a4:	1e 86       	std	Y+14, r1	; 0x0e
    29a6:	b5 c0       	rjmp	.+362    	; 0x2b12 <main+0x184c>
						}
					DATAlist[0x0b]&=0xfd;//有水
				}
			else//检修 1 0
				{
					BENGOFF;
    29a8:	c2 98       	cbi	0x18, 2	; 24
					FA_INWATEROFF;
    29aa:	1f 98       	cbi	0x03, 7	; 3
					FA_FLUSHOFF;
    29ac:	1e 98       	cbi	0x03, 6	; 3
//ONE.2----------------检测各个接口信号--------------------------------------------------------
//-------制水检测---------
   if((flushontime==0)&&(LCDmode==0))
    {  
     if((PINB&0x80)==0x80)//1 1
		{   LLJcount=0;
    29ae:	1e 86       	std	Y+14, r1	; 0x0e
    29b0:	b0 c0       	rjmp	.+352    	; 0x2b12 <main+0x184c>
					FA_FLUSHOFF;
				}
		}
	else   //0
		{
			if((PINB&0x40)==0x00)//制水 0 0 在没有漏水的情况下
    29b2:	b6 99       	sbic	0x16, 6	; 22
    29b4:	a0 c0       	rjmp	.+320    	; 0x2af6 <main+0x1830>
			{   if((LCDNUM[13]&0x10)==0x00)//如果时间为0，则不运行制水了&&(DATAlist[0x5e]!=0x00)&&(DATAlist[0x5f]!=0x00)   没漏水
    29b6:	80 91 21 04 	lds	r24, 0x0421
    29ba:	84 fd       	sbrc	r24, 4
    29bc:	96 c0       	rjmp	.+300    	; 0x2aea <main+0x1824>
					{  if((DATAlist[0x5e]==0x00)&&(DATAlist[0x5f]==0x00))//剩余时间不为0
    29be:	80 91 d2 04 	lds	r24, 0x04D2
    29c2:	88 23       	and	r24, r24
    29c4:	59 f4       	brne	.+22     	; 0x29dc <main+0x1716>
    29c6:	80 91 d3 04 	lds	r24, 0x04D3
    29ca:	88 23       	and	r24, r24
    29cc:	39 f4       	brne	.+14     	; 0x29dc <main+0x1716>
    29ce:	89 ef       	ldi	r24, 0xF9	; 249
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <main+0x170c>
    29d6:	00 c0       	rjmp	.+0      	; 0x29d8 <main+0x1712>
    29d8:	00 00       	nop
    29da:	87 c0       	rjmp	.+270    	; 0x2aea <main+0x1824>
						{	_delay_ms(1);
						}
						else
						{//---制水------
							BENGON;
    29dc:	c2 9a       	sbi	0x18, 2	; 24
							FA_INWATERON;
    29de:	1f 9a       	sbi	0x03, 7	; 3
							FA_FLUSHOFF;
    29e0:	1e 98       	cbi	0x03, 6	; 3
							tdscount=6;
							LCDNUM[14]&=0xef;
    29e2:	a2 e2       	ldi	r26, 0x22	; 34
    29e4:	b4 e0       	ldi	r27, 0x04	; 4
    29e6:	8c 91       	ld	r24, X
    29e8:	8f 7e       	andi	r24, 0xEF	; 239
    29ea:	8c 93       	st	X, r24
							//-----	计数 后判断置位
							LLJcount++;
    29ec:	be 85       	ldd	r27, Y+14	; 0x0e
    29ee:	bf 5f       	subi	r27, 0xFF	; 255
    29f0:	be 87       	std	Y+14, r27	; 0x0e
							if(LLJcount>60)
    29f2:	bd 33       	cpi	r27, 0x3D	; 61
    29f4:	08 f4       	brcc	.+2      	; 0x29f8 <main+0x1732>
    29f6:	69 c0       	rjmp	.+210    	; 0x2aca <main+0x1804>
							{   LLJcount=0;
								tempint1=TCNT1;
    29f8:	0c b5       	in	r16, 0x2c	; 44
    29fa:	1d b5       	in	r17, 0x2d	; 45
								if(tempint1==bkliul)//流量没变
    29fc:	ee a5       	lds	r30, 0x6e
    29fe:	ff a5       	lds	r31, 0x6f
    2a00:	e0 17       	cp	r30, r16
    2a02:	f1 07       	cpc	r31, r17
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <main+0x1742>
    2a06:	44 c0       	rjmp	.+136    	; 0x2a90 <main+0x17ca>
    2a08:	2f eb       	ldi	r18, 0xBF	; 191
    2a0a:	37 e2       	ldi	r19, 0x27	; 39
    2a0c:	49 e0       	ldi	r20, 0x09	; 9
    2a0e:	21 50       	subi	r18, 0x01	; 1
    2a10:	30 40       	sbci	r19, 0x00	; 0
    2a12:	40 40       	sbci	r20, 0x00	; 0
    2a14:	e1 f7       	brne	.-8      	; 0x2a0e <main+0x1748>
    2a16:	00 c0       	rjmp	.+0      	; 0x2a18 <main+0x1752>
    2a18:	00 00       	nop
									{
										_delay_ms(3000);
										bkliul=TCNT1;
    2a1a:	8c b5       	in	r24, 0x2c	; 44
    2a1c:	9d b5       	in	r25, 0x2d	; 45
										if(tempint1==bkliul)//还是相等，流量没变化，流量计故障
    2a1e:	e8 17       	cp	r30, r24
    2a20:	f9 07       	cpc	r31, r25
    2a22:	d9 f4       	brne	.+54     	; 0x2a5a <main+0x1794>
											{   if((DATAlist[0x0b]&0x40)==0x00)//没置位
    2a24:	80 91 7f 04 	lds	r24, 0x047F
    2a28:	86 fd       	sbrc	r24, 6
    2a2a:	52 c0       	rjmp	.+164    	; 0x2ad0 <main+0x180a>
													{   DATAlist[0x0b]|=0x40;
    2a2c:	80 64       	ori	r24, 0x40	; 64
    2a2e:	80 93 7f 04 	sts	0x047F, r24
    2a32:	4f e5       	ldi	r20, 0x5F	; 95
    2a34:	5a ee       	ldi	r21, 0xEA	; 234
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	41 50       	subi	r20, 0x01	; 1
    2a3a:	50 40       	sbci	r21, 0x00	; 0
    2a3c:	60 40       	sbci	r22, 0x00	; 0
    2a3e:	e1 f7       	brne	.-8      	; 0x2a38 <main+0x1772>
    2a40:	00 c0       	rjmp	.+0      	; 0x2a42 <main+0x177c>
    2a42:	00 00       	nop
														_delay_ms(300);
														sendbit|=0x08;
    2a44:	80 91 da 03 	lds	r24, 0x03DA
    2a48:	88 60       	ori	r24, 0x08	; 8
    2a4a:	80 93 da 03 	sts	0x03DA, r24
														send_error();
    2a4e:	0e 94 27 05 	call	0xa4e	; 0xa4e <send_error>
						else
						{//---制水------
							BENGON;
							FA_INWATERON;
							FA_FLUSHOFF;
							tdscount=6;
    2a52:	56 e0       	ldi	r21, 0x06	; 6
    2a54:	59 a3       	lds	r21, 0x59
							LCDNUM[14]&=0xef;
							//-----	计数 后判断置位
							LLJcount++;
							if(LLJcount>60)
							{   LLJcount=0;
    2a56:	1e 86       	std	Y+14, r1	; 0x0e
    2a58:	48 c0       	rjmp	.+144    	; 0x2aea <main+0x1824>
													}														
											}
										else//不相等
											{
												bkliul=tempint1;
												if((DATAlist[0x0b]&0x40)==0x40)//置位
    2a5a:	80 91 7f 04 	lds	r24, 0x047F
    2a5e:	86 ff       	sbrs	r24, 6
    2a60:	3b c0       	rjmp	.+118    	; 0x2ad8 <main+0x1812>
													{   DATAlist[0x0b]&=0xbf;
    2a62:	8f 7b       	andi	r24, 0xBF	; 191
    2a64:	80 93 7f 04 	sts	0x047F, r24
    2a68:	6f e5       	ldi	r22, 0x5F	; 95
    2a6a:	7a ee       	ldi	r23, 0xEA	; 234
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	61 50       	subi	r22, 0x01	; 1
    2a70:	70 40       	sbci	r23, 0x00	; 0
    2a72:	80 40       	sbci	r24, 0x00	; 0
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <main+0x17a8>
    2a76:	00 c0       	rjmp	.+0      	; 0x2a78 <main+0x17b2>
    2a78:	00 00       	nop
														_delay_ms(300);
														sendbit|=0x08;
    2a7a:	80 91 da 03 	lds	r24, 0x03DA
    2a7e:	88 60       	ori	r24, 0x08	; 8
    2a80:	80 93 da 03 	sts	0x03DA, r24
														send_error();
    2a84:	0e 94 27 05 	call	0xa4e	; 0xa4e <send_error>
						else
						{//---制水------
							BENGON;
							FA_INWATERON;
							FA_FLUSHOFF;
							tdscount=6;
    2a88:	76 e0       	ldi	r23, 0x06	; 6
    2a8a:	79 a3       	lds	r23, 0x59
							LCDNUM[14]&=0xef;
							//-----	计数 后判断置位
							LLJcount++;
							if(LLJcount>60)
							{   LLJcount=0;
    2a8c:	1e 86       	std	Y+14, r1	; 0x0e
    2a8e:	2d c0       	rjmp	.+90     	; 0x2aea <main+0x1824>
											}
									}
								else//不相等
									{
										bkliul=tempint1;
										if((DATAlist[0x0b]&0x40)==0x40)//置位
    2a90:	80 91 7f 04 	lds	r24, 0x047F
    2a94:	86 ff       	sbrs	r24, 6
    2a96:	24 c0       	rjmp	.+72     	; 0x2ae0 <main+0x181a>
										{   DATAlist[0x0b]&=0xbf;
    2a98:	8f 7b       	andi	r24, 0xBF	; 191
    2a9a:	80 93 7f 04 	sts	0x047F, r24
    2a9e:	8f e5       	ldi	r24, 0x5F	; 95
    2aa0:	9a ee       	ldi	r25, 0xEA	; 234
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	81 50       	subi	r24, 0x01	; 1
    2aa6:	90 40       	sbci	r25, 0x00	; 0
    2aa8:	a0 40       	sbci	r26, 0x00	; 0
    2aaa:	e1 f7       	brne	.-8      	; 0x2aa4 <main+0x17de>
    2aac:	00 c0       	rjmp	.+0      	; 0x2aae <main+0x17e8>
    2aae:	00 00       	nop
											_delay_ms(300);
											sendbit|=0x08;
    2ab0:	80 91 da 03 	lds	r24, 0x03DA
    2ab4:	88 60       	ori	r24, 0x08	; 8
    2ab6:	80 93 da 03 	sts	0x03DA, r24
											send_error();
    2aba:	0e 94 27 05 	call	0xa4e	; 0xa4e <send_error>
													}
											}
									}
								else//不相等
									{
										bkliul=tempint1;
    2abe:	1f a7       	lds	r17, 0x7f
    2ac0:	0e a7       	lds	r16, 0x7e
						else
						{//---制水------
							BENGON;
							FA_INWATERON;
							FA_FLUSHOFF;
							tdscount=6;
    2ac2:	96 e0       	ldi	r25, 0x06	; 6
    2ac4:	99 a3       	lds	r25, 0x59
							LCDNUM[14]&=0xef;
							//-----	计数 后判断置位
							LLJcount++;
							if(LLJcount>60)
							{   LLJcount=0;
    2ac6:	1e 86       	std	Y+14, r1	; 0x0e
    2ac8:	10 c0       	rjmp	.+32     	; 0x2aea <main+0x1824>
						else
						{//---制水------
							BENGON;
							FA_INWATERON;
							FA_FLUSHOFF;
							tdscount=6;
    2aca:	a6 e0       	ldi	r26, 0x06	; 6
    2acc:	a9 a3       	lds	r26, 0x59
    2ace:	0d c0       	rjmp	.+26     	; 0x2aea <main+0x1824>
    2ad0:	b6 e0       	ldi	r27, 0x06	; 6
    2ad2:	b9 a3       	lds	r27, 0x59
							LCDNUM[14]&=0xef;
							//-----	计数 后判断置位
							LLJcount++;
							if(LLJcount>60)
							{   LLJcount=0;
    2ad4:	1e 86       	std	Y+14, r1	; 0x0e
    2ad6:	09 c0       	rjmp	.+18     	; 0x2aea <main+0x1824>
						else
						{//---制水------
							BENGON;
							FA_INWATERON;
							FA_FLUSHOFF;
							tdscount=6;
    2ad8:	e6 e0       	ldi	r30, 0x06	; 6
    2ada:	e9 a3       	lds	r30, 0x59
							LCDNUM[14]&=0xef;
							//-----	计数 后判断置位
							LLJcount++;
							if(LLJcount>60)
							{   LLJcount=0;
    2adc:	1e 86       	std	Y+14, r1	; 0x0e
    2ade:	05 c0       	rjmp	.+10     	; 0x2aea <main+0x1824>
													}
											}
									}
								else//不相等
									{
										bkliul=tempint1;
    2ae0:	1f a7       	lds	r17, 0x7f
    2ae2:	0e a7       	lds	r16, 0x7e
						else
						{//---制水------
							BENGON;
							FA_INWATERON;
							FA_FLUSHOFF;
							tdscount=6;
    2ae4:	f6 e0       	ldi	r31, 0x06	; 6
    2ae6:	f9 a3       	lds	r31, 0x59
							LCDNUM[14]&=0xef;
							//-----	计数 后判断置位
							LLJcount++;
							if(LLJcount>60)
							{   LLJcount=0;
    2ae8:	1e 86       	std	Y+14, r1	; 0x0e
							}
							//--------------
						}
						
					}
				DATAlist[0x0b]&=0xfd;//有水
    2aea:	80 91 7f 04 	lds	r24, 0x047F
    2aee:	8d 7f       	andi	r24, 0xFD	; 253
    2af0:	80 93 7f 04 	sts	0x047F, r24
    2af4:	0e c0       	rjmp	.+28     	; 0x2b12 <main+0x184c>
			}
			else//缺水   01
			{   LLJcount=0;
				BENGOFF;
    2af6:	c2 98       	cbi	0x18, 2	; 24
				FA_INWATEROFF;
    2af8:	1f 98       	cbi	0x03, 7	; 3
				FA_FLUSHOFF;
    2afa:	1e 98       	cbi	0x03, 6	; 3
				LCDNUM[14]|=0x10; //缺水
    2afc:	a2 e2       	ldi	r26, 0x22	; 34
    2afe:	b4 e0       	ldi	r27, 0x04	; 4
    2b00:	8c 91       	ld	r24, X
    2b02:	80 61       	ori	r24, 0x10	; 16
    2b04:	8c 93       	st	X, r24
				DATAlist[0x0b]|=0x02;//缺水
    2b06:	80 91 7f 04 	lds	r24, 0x047F
    2b0a:	82 60       	ori	r24, 0x02	; 2
    2b0c:	80 93 7f 04 	sts	0x047F, r24
						
					}
				DATAlist[0x0b]&=0xfd;//有水
			}
			else//缺水   01
			{   LLJcount=0;
    2b10:	1e 86       	std	Y+14, r1	; 0x0e
		}
	}//flushontime==0   


//---------------------保存流量----------------------剩余量比较是否过量？------------------------
 if((fastatus&0x10)==0x10)//需要保存本次出水流量值
    2b12:	80 91 f2 02 	lds	r24, 0x02F2
    2b16:	84 ff       	sbrs	r24, 4
    2b18:	0c c1       	rjmp	.+536    	; 0x2d32 <main+0x1a6c>
	{   thistimepuls=TCNT1;
    2b1a:	2c b5       	in	r18, 0x2c	; 44
    2b1c:	3d b5       	in	r19, 0x2d	; 45
		TCNT1=0;
    2b1e:	1d bc       	out	0x2d, r1	; 45
    2b20:	1c bc       	out	0x2c, r1	; 44
		fastatus&=0xef;//本次完成
    2b22:	8f 7e       	andi	r24, 0xEF	; 239
    2b24:	80 93 f2 02 	sts	0x02F2, r24
		thistimepuls=yupulsh*256+yupulsl+thistimepuls;//加上余量
    2b28:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b2a:	b8 87       	std	Y+8, r27	; 0x08
    2b2c:	1f 82       	std	Y+7, r1	; 0x07
    2b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b30:	98 85       	ldd	r25, Y+8	; 0x08
    2b32:	ec 81       	ldd	r30, Y+4	; 0x04
    2b34:	8e 0f       	add	r24, r30
    2b36:	91 1d       	adc	r25, r1
    2b38:	28 0f       	add	r18, r24
    2b3a:	39 1f       	adc	r19, r25
		temp=thistimepuls/pule1l;//除以1升的脉冲数
    2b3c:	c9 01       	movw	r24, r18
    2b3e:	6d 81       	ldd	r22, Y+5	; 0x05
    2b40:	7e 81       	ldd	r23, Y+6	; 0x06
    2b42:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodhi4>
    2b46:	16 2f       	mov	r17, r22
		yupulsh=(thistimepuls-temp*pule1l)/256;
    2b48:	46 2f       	mov	r20, r22
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	5b 87       	std	Y+11, r21	; 0x0b
    2b4e:	4a 87       	std	Y+10, r20	; 0x0a
    2b50:	6d 81       	ldd	r22, Y+5	; 0x05
    2b52:	7e 81       	ldd	r23, Y+6	; 0x06
    2b54:	46 9f       	mul	r20, r22
    2b56:	c0 01       	movw	r24, r0
    2b58:	47 9f       	mul	r20, r23
    2b5a:	90 0d       	add	r25, r0
    2b5c:	56 9f       	mul	r21, r22
    2b5e:	90 0d       	add	r25, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	a9 01       	movw	r20, r18
    2b64:	48 1b       	sub	r20, r24
    2b66:	59 0b       	sbc	r21, r25
    2b68:	5c 87       	std	Y+12, r21	; 0x0c
		yupulsl=thistimepuls-temp*pule1l-yupulsl*256;
    2b6a:	16 9f       	mul	r17, r22
    2b6c:	80 2d       	mov	r24, r0
    2b6e:	11 24       	eor	r1, r1
    2b70:	72 2f       	mov	r23, r18
    2b72:	78 1b       	sub	r23, r24
    2b74:	7c 83       	std	Y+4, r23	; 0x04
		EEPROM_write(35,yupulsh);
    2b76:	83 e2       	ldi	r24, 0x23	; 35
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	65 2f       	mov	r22, r21
    2b7c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
		EEPROM_write(36,yupulsl);//保存余量
    2b80:	84 e2       	ldi	r24, 0x24	; 36
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	6c 81       	ldd	r22, Y+4	; 0x04
    2b86:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
		if(temp>0)//需要保存滤芯数值，总量
    2b8a:	11 23       	and	r17, r17
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <main+0x18ca>
    2b8e:	d1 c0       	rjmp	.+418    	; 0x2d32 <main+0x1a6c>
			{   
				tempint1=DATAlist[0x24]*256+DATAlist[0x25]+temp; //滤芯1
    2b90:	81 2f       	mov	r24, r17
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9b 83       	std	Y+3, r25	; 0x03
    2b96:	8a 83       	std	Y+2, r24	; 0x02
    2b98:	d5 01       	movw	r26, r10
    2b9a:	bc 91       	ld	r27, X
    2b9c:	b8 8b       	std	Y+16, r27	; 0x10
    2b9e:	1f 86       	std	Y+15, r1	; 0x0f
    2ba0:	ee a1       	lds	r30, 0x4e
    2ba2:	ff a1       	lds	r31, 0x4f
    2ba4:	80 81       	ld	r24, Z
    2ba6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ba8:	38 89       	ldd	r19, Y+16	; 0x10
    2baa:	28 0f       	add	r18, r24
    2bac:	31 1d       	adc	r19, r1
    2bae:	c9 01       	movw	r24, r18
    2bb0:	4a 81       	ldd	r20, Y+2	; 0x02
    2bb2:	5b 81       	ldd	r21, Y+3	; 0x03
    2bb4:	84 0f       	add	r24, r20
    2bb6:	95 1f       	adc	r25, r21
				DATAlist[0x24]=tempint1/256;
    2bb8:	d5 01       	movw	r26, r10
    2bba:	9c 93       	st	X, r25
				DATAlist[0x25]=tempint1-(DATAlist[0x24]*256);
    2bbc:	80 83       	st	Z, r24
				tempint1=DATAlist[0x26]*256+DATAlist[0x27]+temp; //滤芯2
    2bbe:	12 96       	adiw	r26, 0x02	; 2
    2bc0:	bc 91       	ld	r27, X
    2bc2:	ba 8b       	std	Y+18, r27	; 0x12
    2bc4:	19 8a       	std	Y+17, r1	; 0x11
    2bc6:	f5 01       	movw	r30, r10
    2bc8:	83 81       	ldd	r24, Z+3	; 0x03
    2bca:	29 89       	ldd	r18, Y+17	; 0x11
    2bcc:	3a 89       	ldd	r19, Y+18	; 0x12
    2bce:	28 0f       	add	r18, r24
    2bd0:	31 1d       	adc	r19, r1
    2bd2:	c9 01       	movw	r24, r18
    2bd4:	84 0f       	add	r24, r20
    2bd6:	95 1f       	adc	r25, r21
				DATAlist[0x26]=tempint1/256;
    2bd8:	92 83       	std	Z+2, r25	; 0x02
				DATAlist[0x27]=tempint1-(DATAlist[0x26]*256);
    2bda:	83 83       	std	Z+3, r24	; 0x03
				tempint1=DATAlist[0x28]*256+DATAlist[0x29]+temp; //滤芯3
    2bdc:	34 81       	ldd	r19, Z+4	; 0x04
    2bde:	3c 8b       	std	Y+20, r19	; 0x14
    2be0:	1b 8a       	std	Y+19, r1	; 0x13
    2be2:	85 81       	ldd	r24, Z+5	; 0x05
    2be4:	4b 89       	ldd	r20, Y+19	; 0x13
    2be6:	5c 89       	ldd	r21, Y+20	; 0x14
    2be8:	48 0f       	add	r20, r24
    2bea:	51 1d       	adc	r21, r1
    2bec:	ca 01       	movw	r24, r20
    2bee:	6a 81       	ldd	r22, Y+2	; 0x02
    2bf0:	7b 81       	ldd	r23, Y+3	; 0x03
    2bf2:	86 0f       	add	r24, r22
    2bf4:	97 1f       	adc	r25, r23
				DATAlist[0x28]=tempint1/256;
    2bf6:	94 83       	std	Z+4, r25	; 0x04
				DATAlist[0x29]=tempint1-(DATAlist[0x28]*256);
    2bf8:	85 83       	std	Z+5, r24	; 0x05
				tempint1=DATAlist[0x2A]*256+DATAlist[0x2B]+temp; //滤芯4
    2bfa:	76 81       	ldd	r23, Z+6	; 0x06
    2bfc:	7e 8b       	std	Y+22, r23	; 0x16
    2bfe:	1d 8a       	std	Y+21, r1	; 0x15
    2c00:	87 81       	ldd	r24, Z+7	; 0x07
    2c02:	ad 89       	ldd	r26, Y+21	; 0x15
    2c04:	be 89       	ldd	r27, Y+22	; 0x16
    2c06:	a8 0f       	add	r26, r24
    2c08:	b1 1d       	adc	r27, r1
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c10:	8e 0f       	add	r24, r30
    2c12:	9f 1f       	adc	r25, r31
				DATAlist[0x2A]=tempint1/256;
    2c14:	d5 01       	movw	r26, r10
    2c16:	16 96       	adiw	r26, 0x06	; 6
    2c18:	9c 93       	st	X, r25
    2c1a:	16 97       	sbiw	r26, 0x06	; 6
				DATAlist[0x2B]=tempint1-(DATAlist[0x2A]*256);
    2c1c:	17 96       	adiw	r26, 0x07	; 7
    2c1e:	8c 93       	st	X, r24
    2c20:	17 97       	sbiw	r26, 0x07	; 7
				tempint1=DATAlist[0x2C]*256+DATAlist[0x2D]+temp; //滤芯5
    2c22:	18 96       	adiw	r26, 0x08	; 8
    2c24:	bc 91       	ld	r27, X
    2c26:	b8 8f       	std	Y+24, r27	; 0x18
    2c28:	1f 8a       	std	Y+23, r1	; 0x17
    2c2a:	f5 01       	movw	r30, r10
    2c2c:	81 85       	ldd	r24, Z+9	; 0x09
    2c2e:	2f 89       	ldd	r18, Y+23	; 0x17
    2c30:	38 8d       	ldd	r19, Y+24	; 0x18
    2c32:	28 0f       	add	r18, r24
    2c34:	31 1d       	adc	r19, r1
    2c36:	c9 01       	movw	r24, r18
    2c38:	4a 81       	ldd	r20, Y+2	; 0x02
    2c3a:	5b 81       	ldd	r21, Y+3	; 0x03
    2c3c:	84 0f       	add	r24, r20
    2c3e:	95 1f       	adc	r25, r21
				DATAlist[0x2C]=tempint1/256;
    2c40:	90 87       	std	Z+8, r25	; 0x08
				DATAlist[0x2D]=tempint1-(DATAlist[0x2C]*256);
    2c42:	81 87       	std	Z+9, r24	; 0x09
				tempint1=DATAlist[0x2E]*256+DATAlist[0x2F]+temp; //滤芯6
    2c44:	52 85       	ldd	r21, Z+10	; 0x0a
    2c46:	5a 8f       	std	Y+26, r21	; 0x1a
    2c48:	19 8e       	std	Y+25, r1	; 0x19
    2c4a:	83 85       	ldd	r24, Z+11	; 0x0b
    2c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c50:	68 0f       	add	r22, r24
    2c52:	71 1d       	adc	r23, r1
    2c54:	cb 01       	movw	r24, r22
    2c56:	aa 81       	ldd	r26, Y+2	; 0x02
    2c58:	bb 81       	ldd	r27, Y+3	; 0x03
    2c5a:	8a 0f       	add	r24, r26
    2c5c:	9b 1f       	adc	r25, r27
				DATAlist[0x2E]=tempint1/256;
    2c5e:	92 87       	std	Z+10, r25	; 0x0a
				DATAlist[0x2F]=tempint1-(DATAlist[0x2E]*256);
    2c60:	83 87       	std	Z+11, r24	; 0x0b
    2c62:	85 01       	movw	r16, r10
    2c64:	e6 e5       	ldi	r30, 0x56	; 86
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	fa af       	sts	0x7a, r31
    2c6a:	e9 af       	sts	0x79, r30
				for(i=0;i<12;i++)			//menmory to 86+12==98  保存数据
				{
					EEPROM_write((86+i),DATAlist[0x24+i]);
    2c6c:	d8 01       	movw	r26, r16
    2c6e:	6d 91       	ld	r22, X+
    2c70:	8d 01       	movw	r16, r26
    2c72:	89 ad       	sts	0x69, r24
    2c74:	9a ad       	sts	0x6a, r25
    2c76:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
    2c7a:	e9 ad       	sts	0x69, r30
    2c7c:	fa ad       	sts	0x6a, r31
    2c7e:	31 96       	adiw	r30, 0x01	; 1
    2c80:	fa af       	sts	0x7a, r31
    2c82:	e9 af       	sts	0x79, r30
				DATAlist[0x2C]=tempint1/256;
				DATAlist[0x2D]=tempint1-(DATAlist[0x2C]*256);
				tempint1=DATAlist[0x2E]*256+DATAlist[0x2F]+temp; //滤芯6
				DATAlist[0x2E]=tempint1/256;
				DATAlist[0x2F]=tempint1-(DATAlist[0x2E]*256);
				for(i=0;i<12;i++)			//menmory to 86+12==98  保存数据
    2c84:	e2 36       	cpi	r30, 0x62	; 98
    2c86:	f1 05       	cpc	r31, r1
    2c88:	89 f7       	brne	.-30     	; 0x2c6c <main+0x19a6>
				{
					EEPROM_write((86+i),DATAlist[0x24+i]);
				}
				tempint1=DATAlist[0x3b]*256+DATAlist[0x3c]+temp; 
    2c8a:	af ea       	ldi	r26, 0xAF	; 175
    2c8c:	b4 e0       	ldi	r27, 0x04	; 4
    2c8e:	bc 91       	ld	r27, X
    2c90:	bc 8f       	std	Y+28, r27	; 0x1c
    2c92:	1b 8e       	std	Y+27, r1	; 0x1b
    2c94:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2c96:	f8 a1       	lds	r31, 0x48
    2c98:	80 81       	ld	r24, Z
    2c9a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2c9c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2c9e:	28 0f       	add	r18, r24
    2ca0:	31 1d       	adc	r19, r1
    2ca2:	c9 01       	movw	r24, r18
    2ca4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ca6:	5b 81       	ldd	r21, Y+3	; 0x03
    2ca8:	84 0f       	add	r24, r20
    2caa:	95 1f       	adc	r25, r21
				DATAlist[0x3b]=tempint1/256;
    2cac:	69 2f       	mov	r22, r25
    2cae:	9c 93       	st	X, r25
				DATAlist[0x3c]=tempint1-(DATAlist[0x3b]*256);
    2cb0:	80 83       	st	Z, r24

				tempint1=DATAlist[0x3d]*256+DATAlist[0x3e];//+temp; 
    2cb2:	b0 91 b1 04 	lds	r27, 0x04B1
    2cb6:	be 8f       	std	Y+30, r27	; 0x1e
    2cb8:	1d 8e       	std	Y+29, r1	; 0x1d
    2cba:	80 91 b2 04 	lds	r24, 0x04B2
    2cbe:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2cc0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2cc2:	e8 0f       	add	r30, r24
    2cc4:	f1 1d       	adc	r31, r1
    2cc6:	cf 01       	movw	r24, r30
				if(tempint1>temp)
    2cc8:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cca:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ccc:	2e 17       	cp	r18, r30
    2cce:	3f 07       	cpc	r19, r31
    2cd0:	18 f4       	brcc	.+6      	; 0x2cd8 <main+0x1a12>
					{
						tempint1=tempint1-temp;
    2cd2:	82 1b       	sub	r24, r18
    2cd4:	93 0b       	sbc	r25, r19
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <main+0x1a16>
					}
				else
					{
						tempint1=0;
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
					}
				DATAlist[0x3d]=tempint1/256;
    2cdc:	a1 eb       	ldi	r26, 0xB1	; 177
    2cde:	b4 e0       	ldi	r27, 0x04	; 4
    2ce0:	9c 93       	st	X, r25
				DATAlist[0x3e]=tempint1-(DATAlist[0x3d]*256);
    2ce2:	e8 a5       	lds	r30, 0x68
    2ce4:	f9 a5       	lds	r31, 0x69
    2ce6:	80 83       	st	Z, r24
				EEPROM_write(28,DATAlist[0x3b]);
    2ce8:	8c e1       	ldi	r24, 0x1C	; 28
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
				EEPROM_write(29,DATAlist[0x3c]);
    2cf0:	8d e1       	ldi	r24, 0x1D	; 29
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	60 91 b0 04 	lds	r22, 0x04B0
    2cf8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
				EEPROM_write(30,DATAlist[0x3d]);
    2cfc:	8e e1       	ldi	r24, 0x1E	; 30
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a1 eb       	ldi	r26, 0xB1	; 177
    2d02:	b4 e0       	ldi	r27, 0x04	; 4
    2d04:	6c 91       	ld	r22, X
    2d06:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
				EEPROM_write(31,DATAlist[0x3e]);
    2d0a:	8f e1       	ldi	r24, 0x1F	; 31
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	e8 a5       	lds	r30, 0x68
    2d10:	f9 a5       	lds	r31, 0x69
    2d12:	60 81       	ld	r22, Z
    2d14:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
    2d18:	87 ea       	ldi	r24, 0xA7	; 167
    2d1a:	91 e6       	ldi	r25, 0x61	; 97
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <main+0x1a56>
    2d20:	00 c0       	rjmp	.+0      	; 0x2d22 <main+0x1a5c>
    2d22:	00 00       	nop
				//----发送数据-----
				_delay_ms(100);
				sendbit|=0x04;
    2d24:	80 91 da 03 	lds	r24, 0x03DA
    2d28:	84 60       	ori	r24, 0x04	; 4
    2d2a:	80 93 da 03 	sts	0x03DA, r24
				send_filter();
    2d2e:	0e 94 86 05 	call	0xb0c	; 0xb0c <send_filter>
			}
	}


//ONE.22---
 if(LCDmode==0) REFRESH_ALLRAM_1726();
    2d32:	ff 20       	and	r15, r15
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <main+0x1a74>
    2d36:	0e 94 38 09 	call	0x1270	; 0x1270 <REFRESH_ALLRAM_1726>
 //HT1721C_STB_1;
 //----是否需要闪烁------
	flashcount++;
    2d3a:	73 94       	inc	r7
	if(flashcount>6)flashcount=0;
    2d3c:	96 e0       	ldi	r25, 0x06	; 6
    2d3e:	97 15       	cp	r25, r7
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <main+0x1a7e>
    2d42:	77 24       	eor	r7, r7
 } //LCDMODE==0
//----------------------------------LCDMODE==0 UP----------------------------------------------18260



if(LCDmode==42)
    2d44:	aa e2       	ldi	r26, 0x2A	; 42
    2d46:	fa 16       	cp	r15, r26
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <main+0x1a86>
    2d4a:	41 c0       	rjmp	.+130    	; 0x2dce <main+0x1b08>
    2d4c:	2f e3       	ldi	r18, 0x3F	; 63
    2d4e:	3d e0       	ldi	r19, 0x0D	; 13
    2d50:	43 e0       	ldi	r20, 0x03	; 3
    2d52:	21 50       	subi	r18, 0x01	; 1
    2d54:	30 40       	sbci	r19, 0x00	; 0
    2d56:	40 40       	sbci	r20, 0x00	; 0
    2d58:	e1 f7       	brne	.-8      	; 0x2d52 <main+0x1a8c>
    2d5a:	00 c0       	rjmp	.+0      	; 0x2d5c <main+0x1a96>
    2d5c:	00 00       	nop
  {
	_delay_ms(1000);
	if((dealbyte&0x01)==0x01)//开机
    2d5e:	80 91 e0 03 	lds	r24, 0x03E0
    2d62:	80 ff       	sbrs	r24, 0
    2d64:	2d c0       	rjmp	.+90     	; 0x2dc0 <main+0x1afa>
	{
		send_reply(0);
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
		HT1721C_BL_1;
    2d6c:	1a 9a       	sbi	0x03, 2	; 3
		LCDmode=0;
		dealbyte&=0xfe;
    2d6e:	80 91 e0 03 	lds	r24, 0x03E0
    2d72:	8e 7f       	andi	r24, 0xFE	; 254
    2d74:	80 93 e0 03 	sts	0x03E0, r24
		
		DATAlist[0x20]=0x01;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	a4 e9       	ldi	r26, 0x94	; 148
    2d7c:	b4 e0       	ldi	r27, 0x04	; 4
    2d7e:	8c 93       	st	X, r24
		DATAlist[0x21]=0x00;
    2d80:	eb a5       	lds	r30, 0x6b
    2d82:	fc a5       	lds	r31, 0x6c
    2d84:	10 82       	st	Z, r1
		fastatus|=0x08;//发送一次开机状态
    2d86:	80 91 f2 02 	lds	r24, 0x02F2
    2d8a:	88 60       	ori	r24, 0x08	; 8
    2d8c:	80 93 f2 02 	sts	0x02F2, r24
    2d90:	2f e3       	ldi	r18, 0x3F	; 63
    2d92:	3d e0       	ldi	r19, 0x0D	; 13
    2d94:	43 e0       	ldi	r20, 0x03	; 3
    2d96:	21 50       	subi	r18, 0x01	; 1
    2d98:	30 40       	sbci	r19, 0x00	; 0
    2d9a:	40 40       	sbci	r20, 0x00	; 0
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <main+0x1ad0>
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <main+0x1ada>
    2da0:	00 00       	nop
		_delay_ms(1000);
		send_status();
    2da2:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
    2da6:	4f e3       	ldi	r20, 0x3F	; 63
    2da8:	5d e0       	ldi	r21, 0x0D	; 13
    2daa:	63 e0       	ldi	r22, 0x03	; 3
    2dac:	41 50       	subi	r20, 0x01	; 1
    2dae:	50 40       	sbci	r21, 0x00	; 0
    2db0:	60 40       	sbci	r22, 0x00	; 0
    2db2:	e1 f7       	brne	.-8      	; 0x2dac <main+0x1ae6>
    2db4:	00 c0       	rjmp	.+0      	; 0x2db6 <main+0x1af0>
    2db6:	00 00       	nop
		_delay_ms(1000);
		BEEP(50);
    2db8:	82 e3       	ldi	r24, 0x32	; 50
    2dba:	0e 94 92 02 	call	0x524	; 0x524 <BEEP>
	_delay_ms(1000);
	if((dealbyte&0x01)==0x01)//开机
	{
		send_reply(0);
		HT1721C_BL_1;
		LCDmode=0;
    2dbe:	ff 24       	eor	r15, r15
		_delay_ms(1000);
		send_status();
		_delay_ms(1000);
		BEEP(50);
	}  
	sendpuls++;
    2dc0:	63 94       	inc	r6
	if(sendpuls>60)//200-22s
    2dc2:	5c e3       	ldi	r21, 0x3C	; 60
    2dc4:	56 15       	cp	r21, r6
    2dc6:	18 f4       	brcc	.+6      	; 0x2dce <main+0x1b08>
		{
			send_status();
    2dc8:	0e 94 77 06 	call	0xcee	; 0xcee <send_status>
			sendpuls=0;
    2dcc:	66 24       	eor	r6, r6
			//BEEP(20);
		}
  }

 if(LCDmode==48)
    2dce:	60 e3       	ldi	r22, 0x30	; 48
    2dd0:	f6 16       	cp	r15, r22
    2dd2:	11 f0       	breq	.+4      	; 0x2dd8 <main+0x1b12>
    2dd4:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <main+0x770>
    2dd8:	8f eb       	ldi	r24, 0xBF	; 191
    2dda:	97 e2       	ldi	r25, 0x27	; 39
    2ddc:	a9 e0       	ldi	r26, 0x09	; 9
    2dde:	81 50       	subi	r24, 0x01	; 1
    2de0:	90 40       	sbci	r25, 0x00	; 0
    2de2:	a0 40       	sbci	r26, 0x00	; 0
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <main+0x1b18>
    2de6:	00 c0       	rjmp	.+0      	; 0x2de8 <main+0x1b22>
    2de8:	00 00       	nop
	{
		_delay_ms(3000);
		if(DATAlist[0x18]==0xaa)//许能否？
    2dea:	d2 01       	movw	r26, r4
    2dec:	8c 91       	ld	r24, X
    2dee:	8a 3a       	cpi	r24, 0xAA	; 170
    2df0:	11 f0       	breq	.+4      	; 0x2df6 <main+0x1b30>
    2df2:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <main+0x770>
			{
				send_reply(0);
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	0e 94 a9 04 	call	0x952	; 0x952 <send_reply>
				HT1721C_BL_1;
    2dfc:	1a 9a       	sbi	0x03, 2	; 3
				LCDmode=0;
				EEPROM_write(25,DATAlist[0x18]);
    2dfe:	89 e1       	ldi	r24, 0x19	; 25
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	f2 01       	movw	r30, r4
    2e04:	60 81       	ld	r22, Z
    2e06:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write>
				dealbyte&=0x7f;
    2e0a:	80 91 e0 03 	lds	r24, 0x03E0
    2e0e:	8f 77       	andi	r24, 0x7F	; 127
    2e10:	80 93 e0 03 	sts	0x03E0, r24
				
				DATAlist[0x20]=0x01;
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	ac a1       	lds	r26, 0x4c
    2e18:	bd a1       	lds	r27, 0x4d
    2e1a:	8c 93       	st	X, r24
				DATAlist[0x21]=0x00;
    2e1c:	f2 01       	movw	r30, r4
    2e1e:	11 86       	std	Z+9, r1	; 0x09
				fastatus|=0x08;//发送一次开机状态
    2e20:	80 91 f2 02 	lds	r24, 0x02F2
    2e24:	88 60       	ori	r24, 0x08	; 8
    2e26:	80 93 f2 02 	sts	0x02F2, r24
    2e2a:	2f eb       	ldi	r18, 0xBF	; 191
    2e2c:	37 e2       	ldi	r19, 0x27	; 39
    2e2e:	49 e0       	ldi	r20, 0x09	; 9
    2e30:	21 50       	subi	r18, 0x01	; 1
    2e32:	30 40       	sbci	r19, 0x00	; 0
    2e34:	40 40       	sbci	r20, 0x00	; 0
    2e36:	e1 f7       	brne	.-8      	; 0x2e30 <main+0x1b6a>
    2e38:	00 c0       	rjmp	.+0      	; 0x2e3a <main+0x1b74>
    2e3a:	00 00       	nop
				temp=100;
				_delay_ms(3000);
				BEEP(50);
    2e3c:	82 e3       	ldi	r24, 0x32	; 50
    2e3e:	0e 94 92 02 	call	0x524	; 0x524 <BEEP>
		_delay_ms(3000);
		if(DATAlist[0x18]==0xaa)//许能否？
			{
				send_reply(0);
				HT1721C_BL_1;
				LCDmode=0;
    2e42:	ff 24       	eor	r15, r15
    2e44:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <main+0x770>
    2e48:	8b e7       	ldi	r24, 0x7B	; 123
    2e4a:	92 e9       	ldi	r25, 0x92	; 146
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <main+0x1b86>
    2e50:	00 c0       	rjmp	.+0      	; 0x2e52 <main+0x1b8c>
    2e52:	00 00       	nop
    2e54:	be cc       	rjmp	.-1668   	; 0x27d2 <main+0x150c>
    2e56:	af e4       	ldi	r26, 0x4F	; 79
    2e58:	b3 ec       	ldi	r27, 0xC3	; 195
    2e5a:	11 97       	sbiw	r26, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <main+0x1b94>
    2e5e:	00 c0       	rjmp	.+0      	; 0x2e60 <main+0x1b9a>
    2e60:	00 00       	nop
    2e62:	21 cd       	rjmp	.-1470   	; 0x28a6 <main+0x15e0>
    2e64:	e7 ea       	ldi	r30, 0xA7	; 167
    2e66:	f1 e6       	ldi	r31, 0x61	; 97
    2e68:	31 97       	sbiw	r30, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <main+0x1ba2>
    2e6c:	00 c0       	rjmp	.+0      	; 0x2e6e <main+0x1ba8>
    2e6e:	00 00       	nop
    2e70:	69 cd       	rjmp	.-1326   	; 0x2944 <main+0x167e>

00002e72 <WRITE_1DATA_1726>:
}
//-----------------------------------------------
//功能：填充TM1726的固定地址和固定数据
//-----------------------------------------------
void WRITE_1DATA_1726(unsigned char addr,unsigned char dat1)
{	TM1726_SDA_1;
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	d8 2f       	mov	r29, r24
    2e78:	c6 2f       	mov	r28, r22
    2e7a:	d8 9a       	sbi	0x1b, 0	; 27
	TM1726_SCL_1;
    2e7c:	d9 9a       	sbi	0x1b, 1	; 27
	TM1726_start();
    2e7e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TM1726_start>
    2e82:	83 ec       	ldi	r24, 0xC3	; 195
    2e84:	99 e0       	ldi	r25, 0x09	; 9
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <WRITE_1DATA_1726+0x14>
    2e8a:	00 c0       	rjmp	.+0      	; 0x2e8c <WRITE_1DATA_1726+0x1a>
    2e8c:	00 00       	nop
	_delay_ms(10);
	WRITE_DATA_1726(0xc0+addr);//
    2e8e:	8d 2f       	mov	r24, r29
    2e90:	80 54       	subi	r24, 0x40	; 64
    2e92:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
	TM1726_SDA_1;
    2e96:	d8 9a       	sbi	0x1b, 0	; 27
	TM1726_SCL_1;
    2e98:	d9 9a       	sbi	0x1b, 1	; 27
    2e9a:	83 ec       	ldi	r24, 0xC3	; 195
    2e9c:	99 e0       	ldi	r25, 0x09	; 9
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <WRITE_1DATA_1726+0x2c>
    2ea2:	00 c0       	rjmp	.+0      	; 0x2ea4 <WRITE_1DATA_1726+0x32>
    2ea4:	00 00       	nop
	_delay_ms(10);
	WRITE_DATA_1726(dat1);
    2ea6:	8c 2f       	mov	r24, r28
    2ea8:	0e 94 08 09 	call	0x1210	; 0x1210 <WRITE_DATA_1726>
	TM1726_stop();
    2eac:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TM1726_stop>

}
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <gprs_init>:
//-------------------------------------------
//***********************************************************************
void gprs_init(void)
{   uchar t;
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29

//-----

    rx1poit=0;
    2eba:	10 92 fb 03 	sts	0x03FB, r1
	for(ip=&sendhx[0];ip<(&sendhx[0]+4);ip++) //ATE0
    2ebe:	86 e6       	ldi	r24, 0x66	; 102
    2ec0:	93 e0       	ldi	r25, 0x03	; 3
    2ec2:	90 93 04 04 	sts	0x0404, r25
    2ec6:	80 93 03 04 	sts	0x0403, r24
    2eca:	9c 01       	movw	r18, r24
    2ecc:	2c 5f       	subi	r18, 0xFC	; 252
    2ece:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed0:	82 17       	cp	r24, r18
    2ed2:	93 07       	cpc	r25, r19
    2ed4:	90 f4       	brcc	.+36     	; 0x2efa <gprs_init+0x44>
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	ca e6       	ldi	r28, 0x6A	; 106
    2eda:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
    2edc:	80 81       	ld	r24, Z
    2ede:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
{   uchar t;

//-----

    rx1poit=0;
	for(ip=&sendhx[0];ip<(&sendhx[0]+4);ip++) //ATE0
    2ee2:	e0 91 03 04 	lds	r30, 0x0403
    2ee6:	f0 91 04 04 	lds	r31, 0x0404
    2eea:	31 96       	adiw	r30, 0x01	; 1
    2eec:	f0 93 04 04 	sts	0x0404, r31
    2ef0:	e0 93 03 04 	sts	0x0403, r30
    2ef4:	ec 17       	cp	r30, r28
    2ef6:	fd 07       	cpc	r31, r29
    2ef8:	88 f3       	brcs	.-30     	; 0x2edc <gprs_init+0x26>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
    2efa:	8d e0       	ldi	r24, 0x0D	; 13
    2efc:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
    2f00:	8a e0       	ldi	r24, 0x0A	; 10
    2f02:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
    2f06:	10 92 36 04 	sts	0x0436, r1
    2f0a:	8f e4       	ldi	r24, 0x4F	; 79
    2f0c:	93 ec       	ldi	r25, 0xC3	; 195
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <gprs_init+0x58>
    2f12:	00 c0       	rjmp	.+0      	; 0x2f14 <gprs_init+0x5e>
    2f14:	00 00       	nop
	_delay_ms(200);
	rx1poit=0;
    2f16:	10 92 fb 03 	sts	0x03FB, r1
    2f1a:	24 e6       	ldi	r18, 0x64	; 100
	for(t=0;t<100;t++)
	{
		if(rx1buffer[rx1poit-3]==0x4F) t=101;
    2f1c:	85 e3       	ldi	r24, 0x35	; 53
    2f1e:	94 e0       	ldi	r25, 0x04	; 4
    2f20:	30 91 fb 03 	lds	r19, 0x03FB
    2f24:	fc 01       	movw	r30, r24
    2f26:	e3 0f       	add	r30, r19
    2f28:	f1 1d       	adc	r31, r1
    2f2a:	33 97       	sbiw	r30, 0x03	; 3
    2f2c:	30 81       	ld	r19, Z
    2f2e:	3f 34       	cpi	r19, 0x4F	; 79
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <gprs_init+0x7e>
    2f32:	c6 c0       	rjmp	.+396    	; 0x30c0 <gprs_init+0x20a>
    2f34:	ab e7       	ldi	r26, 0x7B	; 123
    2f36:	b2 e9       	ldi	r27, 0x92	; 146
    2f38:	11 97       	sbiw	r26, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <gprs_init+0x82>
    2f3c:	00 c0       	rjmp	.+0      	; 0x2f3e <gprs_init+0x88>
    2f3e:	00 00       	nop
    2f40:	21 50       	subi	r18, 0x01	; 1
	putchar1(0x0a);
	//---wait reply--
	rx1buffer[1]=0x00;
	_delay_ms(200);
	rx1poit=0;
	for(t=0;t<100;t++)
    2f42:	71 f7       	brne	.-36     	; 0x2f20 <gprs_init+0x6a>
    2f44:	e7 ea       	ldi	r30, 0xA7	; 167
    2f46:	f1 e6       	ldi	r31, 0x61	; 97
    2f48:	31 97       	sbiw	r30, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <gprs_init+0x92>
    2f4c:	00 c0       	rjmp	.+0      	; 0x2f4e <gprs_init+0x98>
    2f4e:	00 00       	nop
		//BEEP(100);
	}
	_delay_ms(100);

	//-----------------
	rx1poit=0;
    2f50:	10 92 fb 03 	sts	0x03FB, r1
	for(ip=&sendnet[0];ip<(&sendnet[0]+37);ip++) 
    2f54:	8a e0       	ldi	r24, 0x0A	; 10
    2f56:	93 e0       	ldi	r25, 0x03	; 3
    2f58:	90 93 04 04 	sts	0x0404, r25
    2f5c:	80 93 03 04 	sts	0x0403, r24
    2f60:	9c 01       	movw	r18, r24
    2f62:	2b 5d       	subi	r18, 0xDB	; 219
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	82 17       	cp	r24, r18
    2f68:	93 07       	cpc	r25, r19
    2f6a:	90 f4       	brcc	.+36     	; 0x2f90 <gprs_init+0xda>
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	cf e2       	ldi	r28, 0x2F	; 47
    2f70:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
    2f72:	80 81       	ld	r24, Z
    2f74:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	}
	_delay_ms(100);

	//-----------------
	rx1poit=0;
	for(ip=&sendnet[0];ip<(&sendnet[0]+37);ip++) 
    2f78:	e0 91 03 04 	lds	r30, 0x0403
    2f7c:	f0 91 04 04 	lds	r31, 0x0404
    2f80:	31 96       	adiw	r30, 0x01	; 1
    2f82:	f0 93 04 04 	sts	0x0404, r31
    2f86:	e0 93 03 04 	sts	0x0403, r30
    2f8a:	ec 17       	cp	r30, r28
    2f8c:	fd 07       	cpc	r31, r29
    2f8e:	88 f3       	brcs	.-30     	; 0x2f72 <gprs_init+0xbc>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
    2f90:	8d e0       	ldi	r24, 0x0D	; 13
    2f92:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
    2f96:	8a e0       	ldi	r24, 0x0A	; 10
    2f98:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
    2f9c:	10 92 36 04 	sts	0x0436, r1
    2fa0:	4f e7       	ldi	r20, 0x7F	; 127
    2fa2:	5d e8       	ldi	r21, 0x8D	; 141
    2fa4:	6b e5       	ldi	r22, 0x5B	; 91
    2fa6:	41 50       	subi	r20, 0x01	; 1
    2fa8:	50 40       	sbci	r21, 0x00	; 0
    2faa:	60 40       	sbci	r22, 0x00	; 0
    2fac:	e1 f7       	brne	.-8      	; 0x2fa6 <gprs_init+0xf0>
    2fae:	00 c0       	rjmp	.+0      	; 0x2fb0 <gprs_init+0xfa>
    2fb0:	00 00       	nop
    2fb2:	6f e7       	ldi	r22, 0x7F	; 127
    2fb4:	7d e8       	ldi	r23, 0x8D	; 141
    2fb6:	8b e5       	ldi	r24, 0x5B	; 91
    2fb8:	61 50       	subi	r22, 0x01	; 1
    2fba:	70 40       	sbci	r23, 0x00	; 0
    2fbc:	80 40       	sbci	r24, 0x00	; 0
    2fbe:	e1 f7       	brne	.-8      	; 0x2fb8 <gprs_init+0x102>
    2fc0:	00 c0       	rjmp	.+0      	; 0x2fc2 <gprs_init+0x10c>
    2fc2:	00 00       	nop
    2fc4:	8f e7       	ldi	r24, 0x7F	; 127
    2fc6:	94 e8       	ldi	r25, 0x84	; 132
    2fc8:	ae e1       	ldi	r26, 0x1E	; 30
    2fca:	81 50       	subi	r24, 0x01	; 1
    2fcc:	90 40       	sbci	r25, 0x00	; 0
    2fce:	a0 40       	sbci	r26, 0x00	; 0
    2fd0:	e1 f7       	brne	.-8      	; 0x2fca <gprs_init+0x114>
    2fd2:	00 c0       	rjmp	.+0      	; 0x2fd4 <gprs_init+0x11e>
    2fd4:	00 00       	nop
    2fd6:	4f e7       	ldi	r20, 0x7F	; 127
    2fd8:	54 e8       	ldi	r21, 0x84	; 132
    2fda:	6e e1       	ldi	r22, 0x1E	; 30
    2fdc:	41 50       	subi	r20, 0x01	; 1
    2fde:	50 40       	sbci	r21, 0x00	; 0
    2fe0:	60 40       	sbci	r22, 0x00	; 0
    2fe2:	e1 f7       	brne	.-8      	; 0x2fdc <gprs_init+0x126>
    2fe4:	00 c0       	rjmp	.+0      	; 0x2fe6 <gprs_init+0x130>
    2fe6:	00 00       	nop
    2fe8:	28 ec       	ldi	r18, 0xC8	; 200
	_delay_ms(10000);
	_delay_ms(10000);
	
	for(t=0;t<200;t++)
	{
		if(rx1buffer[rx1poit-3]==0x4f) t=201;
    2fea:	85 e3       	ldi	r24, 0x35	; 53
    2fec:	94 e0       	ldi	r25, 0x04	; 4
    2fee:	30 91 fb 03 	lds	r19, 0x03FB
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e3 0f       	add	r30, r19
    2ff6:	f1 1d       	adc	r31, r1
    2ff8:	33 97       	sbiw	r30, 0x03	; 3
    2ffa:	30 81       	ld	r19, Z
    2ffc:	3f 34       	cpi	r19, 0x4F	; 79
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <gprs_init+0x14c>
    3000:	66 c0       	rjmp	.+204    	; 0x30ce <gprs_init+0x218>
    3002:	4f e3       	ldi	r20, 0x3F	; 63
    3004:	5d e0       	ldi	r21, 0x0D	; 13
    3006:	63 e0       	ldi	r22, 0x03	; 3
    3008:	41 50       	subi	r20, 0x01	; 1
    300a:	50 40       	sbci	r21, 0x00	; 0
    300c:	60 40       	sbci	r22, 0x00	; 0
    300e:	e1 f7       	brne	.-8      	; 0x3008 <gprs_init+0x152>
    3010:	00 c0       	rjmp	.+0      	; 0x3012 <gprs_init+0x15c>
    3012:	00 00       	nop
    3014:	21 50       	subi	r18, 0x01	; 1
	_delay_ms(30000);
	_delay_ms(30000);
	_delay_ms(10000);
	_delay_ms(10000);
	
	for(t=0;t<200;t++)
    3016:	59 f7       	brne	.-42     	; 0x2fee <gprs_init+0x138>
    3018:	6f e3       	ldi	r22, 0x3F	; 63
    301a:	7d e0       	ldi	r23, 0x0D	; 13
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	61 50       	subi	r22, 0x01	; 1
    3020:	70 40       	sbci	r23, 0x00	; 0
    3022:	80 40       	sbci	r24, 0x00	; 0
    3024:	e1 f7       	brne	.-8      	; 0x301e <gprs_init+0x168>
    3026:	00 c0       	rjmp	.+0      	; 0x3028 <gprs_init+0x172>
    3028:	00 00       	nop
		//BEEP(100);
	}
	_delay_ms(1000);
	//---

    rx1poit=0;
    302a:	10 92 fb 03 	sts	0x03FB, r1
	for(ip=&sendtc[0];ip<(&sendtc[0]+13);ip++) //
    302e:	8c ef       	ldi	r24, 0xFC	; 252
    3030:	92 e0       	ldi	r25, 0x02	; 2
    3032:	90 93 04 04 	sts	0x0404, r25
    3036:	80 93 03 04 	sts	0x0403, r24
    303a:	9c 01       	movw	r18, r24
    303c:	23 5f       	subi	r18, 0xF3	; 243
    303e:	3f 4f       	sbci	r19, 0xFF	; 255
    3040:	82 17       	cp	r24, r18
    3042:	93 07       	cpc	r25, r19
    3044:	90 f4       	brcc	.+36     	; 0x306a <gprs_init+0x1b4>
    3046:	fc 01       	movw	r30, r24
    3048:	c9 e0       	ldi	r28, 0x09	; 9
    304a:	d3 e0       	ldi	r29, 0x03	; 3
	{
		putchar1(*ip);
    304c:	80 81       	ld	r24, Z
    304e:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	}
	_delay_ms(1000);
	//---

    rx1poit=0;
	for(ip=&sendtc[0];ip<(&sendtc[0]+13);ip++) //
    3052:	e0 91 03 04 	lds	r30, 0x0403
    3056:	f0 91 04 04 	lds	r31, 0x0404
    305a:	31 96       	adiw	r30, 0x01	; 1
    305c:	f0 93 04 04 	sts	0x0404, r31
    3060:	e0 93 03 04 	sts	0x0403, r30
    3064:	ec 17       	cp	r30, r28
    3066:	fd 07       	cpc	r31, r29
    3068:	88 f3       	brcs	.-30     	; 0x304c <gprs_init+0x196>
	{
		putchar1(*ip);
	}
	putchar1(0x0d);
    306a:	8d e0       	ldi	r24, 0x0D	; 13
    306c:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	putchar1(0x0a);
    3070:	8a e0       	ldi	r24, 0x0A	; 10
    3072:	0e 94 88 00 	call	0x110	; 0x110 <putchar1>
	//---wait reply--
	rx1buffer[1]=0x00;
    3076:	10 92 36 04 	sts	0x0436, r1
    307a:	8f e4       	ldi	r24, 0x4F	; 79
    307c:	93 ec       	ldi	r25, 0xC3	; 195
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <gprs_init+0x1c8>
    3082:	00 c0       	rjmp	.+0      	; 0x3084 <gprs_init+0x1ce>
    3084:	00 00       	nop
    3086:	24 e6       	ldi	r18, 0x64	; 100
	_delay_ms(200);
	
	for(t=0;t<100;t++)
	{
		if(rx1buffer[rx1poit-3]==0x4f) t=101;
    3088:	85 e3       	ldi	r24, 0x35	; 53
    308a:	94 e0       	ldi	r25, 0x04	; 4
    308c:	30 91 fb 03 	lds	r19, 0x03FB
    3090:	fc 01       	movw	r30, r24
    3092:	e3 0f       	add	r30, r19
    3094:	f1 1d       	adc	r31, r1
    3096:	33 97       	sbiw	r30, 0x03	; 3
    3098:	30 81       	ld	r19, Z
    309a:	3f 34       	cpi	r19, 0x4F	; 79
    309c:	11 f1       	breq	.+68     	; 0x30e2 <gprs_init+0x22c>
    309e:	a7 ea       	ldi	r26, 0xA7	; 167
    30a0:	b1 e6       	ldi	r27, 0x61	; 97
    30a2:	11 97       	sbiw	r26, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <gprs_init+0x1ec>
    30a6:	00 c0       	rjmp	.+0      	; 0x30a8 <gprs_init+0x1f2>
    30a8:	00 00       	nop
    30aa:	21 50       	subi	r18, 0x01	; 1
	putchar1(0x0a);
	//---wait reply--
	rx1buffer[1]=0x00;
	_delay_ms(200);
	
	for(t=0;t<100;t++)
    30ac:	79 f7       	brne	.-34     	; 0x308c <gprs_init+0x1d6>
    30ae:	e7 ea       	ldi	r30, 0xA7	; 167
    30b0:	f1 e6       	ldi	r31, 0x61	; 97
    30b2:	31 97       	sbiw	r30, 0x01	; 1
    30b4:	f1 f7       	brne	.-4      	; 0x30b2 <gprs_init+0x1fc>
    30b6:	00 c0       	rjmp	.+0      	; 0x30b8 <gprs_init+0x202>
    30b8:	00 00       	nop
		_delay_ms(100);
		//BEEP(100);
	}
	_delay_ms(100);
	//---	
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	08 95       	ret
    30c0:	8b e7       	ldi	r24, 0x7B	; 123
    30c2:	92 e9       	ldi	r25, 0x92	; 146
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <gprs_init+0x20e>
    30c8:	00 c0       	rjmp	.+0      	; 0x30ca <gprs_init+0x214>
    30ca:	00 00       	nop
    30cc:	3b cf       	rjmp	.-394    	; 0x2f44 <gprs_init+0x8e>
    30ce:	4f e3       	ldi	r20, 0x3F	; 63
    30d0:	5d e0       	ldi	r21, 0x0D	; 13
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	41 50       	subi	r20, 0x01	; 1
    30d6:	50 40       	sbci	r21, 0x00	; 0
    30d8:	60 40       	sbci	r22, 0x00	; 0
    30da:	e1 f7       	brne	.-8      	; 0x30d4 <gprs_init+0x21e>
    30dc:	00 c0       	rjmp	.+0      	; 0x30de <gprs_init+0x228>
    30de:	00 00       	nop
    30e0:	9b cf       	rjmp	.-202    	; 0x3018 <gprs_init+0x162>
    30e2:	87 ea       	ldi	r24, 0xA7	; 167
    30e4:	91 e6       	ldi	r25, 0x61	; 97
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <gprs_init+0x230>
    30ea:	00 c0       	rjmp	.+0      	; 0x30ec <gprs_init+0x236>
    30ec:	00 00       	nop
    30ee:	df cf       	rjmp	.-66     	; 0x30ae <gprs_init+0x1f8>

000030f0 <__udivmodqi4>:
    30f0:	99 1b       	sub	r25, r25
    30f2:	79 e0       	ldi	r23, 0x09	; 9
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <__udivmodqi4_ep>

000030f6 <__udivmodqi4_loop>:
    30f6:	99 1f       	adc	r25, r25
    30f8:	96 17       	cp	r25, r22
    30fa:	08 f0       	brcs	.+2      	; 0x30fe <__udivmodqi4_ep>
    30fc:	96 1b       	sub	r25, r22

000030fe <__udivmodqi4_ep>:
    30fe:	88 1f       	adc	r24, r24
    3100:	7a 95       	dec	r23
    3102:	c9 f7       	brne	.-14     	; 0x30f6 <__udivmodqi4_loop>
    3104:	80 95       	com	r24
    3106:	08 95       	ret

00003108 <__udivmodhi4>:
    3108:	aa 1b       	sub	r26, r26
    310a:	bb 1b       	sub	r27, r27
    310c:	51 e1       	ldi	r21, 0x11	; 17
    310e:	07 c0       	rjmp	.+14     	; 0x311e <__udivmodhi4_ep>

00003110 <__udivmodhi4_loop>:
    3110:	aa 1f       	adc	r26, r26
    3112:	bb 1f       	adc	r27, r27
    3114:	a6 17       	cp	r26, r22
    3116:	b7 07       	cpc	r27, r23
    3118:	10 f0       	brcs	.+4      	; 0x311e <__udivmodhi4_ep>
    311a:	a6 1b       	sub	r26, r22
    311c:	b7 0b       	sbc	r27, r23

0000311e <__udivmodhi4_ep>:
    311e:	88 1f       	adc	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	5a 95       	dec	r21
    3124:	a9 f7       	brne	.-22     	; 0x3110 <__udivmodhi4_loop>
    3126:	80 95       	com	r24
    3128:	90 95       	com	r25
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	08 95       	ret

00003130 <__divmodsi4>:
    3130:	97 fb       	bst	r25, 7
    3132:	09 2e       	mov	r0, r25
    3134:	05 26       	eor	r0, r21
    3136:	0e d0       	rcall	.+28     	; 0x3154 <__divmodsi4_neg1>
    3138:	57 fd       	sbrc	r21, 7
    313a:	04 d0       	rcall	.+8      	; 0x3144 <__divmodsi4_neg2>
    313c:	14 d0       	rcall	.+40     	; 0x3166 <__udivmodsi4>
    313e:	0a d0       	rcall	.+20     	; 0x3154 <__divmodsi4_neg1>
    3140:	00 1c       	adc	r0, r0
    3142:	38 f4       	brcc	.+14     	; 0x3152 <__divmodsi4_exit>

00003144 <__divmodsi4_neg2>:
    3144:	50 95       	com	r21
    3146:	40 95       	com	r20
    3148:	30 95       	com	r19
    314a:	21 95       	neg	r18
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	4f 4f       	sbci	r20, 0xFF	; 255
    3150:	5f 4f       	sbci	r21, 0xFF	; 255

00003152 <__divmodsi4_exit>:
    3152:	08 95       	ret

00003154 <__divmodsi4_neg1>:
    3154:	f6 f7       	brtc	.-4      	; 0x3152 <__divmodsi4_exit>
    3156:	90 95       	com	r25
    3158:	80 95       	com	r24
    315a:	70 95       	com	r23
    315c:	61 95       	neg	r22
    315e:	7f 4f       	sbci	r23, 0xFF	; 255
    3160:	8f 4f       	sbci	r24, 0xFF	; 255
    3162:	9f 4f       	sbci	r25, 0xFF	; 255
    3164:	08 95       	ret

00003166 <__udivmodsi4>:
    3166:	a1 e2       	ldi	r26, 0x21	; 33
    3168:	1a 2e       	mov	r1, r26
    316a:	aa 1b       	sub	r26, r26
    316c:	bb 1b       	sub	r27, r27
    316e:	fd 01       	movw	r30, r26
    3170:	0d c0       	rjmp	.+26     	; 0x318c <__udivmodsi4_ep>

00003172 <__udivmodsi4_loop>:
    3172:	aa 1f       	adc	r26, r26
    3174:	bb 1f       	adc	r27, r27
    3176:	ee 1f       	adc	r30, r30
    3178:	ff 1f       	adc	r31, r31
    317a:	a2 17       	cp	r26, r18
    317c:	b3 07       	cpc	r27, r19
    317e:	e4 07       	cpc	r30, r20
    3180:	f5 07       	cpc	r31, r21
    3182:	20 f0       	brcs	.+8      	; 0x318c <__udivmodsi4_ep>
    3184:	a2 1b       	sub	r26, r18
    3186:	b3 0b       	sbc	r27, r19
    3188:	e4 0b       	sbc	r30, r20
    318a:	f5 0b       	sbc	r31, r21

0000318c <__udivmodsi4_ep>:
    318c:	66 1f       	adc	r22, r22
    318e:	77 1f       	adc	r23, r23
    3190:	88 1f       	adc	r24, r24
    3192:	99 1f       	adc	r25, r25
    3194:	1a 94       	dec	r1
    3196:	69 f7       	brne	.-38     	; 0x3172 <__udivmodsi4_loop>
    3198:	60 95       	com	r22
    319a:	70 95       	com	r23
    319c:	80 95       	com	r24
    319e:	90 95       	com	r25
    31a0:	9b 01       	movw	r18, r22
    31a2:	ac 01       	movw	r20, r24
    31a4:	bd 01       	movw	r22, r26
    31a6:	cf 01       	movw	r24, r30
    31a8:	08 95       	ret

000031aa <_exit>:
    31aa:	f8 94       	cli

000031ac <__stop_program>:
    31ac:	ff cf       	rjmp	.-2      	; 0x31ac <__stop_program>
