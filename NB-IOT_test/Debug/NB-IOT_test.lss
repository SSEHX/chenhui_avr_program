
NB-IOT_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000630  00800100  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000511  00800730  00800730  00001a94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cc5  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001570  00000000  00000000  00006a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ed0  00000000  00000000  00007fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  00009ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ded  00000000  00000000  0000a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f39  00000000  00000000  0000b4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000d3de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_30>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	17 e0       	ldi	r17, 0x07	; 7
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ed       	ldi	r30, 0xD0	; 208
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a0 33       	cpi	r26, 0x30	; 48
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	2c e0       	ldi	r18, 0x0C	; 12
      b0:	a0 e3       	ldi	r26, 0x30	; 48
      b2:	b7 e0       	ldi	r27, 0x07	; 7
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a1 34       	cpi	r26, 0x41	; 65
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 3b 01 	call	0x276	; 0x276 <main>
      c2:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <init_adc>:
	
	adc_interrupt_channel_cache = channel;		//临时保存通道号,以便在中断服务程序中调用
	
	ADMUX =	(ADMUX&0xe0) | channel;				//不改变其他配置，并设置通道
	ADCSRA |= (1 << ADSC);						//启动转换
}
      ca:	16 b8       	out	0x06, r1	; 6
      cc:	80 e4       	ldi	r24, 0x40	; 64
      ce:	87 b9       	out	0x07, r24	; 7
      d0:	80 e8       	ldi	r24, 0x80	; 128
      d2:	88 b9       	out	0x08, r24	; 8
      d4:	86 b1       	in	r24, 0x06	; 6
      d6:	86 68       	ori	r24, 0x86	; 134
      d8:	86 b9       	out	0x06, r24	; 6
      da:	08 95       	ret

000000dc <adc_start_return>:
      dc:	e8 2f       	mov	r30, r24
      de:	87 b1       	in	r24, 0x07	; 7
      e0:	80 7e       	andi	r24, 0xE0	; 224
      e2:	8e 2b       	or	r24, r30
      e4:	87 b9       	out	0x07, r24	; 7
      e6:	86 b1       	in	r24, 0x06	; 6
      e8:	80 6c       	ori	r24, 0xC0	; 192
      ea:	86 b9       	out	0x06, r24	; 6
      ec:	34 9b       	sbis	0x06, 4	; 6
      ee:	fe cf       	rjmp	.-4      	; 0xec <adc_start_return+0x10>
      f0:	34 9a       	sbi	0x06, 4	; 6
      f2:	87 e0       	ldi	r24, 0x07	; 7
      f4:	8a 95       	dec	r24
      f6:	f1 f7       	brne	.-4      	; 0xf4 <adc_start_return+0x18>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <adc_start_return+0x1e>
      fa:	84 b1       	in	r24, 0x04	; 4
      fc:	25 b1       	in	r18, 0x05	; 5
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	92 2b       	or	r25, r18
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	ee 0f       	add	r30, r30
     106:	ff 1f       	adc	r31, r31
     108:	ef 5c       	subi	r30, 0xCF	; 207
     10a:	f8 4f       	sbci	r31, 0xF8	; 248
     10c:	91 83       	std	Z+1, r25	; 0x01
     10e:	80 83       	st	Z, r24
     110:	08 95       	ret

00000112 <__vector_21>:
* 功    能：adc中断
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(ADC_vect){
     112:	1f 92       	push	r1
     114:	0f 92       	push	r0
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	0f 92       	push	r0
     11a:	11 24       	eor	r1, r1
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	4f 93       	push	r20
     122:	5f 93       	push	r21
     124:	6f 93       	push	r22
     126:	7f 93       	push	r23
     128:	8f 93       	push	r24
     12a:	9f 93       	push	r25
     12c:	af 93       	push	r26
     12e:	bf 93       	push	r27
     130:	ef 93       	push	r30
     132:	ff 93       	push	r31
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	2a 97       	sbiw	r28, 0x0a	; 10
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("--------------------------------------\r\n");
     142:	8a ee       	ldi	r24, 0xEA	; 234
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("adc ok ... \r\n");
     14a:	84 e2       	ldi	r24, 0x24	; 36
     14c:	92 e0       	ldi	r25, 0x02	; 2
     14e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif
	adc_channel_data_list[adc_interrupt_channel_cache] = (ADCL | ADCH << 8);
     152:	64 b1       	in	r22, 0x04	; 4
     154:	85 b1       	in	r24, 0x05	; 5
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	78 2b       	or	r23, r24
     15a:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <__data_end>
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	ef 5c       	subi	r30, 0xCF	; 207
     166:	f8 4f       	sbci	r31, 0xF8	; 248
     168:	71 83       	std	Z+1, r23	; 0x01
     16a:	60 83       	st	Z, r22
	
	unsigned char cache[10] = {0}; 
     16c:	ce 01       	movw	r24, r28
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	2a e0       	ldi	r18, 0x0A	; 10
     172:	fc 01       	movw	r30, r24
     174:	11 92       	st	Z+, r1
     176:	2a 95       	dec	r18
     178:	e9 f7       	brne	.-6      	; 0x174 <__vector_21+0x62>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     17a:	4a e0       	ldi	r20, 0x0A	; 10
     17c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__itoa_ncheck>
	
	uart0_send_string(itoa(cache, adc_channel_data_list[adc_interrupt_channel_cache], 10));
     180:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	
	switch(adc_interrupt_channel_cache){
     184:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <__data_end>
     188:	86 30       	cpi	r24, 0x06	; 6
     18a:	71 f0       	breq	.+28     	; 0x1a8 <__vector_21+0x96>
     18c:	87 30       	cpi	r24, 0x07	; 7
     18e:	19 f0       	breq	.+6      	; 0x196 <__vector_21+0x84>
     190:	85 30       	cpi	r24, 0x05	; 5
     192:	d9 f4       	brne	.+54     	; 0x1ca <__vector_21+0xb8>
     194:	12 c0       	rjmp	.+36     	; 0x1ba <__vector_21+0xa8>
		case (PURE_WATER) :
			adc_data.pure_water = adc_channel_data_list[adc_interrupt_channel_cache];
     196:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <adc_channel_data_list+0xe>
     19a:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <adc_channel_data_list+0xf>
     19e:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <adc_data+0x3>
     1a2:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <adc_data+0x2>
		break;
     1a6:	11 c0       	rjmp	.+34     	; 0x1ca <__vector_21+0xb8>
		case (RAW_WATER) :
			adc_data.raw_water = adc_channel_data_list[adc_interrupt_channel_cache];
     1a8:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <adc_channel_data_list+0xc>
     1ac:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <adc_channel_data_list+0xd>
     1b0:	90 93 3c 0b 	sts	0x0B3C, r25	; 0x800b3c <adc_data+0x1>
     1b4:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <adc_data>
		break;
     1b8:	08 c0       	rjmp	.+16     	; 0x1ca <__vector_21+0xb8>
		case (LEAKAGE) :
			adc_data.leakage = adc_channel_data_list[adc_interrupt_channel_cache];
     1ba:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <adc_channel_data_list+0xa>
     1be:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <adc_channel_data_list+0xb>
     1c2:	90 93 40 0b 	sts	0x0B40, r25	; 0x800b40 <adc_data+0x5>
     1c6:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <adc_data+0x4>
		break;
	}
}
     1ca:	2a 96       	adiw	r28, 0x0a	; 10
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	cd bf       	out	0x3d, r28	; 61
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	ff 91       	pop	r31
     1dc:	ef 91       	pop	r30
     1de:	bf 91       	pop	r27
     1e0:	af 91       	pop	r26
     1e2:	9f 91       	pop	r25
     1e4:	8f 91       	pop	r24
     1e6:	7f 91       	pop	r23
     1e8:	6f 91       	pop	r22
     1ea:	5f 91       	pop	r21
     1ec:	4f 91       	pop	r20
     1ee:	3f 91       	pop	r19
     1f0:	2f 91       	pop	r18
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <adc_get_pure_water>:
void adc_get_pure_water(){
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("--------------------------------------\r\n");
     1fc:	8a ee       	ldi	r24, 0xEA	; 234
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("start get pure water tds ... \r\n");
     204:	82 e3       	ldi	r24, 0x32	; 50
     206:	92 e0       	ldi	r25, 0x02	; 2
     208:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif	
	
	adc_data.pure_water = adc_start_return(PURE_WATER);
     20c:	87 e0       	ldi	r24, 0x07	; 7
     20e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start_return>
     212:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <adc_data+0x3>
     216:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <adc_data+0x2>
     21a:	08 95       	ret

0000021c <adc_get_raw_water>:
void adc_get_raw_water(){
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("--------------------------------------\r\n");
     21c:	8a ee       	ldi	r24, 0xEA	; 234
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("start get raw water tds ... \r\n");
     224:	82 e5       	ldi	r24, 0x52	; 82
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif	
	
	adc_data.raw_water = adc_start_return(RAW_WATER);
     22c:	86 e0       	ldi	r24, 0x06	; 6
     22e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start_return>
     232:	90 93 3c 0b 	sts	0x0B3C, r25	; 0x800b3c <adc_data+0x1>
     236:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <adc_data>
     23a:	08 95       	ret

0000023c <adc_check_leakage>:
void adc_check_leakage(){
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("--------------------------------------\r\n");
     23c:	8a ee       	ldi	r24, 0xEA	; 234
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("start get leakage ... \r\n");
     244:	81 e7       	ldi	r24, 0x71	; 113
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif	
	
	adc_data.leakage = adc_start_return(LEAKAGE);
     24c:	85 e0       	ldi	r24, 0x05	; 5
     24e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start_return>
     252:	90 93 40 0b 	sts	0x0B40, r25	; 0x800b40 <adc_data+0x5>
     256:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <adc_data+0x4>
     25a:	08 95       	ret

0000025c <system_init>:
 */ 

#include "app.h"

void system_init(){
	cli();
     25c:	f8 94       	cli
	init_port();
     25e:	0e 94 0a 08 	call	0x1014	; 0x1014 <init_port>
	init_lcd();
     262:	0e 94 ef 07 	call	0xfde	; 0xfde <init_lcd>
	init_uart0();
     266:	0e 94 7f 08 	call	0x10fe	; 0x10fe <init_uart0>
	init_uart1();
     26a:	0e 94 8a 08 	call	0x1114	; 0x1114 <init_uart1>
	init_adc();
     26e:	0e 94 65 00 	call	0xca	; 0xca <init_adc>
	sei();
     272:	78 94       	sei
     274:	08 95       	ret

00000276 <main>:
}

int main(void)
{
	system_init();
     276:	0e 94 2e 01 	call	0x25c	; 0x25c <system_init>
	init_bc95();
     27a:	0e 94 06 06 	call	0xc0c	; 0xc0c <init_bc95>
	
	get_all_adc_value();
     27e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <get_all_adc_value>
	
	while(1)
	{
		//bc95接收到数据
		if (device_status_bc95.have_receive)
     282:	ca e0       	ldi	r28, 0x0A	; 10
     284:	dc e0       	ldi	r29, 0x0C	; 12
			
		}
		
		if (get_Low_switch() == 0)
		{
			device_status_lcd.no_water = YES;
     286:	0f 2e       	mov	r0, r31
     288:	f4 e3       	ldi	r31, 0x34	; 52
     28a:	ef 2e       	mov	r14, r31
     28c:	fb e0       	ldi	r31, 0x0B	; 11
     28e:	ff 2e       	mov	r15, r31
     290:	f0 2d       	mov	r31, r0
     292:	11 e0       	ldi	r17, 0x01	; 1
	get_all_adc_value();
	
	while(1)
	{
		//bc95接收到数据
		if (device_status_bc95.have_receive)
     294:	8d a9       	ldd	r24, Y+53	; 0x35
     296:	88 23       	and	r24, r24
     298:	29 f0       	breq	.+10     	; 0x2a4 <main+0x2e>
		{
			
			device_status_bc95.have_receive = 0;
     29a:	1d aa       	std	Y+53, r1	; 0x35
			uart0_send_string("bc95_have_receive");
     29c:	8a e8       	ldi	r24, 0x8A	; 138
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
			/*-----------------------------
					接收数据处理函数
			-----------------------------*/
		}
		//bc95发生重启
		if (device_status_bc95.have_reboot)
     2a4:	8c a9       	ldd	r24, Y+52	; 0x34
     2a6:	88 23       	and	r24, r24
     2a8:	49 f0       	breq	.+18     	; 0x2bc <main+0x46>
		{
			uart1_rx_array_set_empty();
     2aa:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <uart1_rx_array_set_empty>
			device_status_bc95.have_reboot = 0;
     2ae:	1c aa       	std	Y+52, r1	; 0x34
			uart0_send_string("bc95_have_reboot");
     2b0:	8c e9       	ldi	r24, 0x9C	; 156
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
			init_bc95();
     2b8:	0e 94 06 06 	call	0xc0c	; 0xc0c <init_bc95>
			
		}
		
		if (get_Low_switch() == 0)
     2bc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <get_Low_switch>
     2c0:	89 2b       	or	r24, r25
     2c2:	19 f4       	brne	.+6      	; 0x2ca <main+0x54>
		{
			device_status_lcd.no_water = YES;
     2c4:	f7 01       	movw	r30, r14
     2c6:	10 83       	st	Z, r17
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <main+0x58>
		}else{
			if (get_hight_switch() == 1)
     2ca:	0e 94 f0 06 	call	0xde0	; 0xde0 <get_hight_switch>
			{
			}
		}
		
		get_all_adc_value();
     2ce:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <get_all_adc_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	ff ef       	ldi	r31, 0xFF	; 255
     2d4:	2f e7       	ldi	r18, 0x7F	; 127
     2d6:	83 e4       	ldi	r24, 0x43	; 67
     2d8:	f1 50       	subi	r31, 0x01	; 1
     2da:	20 40       	sbci	r18, 0x00	; 0
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0x62>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x6c>
     2e2:	00 00       	nop
     2e4:	d7 cf       	rjmp	.-82     	; 0x294 <main+0x1e>

000002e6 <callback_get_imsi>:
		return 0;
		}else{
		return 0;
	}
	return 0;
}
     2e6:	8a ee       	ldi	r24, 0xEA	; 234
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     2ee:	8d ea       	ldi	r24, 0xAD	; 173
     2f0:	92 e0       	ldi	r25, 0x02	; 2
     2f2:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     2f6:	20 91 30 09 	lds	r18, 0x0930	; 0x800930 <query_data_flag+0x10e>
     2fa:	e0 91 2f 09 	lds	r30, 0x092F	; 0x80092f <query_data_flag+0x10d>
     2fe:	82 2f       	mov	r24, r18
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	8e 1b       	sub	r24, r30
     304:	91 09       	sbc	r25, r1
     306:	0f 97       	sbiw	r24, 0x0f	; 15
     308:	31 f0       	breq	.+12     	; 0x316 <callback_get_imsi+0x30>
     30a:	89 ec       	ldi	r24, 0xC9	; 201
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	08 95       	ret
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	e2 17       	cp	r30, r18
     31c:	f3 07       	cpc	r31, r19
     31e:	58 f4       	brcc	.+22     	; 0x336 <callback_get_imsi+0x50>
     320:	ee 5d       	subi	r30, 0xDE	; 222
     322:	f7 4f       	sbci	r31, 0xF7	; 247
     324:	a0 e2       	ldi	r26, 0x20	; 32
     326:	bc e0       	ldi	r27, 0x0C	; 12
     328:	2e 5d       	subi	r18, 0xDE	; 222
     32a:	37 4f       	sbci	r19, 0xF7	; 247
     32c:	81 91       	ld	r24, Z+
     32e:	8d 93       	st	X+, r24
     330:	e2 17       	cp	r30, r18
     332:	f3 07       	cpc	r31, r19
     334:	d9 f7       	brne	.-10     	; 0x32c <callback_get_imsi+0x46>
     336:	8c ee       	ldi	r24, 0xEC	; 236
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	9c e0       	ldi	r25, 0x0C	; 12
     342:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     346:	82 ec       	ldi	r24, 0xC2	; 194
     348:	93 e0       	ldi	r25, 0x03	; 3
     34a:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	08 95       	ret

00000352 <callback_get_imei>:
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	00 d0       	rcall	.+0      	; 0x358 <callback_get_imei+0x6>
     358:	00 d0       	rcall	.+0      	; 0x35a <callback_get_imei+0x8>
     35a:	1f 92       	push	r1
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	85 e0       	ldi	r24, 0x05	; 5
     362:	e2 e7       	ldi	r30, 0x72	; 114
     364:	f3 e0       	ldi	r31, 0x03	; 3
     366:	de 01       	movw	r26, r28
     368:	11 96       	adiw	r26, 0x01	; 1
     36a:	01 90       	ld	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	8a 95       	dec	r24
     370:	e1 f7       	brne	.-8      	; 0x36a <callback_get_imei+0x18>
     372:	8a ee       	ldi	r24, 0xEA	; 234
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	93 e0       	ldi	r25, 0x03	; 3
     37e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     382:	be 01       	movw	r22, r28
     384:	6f 5f       	subi	r22, 0xFF	; 255
     386:	7f 4f       	sbci	r23, 0xFF	; 255
     388:	82 e2       	ldi	r24, 0x22	; 34
     38a:	98 e0       	ldi	r25, 0x08	; 8
     38c:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     390:	89 2b       	or	r24, r25
     392:	09 f4       	brne	.+2      	; 0x396 <callback_get_imei+0x44>
     394:	3f c0       	rjmp	.+126    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     396:	60 91 23 09 	lds	r22, 0x0923	; 0x800923 <query_data_flag+0x101>
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	86 0f       	add	r24, r22
     39e:	30 91 21 09 	lds	r19, 0x0921	; 0x800921 <query_data_flag+0xff>
     3a2:	83 17       	cp	r24, r19
     3a4:	70 f1       	brcs	.+92     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3a6:	3c c0       	rjmp	.+120    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3a8:	48 2f       	mov	r20, r24
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	fa 01       	movw	r30, r20
     3ae:	ee 5d       	subi	r30, 0xDE	; 222
     3b0:	f7 4f       	sbci	r31, 0xF7	; 247
     3b2:	90 81       	ld	r25, Z
     3b4:	9d 30       	cpi	r25, 0x0D	; 13
     3b6:	11 f4       	brne	.+4      	; 0x3bc <callback_get_imei+0x6a>
     3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <callback_get_imei+0x7e>
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	e2 2f       	mov	r30, r18
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	e6 5f       	subi	r30, 0xF6	; 246
     3c2:	f3 4f       	sbci	r31, 0xF3	; 243
     3c4:	96 83       	std	Z+6, r25	; 0x06
     3c6:	2f 5f       	subi	r18, 0xFF	; 255
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	83 17       	cp	r24, r19
     3cc:	68 f3       	brcs	.-38     	; 0x3a8 <callback_get_imei+0x56>
     3ce:	28 c0       	rjmp	.+80     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3d0:	46 1b       	sub	r20, r22
     3d2:	51 09       	sbc	r21, r1
     3d4:	40 31       	cpi	r20, 0x10	; 16
     3d6:	51 05       	cpc	r21, r1
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <callback_get_imei+0x94>
     3da:	8c e1       	ldi	r24, 0x1C	; 28
     3dc:	93 e0       	ldi	r25, 0x03	; 3
     3de:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	1d c0       	rjmp	.+58     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3e6:	80 e4       	ldi	r24, 0x40	; 64
     3e8:	93 e0       	ldi	r25, 0x03	; 3
     3ea:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     3ee:	80 e1       	ldi	r24, 0x10	; 16
     3f0:	9c e0       	ldi	r25, 0x0C	; 12
     3f2:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     3f6:	82 ec       	ldi	r24, 0xC2	; 194
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0f c0       	rjmp	.+30     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     402:	48 2f       	mov	r20, r24
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	fa 01       	movw	r30, r20
     408:	ee 5d       	subi	r30, 0xDE	; 222
     40a:	f7 4f       	sbci	r31, 0xF7	; 247
     40c:	90 81       	ld	r25, Z
     40e:	9d 30       	cpi	r25, 0x0D	; 13
     410:	a1 f6       	brne	.-88     	; 0x3ba <callback_get_imei+0x68>
     412:	de cf       	rjmp	.-68     	; 0x3d0 <callback_get_imei+0x7e>
     414:	85 e5       	ldi	r24, 0x55	; 85
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <callback_get_band>:
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	00 d0       	rcall	.+0      	; 0x436 <callback_get_band+0x6>
     436:	00 d0       	rcall	.+0      	; 0x438 <callback_get_band+0x8>
     438:	00 d0       	rcall	.+0      	; 0x43a <callback_get_band+0xa>
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	86 e0       	ldi	r24, 0x06	; 6
     440:	e6 ec       	ldi	r30, 0xC6	; 198
     442:	f3 e0       	ldi	r31, 0x03	; 3
     444:	de 01       	movw	r26, r28
     446:	11 96       	adiw	r26, 0x01	; 1
     448:	01 90       	ld	r0, Z+
     44a:	0d 92       	st	X+, r0
     44c:	8a 95       	dec	r24
     44e:	e1 f7       	brne	.-8      	; 0x448 <callback_get_band+0x18>
     450:	8a ee       	ldi	r24, 0xEA	; 234
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     458:	87 e7       	ldi	r24, 0x77	; 119
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     460:	be 01       	movw	r22, r28
     462:	6f 5f       	subi	r22, 0xFF	; 255
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	82 e2       	ldi	r24, 0x22	; 34
     468:	98 e0       	ldi	r25, 0x08	; 8
     46a:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     46e:	89 2b       	or	r24, r25
     470:	89 f1       	breq	.+98     	; 0x4d4 <callback_get_band+0xa4>
     472:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <query_data_flag+0x101>
     476:	8f 5f       	subi	r24, 0xFF	; 255
     478:	30 91 21 09 	lds	r19, 0x0921	; 0x800921 <query_data_flag+0xff>
     47c:	83 17       	cp	r24, r19
     47e:	10 f1       	brcs	.+68     	; 0x4c4 <callback_get_band+0x94>
     480:	2f c0       	rjmp	.+94     	; 0x4e0 <callback_get_band+0xb0>
     482:	e8 2f       	mov	r30, r24
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	ee 5d       	subi	r30, 0xDE	; 222
     488:	f7 4f       	sbci	r31, 0xF7	; 247
     48a:	90 81       	ld	r25, Z
     48c:	9d 30       	cpi	r25, 0x0D	; 13
     48e:	11 f4       	brne	.+4      	; 0x494 <callback_get_band+0x64>
     490:	0b c0       	rjmp	.+22     	; 0x4a8 <callback_get_band+0x78>
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	e2 2f       	mov	r30, r18
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	e6 5f       	subi	r30, 0xF6	; 246
     49a:	f3 4f       	sbci	r31, 0xF3	; 243
     49c:	90 83       	st	Z, r25
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	83 17       	cp	r24, r19
     4a4:	70 f3       	brcs	.-36     	; 0x482 <callback_get_band+0x52>
     4a6:	1c c0       	rjmp	.+56     	; 0x4e0 <callback_get_band+0xb0>
     4a8:	83 e9       	ldi	r24, 0x93	; 147
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	9c e0       	ldi	r25, 0x0C	; 12
     4b4:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     4b8:	82 ec       	ldi	r24, 0xC2	; 194
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <callback_get_band+0xb0>
     4c4:	e8 2f       	mov	r30, r24
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ee 5d       	subi	r30, 0xDE	; 222
     4ca:	f7 4f       	sbci	r31, 0xF7	; 247
     4cc:	90 81       	ld	r25, Z
     4ce:	9d 30       	cpi	r25, 0x0D	; 13
     4d0:	01 f7       	brne	.-64     	; 0x492 <callback_get_band+0x62>
     4d2:	ea cf       	rjmp	.-44     	; 0x4a8 <callback_get_band+0x78>
     4d4:	88 ea       	ldi	r24, 0xA8	; 168
     4d6:	93 e0       	ldi	r25, 0x03	; 3
     4d8:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <callback_get_band+0xb0>
     4e0:	26 96       	adiw	r28, 0x06	; 6
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <callback_get_csq>:
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <callback_get_csq+0x6>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <callback_get_csq+0x8>
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	83 e4       	ldi	r24, 0x43	; 67
     500:	93 e5       	ldi	r25, 0x53	; 83
     502:	9a 83       	std	Y+2, r25	; 0x02
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	81 e5       	ldi	r24, 0x51	; 81
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	9c 83       	std	Y+4, r25	; 0x04
     50c:	8b 83       	std	Y+3, r24	; 0x03
     50e:	8a ee       	ldi	r24, 0xEA	; 234
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     516:	8c ec       	ldi	r24, 0xCC	; 204
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     51e:	be 01       	movw	r22, r28
     520:	6f 5f       	subi	r22, 0xFF	; 255
     522:	7f 4f       	sbci	r23, 0xFF	; 255
     524:	82 e2       	ldi	r24, 0x22	; 34
     526:	98 e0       	ldi	r25, 0x08	; 8
     528:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     52c:	89 2b       	or	r24, r25
     52e:	99 f1       	breq	.+102    	; 0x596 <callback_get_csq+0xa4>
     530:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <query_data_flag+0x101>
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	30 91 21 09 	lds	r19, 0x0921	; 0x800921 <query_data_flag+0xff>
     53a:	83 17       	cp	r24, r19
     53c:	20 f1       	brcs	.+72     	; 0x586 <callback_get_csq+0x94>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	2f c0       	rjmp	.+94     	; 0x5a0 <callback_get_csq+0xae>
     542:	e8 2f       	mov	r30, r24
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	ee 5d       	subi	r30, 0xDE	; 222
     548:	f7 4f       	sbci	r31, 0xF7	; 247
     54a:	90 81       	ld	r25, Z
     54c:	9c 32       	cpi	r25, 0x2C	; 44
     54e:	11 f4       	brne	.+4      	; 0x554 <callback_get_csq+0x62>
     550:	0c c0       	rjmp	.+24     	; 0x56a <callback_get_csq+0x78>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	e2 2f       	mov	r30, r18
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	e6 5f       	subi	r30, 0xF6	; 246
     55a:	f3 4f       	sbci	r31, 0xF3	; 243
     55c:	93 83       	std	Z+3, r25	; 0x03
     55e:	2f 5f       	subi	r18, 0xFF	; 255
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	83 17       	cp	r24, r19
     564:	70 f3       	brcs	.-36     	; 0x542 <callback_get_csq+0x50>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	1b c0       	rjmp	.+54     	; 0x5a0 <callback_get_csq+0xae>
     56a:	87 ee       	ldi	r24, 0xE7	; 231
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     572:	8d e0       	ldi	r24, 0x0D	; 13
     574:	9c e0       	ldi	r25, 0x0C	; 12
     576:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     57a:	82 ec       	ldi	r24, 0xC2	; 194
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	0d c0       	rjmp	.+26     	; 0x5a0 <callback_get_csq+0xae>
     586:	e8 2f       	mov	r30, r24
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	ee 5d       	subi	r30, 0xDE	; 222
     58c:	f7 4f       	sbci	r31, 0xF7	; 247
     58e:	90 81       	ld	r25, Z
     590:	9c 32       	cpi	r25, 0x2C	; 44
     592:	f9 f6       	brne	.-66     	; 0x552 <callback_get_csq+0x60>
     594:	ea cf       	rjmp	.-44     	; 0x56a <callback_get_csq+0x78>
     596:	8b ef       	ldi	r24, 0xFB	; 251
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <callback_get_eps_status>:
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <callback_get_eps_status+0xa>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <callback_get_eps_status+0xc>
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <callback_get_eps_status+0xe>
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	e5 e8       	ldi	r30, 0x85	; 133
     5c4:	f4 e0       	ldi	r31, 0x04	; 4
     5c6:	de 01       	movw	r26, r28
     5c8:	11 96       	adiw	r26, 0x01	; 1
     5ca:	01 90       	ld	r0, Z+
     5cc:	0d 92       	st	X+, r0
     5ce:	8a 95       	dec	r24
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <callback_get_eps_status+0x1c>
     5d2:	8a ee       	ldi	r24, 0xEA	; 234
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     5da:	87 e1       	ldi	r24, 0x17	; 23
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     5e2:	be 01       	movw	r22, r28
     5e4:	6f 5f       	subi	r22, 0xFF	; 255
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
     5e8:	82 e2       	ldi	r24, 0x22	; 34
     5ea:	98 e0       	ldi	r25, 0x08	; 8
     5ec:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     5f0:	89 2b       	or	r24, r25
     5f2:	b9 f1       	breq	.+110    	; 0x662 <callback_get_eps_status+0xb4>
     5f4:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <query_data_flag+0x103>
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	20 91 23 09 	lds	r18, 0x0923	; 0x800923 <query_data_flag+0x101>
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	ac 01       	movw	r20, r24
     602:	42 1b       	sub	r20, r18
     604:	53 0b       	sbc	r21, r19
     606:	42 30       	cpi	r20, 0x02	; 2
     608:	51 05       	cpc	r21, r1
     60a:	89 f5       	brne	.+98     	; 0x66e <callback_get_eps_status+0xc0>
     60c:	fc 01       	movw	r30, r24
     60e:	ee 5d       	subi	r30, 0xDE	; 222
     610:	f7 4f       	sbci	r31, 0xF7	; 247
     612:	81 81       	ldd	r24, Z+1	; 0x01
     614:	81 33       	cpi	r24, 0x31	; 49
     616:	31 f0       	breq	.+12     	; 0x624 <callback_get_eps_status+0x76>
     618:	82 e3       	ldi	r24, 0x32	; 50
     61a:	94 e0       	ldi	r25, 0x04	; 4
     61c:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	26 c0       	rjmp	.+76     	; 0x670 <callback_get_eps_status+0xc2>
     624:	0a e0       	ldi	r16, 0x0A	; 10
     626:	1c e0       	ldi	r17, 0x0C	; 12
     628:	f9 01       	movw	r30, r18
     62a:	ee 5d       	subi	r30, 0xDE	; 222
     62c:	f7 4f       	sbci	r31, 0xF7	; 247
     62e:	81 81       	ldd	r24, Z+1	; 0x01
     630:	f8 01       	movw	r30, r16
     632:	87 a3       	std	Z+39, r24	; 0x27
     634:	81 e3       	ldi	r24, 0x31	; 49
     636:	80 a7       	std	Z+40, r24	; 0x28
     638:	85 e5       	ldi	r24, 0x55	; 85
     63a:	94 e0       	ldi	r25, 0x04	; 4
     63c:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     640:	f8 01       	movw	r30, r16
     642:	87 a1       	ldd	r24, Z+39	; 0x27
     644:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
     648:	8c e2       	ldi	r24, 0x2C	; 44
     64a:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
     64e:	f8 01       	movw	r30, r16
     650:	80 a5       	ldd	r24, Z+40	; 0x28
     652:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
     656:	82 ec       	ldi	r24, 0xC2	; 194
     658:	93 e0       	ldi	r25, 0x03	; 3
     65a:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	07 c0       	rjmp	.+14     	; 0x670 <callback_get_eps_status+0xc2>
     662:	89 e6       	ldi	r24, 0x69	; 105
     664:	94 e0       	ldi	r25, 0x04	; 4
     666:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	01 c0       	rjmp	.+2      	; 0x670 <callback_get_eps_status+0xc2>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	26 96       	adiw	r28, 0x06	; 6
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <callback_get_profile_status>:
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	00 d0       	rcall	.+0      	; 0x690 <callback_get_profile_status+0xa>
     690:	00 d0       	rcall	.+0      	; 0x692 <callback_get_profile_status+0xc>
     692:	00 d0       	rcall	.+0      	; 0x694 <callback_get_profile_status+0xe>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	86 e0       	ldi	r24, 0x06	; 6
     69a:	ed ef       	ldi	r30, 0xFD	; 253
     69c:	f4 e0       	ldi	r31, 0x04	; 4
     69e:	de 01       	movw	r26, r28
     6a0:	11 96       	adiw	r26, 0x01	; 1
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	8a 95       	dec	r24
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <callback_get_profile_status+0x1c>
     6aa:	8a ee       	ldi	r24, 0xEA	; 234
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     6b2:	8b e8       	ldi	r24, 0x8B	; 139
     6b4:	94 e0       	ldi	r25, 0x04	; 4
     6b6:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     6ba:	be 01       	movw	r22, r28
     6bc:	6f 5f       	subi	r22, 0xFF	; 255
     6be:	7f 4f       	sbci	r23, 0xFF	; 255
     6c0:	82 e2       	ldi	r24, 0x22	; 34
     6c2:	98 e0       	ldi	r25, 0x08	; 8
     6c4:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     6c8:	89 2b       	or	r24, r25
     6ca:	11 f1       	breq	.+68     	; 0x710 <callback_get_profile_status+0x8a>
     6cc:	e0 91 23 09 	lds	r30, 0x0923	; 0x800923 <query_data_flag+0x101>
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	ee 5d       	subi	r30, 0xDE	; 222
     6d4:	f7 4f       	sbci	r31, 0xF7	; 247
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
     6d8:	81 33       	cpi	r24, 0x31	; 49
     6da:	11 f0       	breq	.+4      	; 0x6e0 <callback_get_profile_status+0x5a>
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	91 f4       	brne	.+36     	; 0x704 <callback_get_profile_status+0x7e>
     6e0:	0a e0       	ldi	r16, 0x0A	; 10
     6e2:	1c e0       	ldi	r17, 0x0C	; 12
     6e4:	f8 01       	movw	r30, r16
     6e6:	86 a3       	std	Z+38, r24	; 0x26
     6e8:	81 eb       	ldi	r24, 0xB1	; 177
     6ea:	94 e0       	ldi	r25, 0x04	; 4
     6ec:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     6f0:	f8 01       	movw	r30, r16
     6f2:	86 a1       	ldd	r24, Z+38	; 0x26
     6f4:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
     6f8:	82 ec       	ldi	r24, 0xC2	; 194
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	13 c0       	rjmp	.+38     	; 0x72a <callback_get_profile_status+0xa4>
     704:	80 ed       	ldi	r24, 0xD0	; 208
     706:	94 e0       	ldi	r25, 0x04	; 4
     708:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	0d c0       	rjmp	.+26     	; 0x72a <callback_get_profile_status+0xa4>
     710:	81 eb       	ldi	r24, 0xB1	; 177
     712:	94 e0       	ldi	r25, 0x04	; 4
     714:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     718:	87 ef       	ldi	r24, 0xF7	; 247
     71a:	94 e0       	ldi	r25, 0x04	; 4
     71c:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     720:	82 ec       	ldi	r24, 0xC2	; 194
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	26 96       	adiw	r28, 0x06	; 6
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <callback_get_plmn>:
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	00 d0       	rcall	.+0      	; 0x746 <callback_get_plmn+0x6>
     746:	00 d0       	rcall	.+0      	; 0x748 <callback_get_plmn+0x8>
     748:	1f 92       	push	r1
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	85 e0       	ldi	r24, 0x05	; 5
     750:	e1 e5       	ldi	r30, 0x51	; 81
     752:	f5 e0       	ldi	r31, 0x05	; 5
     754:	de 01       	movw	r26, r28
     756:	11 96       	adiw	r26, 0x01	; 1
     758:	01 90       	ld	r0, Z+
     75a:	0d 92       	st	X+, r0
     75c:	8a 95       	dec	r24
     75e:	e1 f7       	brne	.-8      	; 0x758 <callback_get_plmn+0x18>
     760:	8a ee       	ldi	r24, 0xEA	; 234
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	95 e0       	ldi	r25, 0x05	; 5
     76c:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     770:	be 01       	movw	r22, r28
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	82 e2       	ldi	r24, 0x22	; 34
     778:	98 e0       	ldi	r25, 0x08	; 8
     77a:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     77e:	89 2b       	or	r24, r25
     780:	09 f4       	brne	.+2      	; 0x784 <callback_get_plmn+0x44>
     782:	69 c0       	rjmp	.+210    	; 0x856 <callback_get_plmn+0x116>
     784:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <query_data_flag+0x102>
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	31 f0       	breq	.+12     	; 0x798 <callback_get_plmn+0x58>
     78c:	8f e1       	ldi	r24, 0x1F	; 31
     78e:	95 e0       	ldi	r25, 0x05	; 5
     790:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	66 c0       	rjmp	.+204    	; 0x864 <callback_get_plmn+0x124>
     798:	20 91 25 09 	lds	r18, 0x0925	; 0x800925 <query_data_flag+0x103>
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <query_data_flag+0x101>
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	48 1b       	sub	r20, r24
     7a8:	59 0b       	sbc	r21, r25
     7aa:	42 30       	cpi	r20, 0x02	; 2
     7ac:	51 05       	cpc	r21, r1
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <callback_get_plmn+0x72>
     7b0:	58 c0       	rjmp	.+176    	; 0x862 <callback_get_plmn+0x122>
     7b2:	a0 91 26 09 	lds	r26, 0x0926	; 0x800926 <query_data_flag+0x104>
     7b6:	4a 2f       	mov	r20, r26
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	ba 01       	movw	r22, r20
     7bc:	62 1b       	sub	r22, r18
     7be:	73 0b       	sbc	r23, r19
     7c0:	62 30       	cpi	r22, 0x02	; 2
     7c2:	71 05       	cpc	r23, r1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <callback_get_plmn+0x88>
     7c6:	41 c0       	rjmp	.+130    	; 0x84a <callback_get_plmn+0x10a>
     7c8:	fc 01       	movw	r30, r24
     7ca:	ee 5d       	subi	r30, 0xDE	; 222
     7cc:	f7 4f       	sbci	r31, 0xF7	; 247
     7ce:	81 81       	ldd	r24, Z+1	; 0x01
     7d0:	80 93 33 0c 	sts	0x0C33, r24	; 0x800c33 <device_status_bc95+0x29>
     7d4:	ca 01       	movw	r24, r20
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	40 91 21 09 	lds	r20, 0x0921	; 0x800921 <query_data_flag+0xff>
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	84 17       	cp	r24, r20
     7e0:	95 07       	cpc	r25, r21
     7e2:	40 f1       	brcs	.+80     	; 0x834 <callback_get_plmn+0xf4>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	3e c0       	rjmp	.+124    	; 0x864 <callback_get_plmn+0x124>
     7e8:	8d 91       	ld	r24, X+
     7ea:	8d 30       	cpi	r24, 0x0D	; 13
     7ec:	71 f0       	breq	.+28     	; 0x80a <callback_get_plmn+0xca>
     7ee:	e9 2f       	mov	r30, r25
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	e6 5f       	subi	r30, 0xF6	; 246
     7f4:	f3 4f       	sbci	r31, 0xF3	; 243
     7f6:	82 a7       	std	Z+42, r24	; 0x2a
     7f8:	9f 5f       	subi	r25, 0xFF	; 255
     7fa:	9d 01       	movw	r18, r26
     7fc:	22 52       	subi	r18, 0x22	; 34
     7fe:	38 40       	sbci	r19, 0x08	; 8
     800:	24 17       	cp	r18, r20
     802:	35 07       	cpc	r19, r21
     804:	88 f3       	brcs	.-30     	; 0x7e8 <callback_get_plmn+0xa8>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	2d c0       	rjmp	.+90     	; 0x864 <callback_get_plmn+0x124>
     80a:	8c e3       	ldi	r24, 0x3C	; 60
     80c:	95 e0       	ldi	r25, 0x05	; 5
     80e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     812:	80 91 33 0c 	lds	r24, 0x0C33	; 0x800c33 <device_status_bc95+0x29>
     816:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
     81a:	8c e2       	ldi	r24, 0x2C	; 44
     81c:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
     820:	84 e3       	ldi	r24, 0x34	; 52
     822:	9c e0       	ldi	r25, 0x0C	; 12
     824:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     828:	82 ec       	ldi	r24, 0xC2	; 194
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	18 c0       	rjmp	.+48     	; 0x864 <callback_get_plmn+0x124>
     834:	fc 01       	movw	r30, r24
     836:	ee 5d       	subi	r30, 0xDE	; 222
     838:	f7 4f       	sbci	r31, 0xF7	; 247
     83a:	80 81       	ld	r24, Z
     83c:	8d 30       	cpi	r24, 0x0D	; 13
     83e:	29 f3       	breq	.-54     	; 0x80a <callback_get_plmn+0xca>
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	ac 5d       	subi	r26, 0xDC	; 220
     844:	b7 4f       	sbci	r27, 0xF7	; 247
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	d2 cf       	rjmp	.-92     	; 0x7ee <callback_get_plmn+0xae>
     84a:	8f e1       	ldi	r24, 0x1F	; 31
     84c:	95 e0       	ldi	r25, 0x05	; 5
     84e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	07 c0       	rjmp	.+14     	; 0x864 <callback_get_plmn+0x124>
     856:	8f e1       	ldi	r24, 0x1F	; 31
     858:	95 e0       	ldi	r25, 0x05	; 5
     85a:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	01 c0       	rjmp	.+2      	; 0x864 <callback_get_plmn+0x124>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <type_set_process>:
     874:	61 e4       	ldi	r22, 0x41	; 65
     876:	7b e0       	ldi	r23, 0x0B	; 11
     878:	82 e2       	ldi	r24, 0x22	; 34
     87a:	98 e0       	ldi	r25, 0x08	; 8
     87c:	0e 94 90 09 	call	0x1320	; 0x1320 <strcpy>
     880:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <uart1_rx_array_set_empty>
     884:	e2 e2       	ldi	r30, 0x22	; 34
     886:	f8 e0       	ldi	r31, 0x08	; 8
     888:	01 90       	ld	r0, Z+
     88a:	00 20       	and	r0, r0
     88c:	e9 f7       	brne	.-6      	; 0x888 <type_set_process+0x14>
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	e2 52       	subi	r30, 0x22	; 34
     892:	f8 40       	sbci	r31, 0x08	; 8
     894:	e0 93 21 09 	sts	0x0921, r30	; 0x800921 <query_data_flag+0xff>
     898:	86 e5       	ldi	r24, 0x56	; 86
     89a:	95 e0       	ldi	r25, 0x05	; 5
     89c:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     8a0:	6b ec       	ldi	r22, 0xCB	; 203
     8a2:	76 e0       	ldi	r23, 0x06	; 6
     8a4:	82 e2       	ldi	r24, 0x22	; 34
     8a6:	98 e0       	ldi	r25, 0x08	; 8
     8a8:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     8ac:	89 2b       	or	r24, r25
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <type_set_process+0x44>
     8b0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <uart1_rx_array_set_empty>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	08 95       	ret
     8b8:	65 ec       	ldi	r22, 0xC5	; 197
     8ba:	76 e0       	ldi	r23, 0x06	; 6
     8bc:	82 e2       	ldi	r24, 0x22	; 34
     8be:	98 e0       	ldi	r25, 0x08	; 8
     8c0:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     8c4:	89 2b       	or	r24, r25
     8c6:	21 f4       	brne	.+8      	; 0x8d0 <type_set_process+0x5c>
     8c8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <uart1_rx_array_set_empty>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	08 95       	ret

000008d4 <type_info_process>:
     8d4:	cf 93       	push	r28
     8d6:	c8 2f       	mov	r28, r24
     8d8:	61 e4       	ldi	r22, 0x41	; 65
     8da:	7b e0       	ldi	r23, 0x0B	; 11
     8dc:	82 e2       	ldi	r24, 0x22	; 34
     8de:	98 e0       	ldi	r25, 0x08	; 8
     8e0:	0e 94 90 09 	call	0x1320	; 0x1320 <strcpy>
     8e4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <uart1_rx_array_set_empty>
     8e8:	e2 e2       	ldi	r30, 0x22	; 34
     8ea:	f8 e0       	ldi	r31, 0x08	; 8
     8ec:	01 90       	ld	r0, Z+
     8ee:	00 20       	and	r0, r0
     8f0:	e9 f7       	brne	.-6      	; 0x8ec <type_info_process+0x18>
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	e2 52       	subi	r30, 0x22	; 34
     8f6:	f8 40       	sbci	r31, 0x08	; 8
     8f8:	e0 93 21 09 	sts	0x0921, r30	; 0x800921 <query_data_flag+0xff>
     8fc:	85 e7       	ldi	r24, 0x75	; 117
     8fe:	95 e0       	ldi	r25, 0x05	; 5
     900:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     904:	6b ec       	ldi	r22, 0xCB	; 203
     906:	76 e0       	ldi	r23, 0x06	; 6
     908:	82 e2       	ldi	r24, 0x22	; 34
     90a:	98 e0       	ldi	r25, 0x08	; 8
     90c:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     910:	89 2b       	or	r24, r25
     912:	d1 f1       	breq	.+116    	; 0x988 <type_info_process+0xb4>
     914:	40 91 21 09 	lds	r20, 0x0921	; 0x800921 <query_data_flag+0xff>
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	41 15       	cp	r20, r1
     91c:	51 05       	cpc	r21, r1
     91e:	b1 f1       	breq	.+108    	; 0x98c <type_info_process+0xb8>
     920:	70 91 2f 09 	lds	r23, 0x092F	; 0x80092f <query_data_flag+0x10d>
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	ee 5d       	subi	r30, 0xDE	; 222
     92c:	f7 4f       	sbci	r31, 0xF7	; 247
     92e:	20 81       	ld	r18, Z
     930:	2d 30       	cpi	r18, 0x0D	; 13
     932:	11 f5       	brne	.+68     	; 0x978 <type_info_process+0xa4>
     934:	77 23       	and	r23, r23
     936:	a1 f0       	breq	.+40     	; 0x960 <type_info_process+0x8c>
     938:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <query_data_flag+0x10d>
     93c:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <query_data_flag+0x10e>
     940:	8c 2f       	mov	r24, r28
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	fc 01       	movw	r30, r24
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	e8 0f       	add	r30, r24
     94c:	f9 1f       	adc	r31, r25
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	e0 50       	subi	r30, 0x00	; 0
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	04 80       	ldd	r0, Z+4	; 0x04
     958:	f5 81       	ldd	r31, Z+5	; 0x05
     95a:	e0 2d       	mov	r30, r0
     95c:	09 95       	icall
     95e:	17 c0       	rjmp	.+46     	; 0x98e <type_info_process+0xba>
     960:	9c 01       	movw	r18, r24
     962:	2f 5f       	subi	r18, 0xFF	; 255
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	f9 01       	movw	r30, r18
     968:	ee 5d       	subi	r30, 0xDE	; 222
     96a:	f7 4f       	sbci	r31, 0xF7	; 247
     96c:	60 81       	ld	r22, Z
     96e:	6a 30       	cpi	r22, 0x0A	; 10
     970:	19 f4       	brne	.+6      	; 0x978 <type_info_process+0xa4>
     972:	71 e0       	ldi	r23, 0x01	; 1
     974:	72 0f       	add	r23, r18
     976:	c9 01       	movw	r24, r18
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	84 17       	cp	r24, r20
     97c:	95 07       	cpc	r25, r21
     97e:	a0 f2       	brcs	.-88     	; 0x928 <type_info_process+0x54>
     980:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <query_data_flag+0x10d>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	03 c0       	rjmp	.+6      	; 0x98e <type_info_process+0xba>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	01 c0       	rjmp	.+2      	; 0x98e <type_info_process+0xba>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <type_query_process>:
     992:	cf 93       	push	r28
     994:	c8 2f       	mov	r28, r24
     996:	61 e4       	ldi	r22, 0x41	; 65
     998:	7b e0       	ldi	r23, 0x0B	; 11
     99a:	82 e2       	ldi	r24, 0x22	; 34
     99c:	98 e0       	ldi	r25, 0x08	; 8
     99e:	0e 94 90 09 	call	0x1320	; 0x1320 <strcpy>
     9a2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <uart1_rx_array_set_empty>
     9a6:	82 e2       	ldi	r24, 0x22	; 34
     9a8:	98 e0       	ldi	r25, 0x08	; 8
     9aa:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     9ae:	10 92 24 09 	sts	0x0924, r1	; 0x800924 <query_data_flag+0x102>
     9b2:	6b ec       	ldi	r22, 0xCB	; 203
     9b4:	76 e0       	ldi	r23, 0x06	; 6
     9b6:	82 e2       	ldi	r24, 0x22	; 34
     9b8:	98 e0       	ldi	r25, 0x08	; 8
     9ba:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     9be:	89 2b       	or	r24, r25
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <type_query_process+0x32>
     9c2:	51 c0       	rjmp	.+162    	; 0xa66 <type_query_process+0xd4>
     9c4:	6b e2       	ldi	r22, 0x2B	; 43
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	82 e2       	ldi	r24, 0x22	; 34
     9ca:	98 e0       	ldi	r25, 0x08	; 8
     9cc:	0e 94 85 09 	call	0x130a	; 0x130a <strchr>
     9d0:	89 2b       	or	r24, r25
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <type_query_process+0x44>
     9d4:	4a c0       	rjmp	.+148    	; 0xa6a <type_query_process+0xd8>
     9d6:	6a e3       	ldi	r22, 0x3A	; 58
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	82 e2       	ldi	r24, 0x22	; 34
     9dc:	98 e0       	ldi	r25, 0x08	; 8
     9de:	0e 94 85 09 	call	0x130a	; 0x130a <strchr>
     9e2:	89 2b       	or	r24, r25
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <type_query_process+0x56>
     9e6:	43 c0       	rjmp	.+134    	; 0xa6e <type_query_process+0xdc>
     9e8:	e2 e2       	ldi	r30, 0x22	; 34
     9ea:	f8 e0       	ldi	r31, 0x08	; 8
     9ec:	01 90       	ld	r0, Z+
     9ee:	00 20       	and	r0, r0
     9f0:	e9 f7       	brne	.-6      	; 0x9ec <type_query_process+0x5a>
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	e2 52       	subi	r30, 0x22	; 34
     9f6:	f8 40       	sbci	r31, 0x08	; 8
     9f8:	2e 2f       	mov	r18, r30
     9fa:	e0 93 21 09 	sts	0x0921, r30	; 0x800921 <query_data_flag+0xff>
     9fe:	ee 23       	and	r30, r30
     a00:	11 f1       	breq	.+68     	; 0xa46 <type_query_process+0xb4>
     a02:	40 91 22 09 	lds	r20, 0x0922	; 0x800922 <query_data_flag+0x100>
     a06:	50 91 23 09 	lds	r21, 0x0923	; 0x800923 <query_data_flag+0x101>
     a0a:	e2 e2       	ldi	r30, 0x22	; 34
     a0c:	f8 e0       	ldi	r31, 0x08	; 8
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	91 91       	ld	r25, Z+
     a14:	9b 32       	cpi	r25, 0x2B	; 43
     a16:	59 f0       	breq	.+22     	; 0xa2e <type_query_process+0x9c>
     a18:	9a 33       	cpi	r25, 0x3A	; 58
     a1a:	59 f0       	breq	.+22     	; 0xa32 <type_query_process+0xa0>
     a1c:	9c 32       	cpi	r25, 0x2C	; 44
     a1e:	51 f4       	brne	.+20     	; 0xa34 <type_query_process+0xa2>
     a20:	a3 2f       	mov	r26, r19
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	ab 5d       	subi	r26, 0xDB	; 219
     a26:	b6 4f       	sbci	r27, 0xF6	; 246
     a28:	8c 93       	st	X, r24
     a2a:	3f 5f       	subi	r19, 0xFF	; 255
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <type_query_process+0xa2>
     a2e:	48 2f       	mov	r20, r24
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <type_query_process+0xa2>
     a32:	58 2f       	mov	r21, r24
     a34:	8f 5f       	subi	r24, 0xFF	; 255
     a36:	28 13       	cpse	r18, r24
     a38:	ec cf       	rjmp	.-40     	; 0xa12 <type_query_process+0x80>
     a3a:	40 93 22 09 	sts	0x0922, r20	; 0x800922 <query_data_flag+0x100>
     a3e:	50 93 23 09 	sts	0x0923, r21	; 0x800923 <query_data_flag+0x101>
     a42:	30 93 24 09 	sts	0x0924, r19	; 0x800924 <query_data_flag+0x102>
     a46:	8c 2f       	mov	r24, r28
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	fc 01       	movw	r30, r24
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e8 0f       	add	r30, r24
     a52:	f9 1f       	adc	r31, r25
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	e0 50       	subi	r30, 0x00	; 0
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	04 80       	ldd	r0, Z+4	; 0x04
     a5e:	f5 81       	ldd	r31, Z+5	; 0x05
     a60:	e0 2d       	mov	r30, r0
     a62:	09 95       	icall
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <type_query_process+0xde>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <type_query_process+0xde>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <type_query_process+0xde>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <bc95_reboot>:
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void bc95_reboot(){
   bc95_send_string(bc95_reboot_command);
     a74:	81 ee       	ldi	r24, 0xE1	; 225
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 c9 08 	call	0x1192	; 0x1192 <bc95_send_string>
     a7c:	08 95       	ret

00000a7e <bc95_create_socket>:
* 功    能：创建一个socket连接，并将socket编号传递给socket_config.socket_number
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
unsigned char bc95_create_socket(){
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	e1 97       	sbiw	r28, 0x31	; 49
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
	
	/*--------------------------------------
					调试输出
    --------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("--------------------------------------\r\n");
     a9a:	8a ee       	ldi	r24, 0xEA	; 234
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("bc95 start create socket ... \r\n");
     aa2:	85 e9       	ldi	r24, 0x95	; 149
     aa4:	95 e0       	ldi	r25, 0x05	; 5
     aa6:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif

    unsigned char command[30] = {0};
     aaa:	8e 01       	movw	r16, r28
     aac:	0f 5f       	subi	r16, 0xFF	; 255
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	8e e1       	ldi	r24, 0x1E	; 30
     ab2:	f8 01       	movw	r30, r16
     ab4:	11 92       	st	Z+, r1
     ab6:	8a 95       	dec	r24
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <bc95_create_socket+0x36>
    unsigned char command_basic[] = "AT+NSOCR=DGRAM,17,";
     aba:	83 e1       	ldi	r24, 0x13	; 19
     abc:	e8 e1       	ldi	r30, 0x18	; 24
     abe:	f6 e0       	ldi	r31, 0x06	; 6
     ac0:	de 01       	movw	r26, r28
     ac2:	5f 96       	adiw	r26, 0x1f	; 31
     ac4:	01 90       	ld	r0, Z+
     ac6:	0d 92       	st	X+, r0
     ac8:	8a 95       	dec	r24
     aca:	e1 f7       	brne	.-8      	; 0xac4 <bc95_create_socket+0x46>

    /*--------------------------------------
                    构建字符串
    --------------------------------------*/
    strcat(command, command_basic);
     acc:	be 01       	movw	r22, r28
     ace:	61 5e       	subi	r22, 0xE1	; 225
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <strcat>
    strcat(command, socket_config.local_port);
     ad8:	0f 2e       	mov	r0, r31
     ada:	f4 eb       	ldi	r31, 0xB4	; 180
     adc:	ef 2e       	mov	r14, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	ff 2e       	mov	r15, r31
     ae2:	f0 2d       	mov	r31, r0
     ae4:	f7 01       	movw	r30, r14
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	c8 01       	movw	r24, r16
     aec:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <strcat>
    strcat(command, ',');
     af0:	6c e2       	ldi	r22, 0x2C	; 44
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	c8 01       	movw	r24, r16
     af6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <strcat>
    strcat(command, socket_config.receive_control);
     afa:	f7 01       	movw	r30, r14
     afc:	66 81       	ldd	r22, Z+6	; 0x06
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <strcat>
	strcat(command, "\r\n");
     b06:	f8 01       	movw	r30, r16
     b08:	01 90       	ld	r0, Z+
     b0a:	00 20       	and	r0, r0
     b0c:	e9 f7       	brne	.-6      	; 0xb08 <bc95_create_socket+0x8a>
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	8d e0       	ldi	r24, 0x0D	; 13
     b12:	9a e0       	ldi	r25, 0x0A	; 10
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
     b18:	12 82       	std	Z+2, r1	; 0x02

	uart1_rx_array_set_empty();
     b1a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <uart1_rx_array_set_empty>
	//发送给bc95
	bc95_send_string(command);
     b1e:	c8 01       	movw	r24, r16
     b20:	0e 94 c9 08 	call	0x1192	; 0x1192 <bc95_send_string>
	
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 create socket command ---> ");
     b24:	85 eb       	ldi	r24, 0xB5	; 181
     b26:	95 e0       	ldi	r25, 0x05	; 5
     b28:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string(command);
     b2c:	c8 01       	movw	r24, r16
     b2e:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("\r\n");
     b32:	83 ec       	ldi	r24, 0xC3	; 195
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif
	
	strcpy(query_data_flag.message, uart1_rx_data.message);
     b3a:	61 e4       	ldi	r22, 0x41	; 65
     b3c:	7b e0       	ldi	r23, 0x0B	; 11
     b3e:	82 e2       	ldi	r24, 0x22	; 34
     b40:	98 e0       	ldi	r25, 0x08	; 8
     b42:	0e 94 90 09 	call	0x1320	; 0x1320 <strcpy>
	query_data_flag.message_length = strlen(uart1_rx_data.message);
     b46:	e1 e4       	ldi	r30, 0x41	; 65
     b48:	fb e0       	ldi	r31, 0x0B	; 11
     b4a:	01 90       	ld	r0, Z+
     b4c:	00 20       	and	r0, r0
     b4e:	e9 f7       	brne	.-6      	; 0xb4a <bc95_create_socket+0xcc>
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	8f 01       	movw	r16, r30
     b54:	01 54       	subi	r16, 0x41	; 65
     b56:	1b 40       	sbci	r17, 0x0B	; 11
     b58:	00 93 21 09 	sts	0x0921, r16	; 0x800921 <query_data_flag+0xff>
	
	if (strstr(query_data_flag.message, bc95_response_ok) != NULL)
     b5c:	6b ec       	ldi	r22, 0xCB	; 203
     b5e:	76 e0       	ldi	r23, 0x06	; 6
     b60:	82 e2       	ldi	r24, 0x22	; 34
     b62:	98 e0       	ldi	r25, 0x08	; 8
     b64:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
     b68:	89 2b       	or	r24, r25
     b6a:	e9 f1       	breq	.+122    	; 0xbe6 <bc95_create_socket+0x168>
     b6c:	a8 01       	movw	r20, r16
     b6e:	55 27       	eor	r21, r21
	{
		//循环遍历信息
		for (unsigned int i = 0 ; i < query_data_flag.message_length ; i ++){
     b70:	41 15       	cp	r20, r1
     b72:	51 05       	cpc	r21, r1
     b74:	f1 f1       	breq	.+124    	; 0xbf2 <bc95_create_socket+0x174>
     b76:	70 91 2f 09 	lds	r23, 0x092F	; 0x80092f <query_data_flag+0x10d>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
			if (query_data_flag.message[i] == '\r')
     b7e:	fc 01       	movw	r30, r24
     b80:	ee 5d       	subi	r30, 0xDE	; 222
     b82:	f7 4f       	sbci	r31, 0xF7	; 247
     b84:	20 81       	ld	r18, Z
     b86:	2d 30       	cpi	r18, 0x0D	; 13
     b88:	39 f5       	brne	.+78     	; 0xbd8 <bc95_create_socket+0x15a>
			{
				//如果已经找到数据开头，则再次检测到”\r“为结束
				if (query_data_flag.info_offset_start != 0)
     b8a:	77 23       	and	r23, r23
     b8c:	c9 f0       	breq	.+50     	; 0xbc0 <bc95_create_socket+0x142>
     b8e:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <query_data_flag+0x10d>
				{

					socket_config.socket_number = query_data_flag.message[query_data_flag.info_offset_start];
     b92:	04 eb       	ldi	r16, 0xB4	; 180
     b94:	11 e0       	ldi	r17, 0x01	; 1
     b96:	e7 2f       	mov	r30, r23
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ee 5d       	subi	r30, 0xDE	; 222
     b9c:	f7 4f       	sbci	r31, 0xF7	; 247
     b9e:	80 81       	ld	r24, Z
     ba0:	f8 01       	movw	r30, r16
     ba2:	87 83       	std	Z+7, r24	; 0x07
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
					uart0_send_string("bc95 get socket number ---> ");
     ba4:	86 ed       	ldi	r24, 0xD6	; 214
     ba6:	95 e0       	ldi	r25, 0x05	; 5
     ba8:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
					uart0_send_byte(socket_config.socket_number);
     bac:	f8 01       	movw	r30, r16
     bae:	87 81       	ldd	r24, Z+7	; 0x07
     bb0:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
					uart0_send_string("\r\n");
     bb4:	83 ec       	ldi	r24, 0xC3	; 195
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif					
					return 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	19 c0       	rjmp	.+50     	; 0xbf2 <bc95_create_socket+0x174>
				}
				//如果检测到”\r“则直接看下一位是否为”\n“如果是则直接跳过/n到数据位
				if (query_data_flag.message[i+1] == '\n')
     bc0:	9c 01       	movw	r18, r24
     bc2:	2f 5f       	subi	r18, 0xFF	; 255
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	f9 01       	movw	r30, r18
     bc8:	ee 5d       	subi	r30, 0xDE	; 222
     bca:	f7 4f       	sbci	r31, 0xF7	; 247
     bcc:	60 81       	ld	r22, Z
     bce:	6a 30       	cpi	r22, 0x0A	; 10
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <bc95_create_socket+0x15a>
				{
					i++;
					//设置信息开始位置偏移量
					query_data_flag.info_offset_start = i+1;
     bd2:	71 e0       	ldi	r23, 0x01	; 1
     bd4:	72 0f       	add	r23, r18
					return 1;
				}
				//如果检测到”\r“则直接看下一位是否为”\n“如果是则直接跳过/n到数据位
				if (query_data_flag.message[i+1] == '\n')
				{
					i++;
     bd6:	c9 01       	movw	r24, r18
	query_data_flag.message_length = strlen(uart1_rx_data.message);
	
	if (strstr(query_data_flag.message, bc95_response_ok) != NULL)
	{
		//循环遍历信息
		for (unsigned int i = 0 ; i < query_data_flag.message_length ; i ++){
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	84 17       	cp	r24, r20
     bdc:	95 07       	cpc	r25, r21
     bde:	78 f2       	brcs	.-98     	; 0xb7e <bc95_create_socket+0x100>
     be0:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <query_data_flag+0x10d>
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <bc95_create_socket+0x174>
	else{
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
					uart0_send_string("bc95 get socket number ---> ERROR \r\n");
     be6:	83 ef       	ldi	r24, 0xF3	; 243
     be8:	95 e0       	ldi	r25, 0x05	; 5
     bea:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif	
		
		return 'e';
     bee:	85 e6       	ldi	r24, 0x65	; 101
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <bc95_create_socket+0x174>
	}
}
     bf2:	e1 96       	adiw	r28, 0x31	; 49
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	08 95       	ret

00000c0c <init_bc95>:
			在lcd上
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	0f 2e       	mov	r0, r31
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	ef 2e       	mov	r14, r31
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	ff 2e       	mov	r15, r31
     c2a:	f0 2d       	mov	r31, r0
    for (unsigned char i = 0; i < 10; i++)
     c2c:	10 e0       	ldi	r17, 0x00	; 0
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
     c2e:	0f 2e       	mov	r0, r31
     c30:	f2 e2       	ldi	r31, 0x22	; 34
     c32:	af 2e       	mov	r10, r31
     c34:	f8 e0       	ldi	r31, 0x08	; 8
     c36:	bf 2e       	mov	r11, r31
     c38:	f0 2d       	mov	r31, r0
     c3a:	0f 2e       	mov	r0, r31
     c3c:	ff e0       	ldi	r31, 0x0F	; 15
     c3e:	cf 2e       	mov	r12, r31
     c40:	dd 24       	eor	r13, r13
     c42:	d3 94       	inc	r13
     c44:	f0 2d       	mov	r31, r0
     c46:	e7 01       	movw	r28, r14
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
    for (unsigned char i = 0; i < 10; i++)
    {
		bc95_send_string(init_command[i].command);		
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	9b 81       	ldd	r25, Y+3	; 0x03
     c4c:	0e 94 c9 08 	call	0x1192	; 0x1192 <bc95_send_string>
     c50:	2f ef       	ldi	r18, 0xFF	; 255
     c52:	8f eb       	ldi	r24, 0xBF	; 191
     c54:	96 e0       	ldi	r25, 0x06	; 6
     c56:	21 50       	subi	r18, 0x01	; 1
     c58:	80 40       	sbci	r24, 0x00	; 0
     c5a:	90 40       	sbci	r25, 0x00	; 0
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <init_bc95+0x4a>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <init_bc95+0x54>
     c60:	00 00       	nop
        unsigned char	resend_count = RESEND_NUMBER;       //初始化循环检查次数
		_delay_ms(BC95_COMMAND_DELAY);

        //根据发送的数据类型处理bc95返回的数据
        switch (init_command[i].type){
     c62:	88 81       	ld	r24, Y
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	29 f1       	breq	.+74     	; 0xcb2 <init_bc95+0xa6>
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	09 f4       	brne	.+2      	; 0xc6e <init_bc95+0x62>
     c6c:	52 c0       	rjmp	.+164    	; 0xd12 <init_bc95+0x106>
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	09 f0       	breq	.+2      	; 0xc74 <init_bc95+0x68>
     c72:	73 c0       	rjmp	.+230    	; 0xd5a <init_bc95+0x14e>
            case SET:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_set_process() != 1){
     c74:	0e 94 3a 04 	call	0x874	; 0x874 <type_set_process>
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	b1 f4       	brne	.+44     	; 0xca8 <init_bc95+0x9c>
     c7c:	6e c0       	rjmp	.+220    	; 0xd5a <init_bc95+0x14e>
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
						bc95_send_string(init_command[i].command);
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	0e 94 c9 08 	call	0x1192	; 0x1192 <bc95_send_string>
     c86:	ff ef       	ldi	r31, 0xFF	; 255
     c88:	2f eb       	ldi	r18, 0xBF	; 191
     c8a:	86 e0       	ldi	r24, 0x06	; 6
     c8c:	f1 50       	subi	r31, 0x01	; 1
     c8e:	20 40       	sbci	r18, 0x00	; 0
     c90:	80 40       	sbci	r24, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <init_bc95+0x80>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <init_bc95+0x8a>
     c96:	00 00       	nop

						_delay_ms(BC95_COMMAND_DELAY);
						//如果判断成功则退出循环发送下一条指令
                        if (type_set_process() == 1){
     c98:	0e 94 3a 04 	call	0x874	; 0x874 <type_set_process>
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <init_bc95+0x96>
     ca0:	5c c0       	rjmp	.+184    	; 0xd5a <init_bc95+0x14e>
     ca2:	01 50       	subi	r16, 0x01	; 1
        switch (init_command[i].type){
            case SET:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_set_process() != 1){
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
     ca4:	11 f4       	brne	.+4      	; 0xcaa <init_bc95+0x9e>
     ca6:	59 c0       	rjmp	.+178    	; 0xd5a <init_bc95+0x14e>
     ca8:	0e e1       	ldi	r16, 0x1E	; 30
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	39 f3       	breq	.-50     	; 0xc7e <init_bc95+0x72>
     cb0:	54 c0       	rjmp	.+168    	; 0xd5a <init_bc95+0x14e>

                break;

            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
     cb2:	81 2f       	mov	r24, r17
     cb4:	0e 94 c9 04 	call	0x992	; 0x992 <type_query_process>
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	29 f1       	breq	.+74     	; 0xd06 <init_bc95+0xfa>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
     cbc:	f5 01       	movw	r30, r10
     cbe:	c6 01       	movw	r24, r12
     cc0:	11 92       	st	Z+, r1
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	e9 f7       	brne	.-6      	; 0xcc0 <init_bc95+0xb4>
            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
					set_bc95_query_data_flag_empty();			//清空数据标志结构体准备下一次接收
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	e9 f4       	brne	.+58     	; 0xd06 <init_bc95+0xfa>
     ccc:	0e e1       	ldi	r16, 0x1E	; 30
						bc95_send_string(init_command[i].command);
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	9b 81       	ldd	r25, Y+3	; 0x03
     cd2:	0e 94 c9 08 	call	0x1192	; 0x1192 <bc95_send_string>
     cd6:	9f ef       	ldi	r25, 0xFF	; 255
     cd8:	ef eb       	ldi	r30, 0xBF	; 191
     cda:	f6 e0       	ldi	r31, 0x06	; 6
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	e0 40       	sbci	r30, 0x00	; 0
     ce0:	f0 40       	sbci	r31, 0x00	; 0
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <init_bc95+0xd0>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <init_bc95+0xda>
     ce6:	00 00       	nop

						_delay_ms(BC95_COMMAND_DELAY);
                        if (type_query_process(i) == 1){
     ce8:	81 2f       	mov	r24, r17
     cea:	0e 94 c9 04 	call	0x992	; 0x992 <type_query_process>
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	51 f0       	breq	.+20     	; 0xd06 <init_bc95+0xfa>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
     cf2:	f5 01       	movw	r30, r10
     cf4:	c6 01       	movw	r24, r12
     cf6:	11 92       	st	Z+, r1
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	e9 f7       	brne	.-6      	; 0xcf6 <init_bc95+0xea>
     cfc:	01 50       	subi	r16, 0x01	; 1
            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
					set_bc95_query_data_flag_empty();			//清空数据标志结构体准备下一次接收
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
     cfe:	19 f0       	breq	.+6      	; 0xd06 <init_bc95+0xfa>
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	21 f3       	breq	.-56     	; 0xcce <init_bc95+0xc2>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
     d06:	f5 01       	movw	r30, r10
     d08:	c6 01       	movw	r24, r12
     d0a:	11 92       	st	Z+, r1
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	e9 f7       	brne	.-6      	; 0xd0a <init_bc95+0xfe>
     d10:	24 c0       	rjmp	.+72     	; 0xd5a <init_bc95+0x14e>
				set_bc95_query_data_flag_empty();				//清空数据标志结构体准备下一次接收
                break;

            case INFO:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_info_process(i) != 1){
     d12:	81 2f       	mov	r24, r17
     d14:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <type_info_process>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	b1 f4       	brne	.+44     	; 0xd48 <init_bc95+0x13c>
     d1c:	19 c0       	rjmp	.+50     	; 0xd50 <init_bc95+0x144>
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
						bc95_send_string(init_command[i].command);
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	0e 94 c9 08 	call	0x1192	; 0x1192 <bc95_send_string>
     d26:	9f ef       	ldi	r25, 0xFF	; 255
     d28:	ef eb       	ldi	r30, 0xBF	; 191
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	91 50       	subi	r25, 0x01	; 1
     d2e:	e0 40       	sbci	r30, 0x00	; 0
     d30:	f0 40       	sbci	r31, 0x00	; 0
     d32:	e1 f7       	brne	.-8      	; 0xd2c <init_bc95+0x120>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <init_bc95+0x12a>
     d36:	00 00       	nop
						_delay_ms(BC95_COMMAND_DELAY);			//延时一段时间再发送
                        if (type_info_process(i) == 1){
     d38:	81 2f       	mov	r24, r17
     d3a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <type_info_process>
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	39 f0       	breq	.+14     	; 0xd50 <init_bc95+0x144>
     d42:	01 50       	subi	r16, 0x01	; 1

            case INFO:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_info_process(i) != 1){
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
     d44:	11 f4       	brne	.+4      	; 0xd4a <init_bc95+0x13e>
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <init_bc95+0x144>
     d48:	0e e1       	ldi	r16, 0x1E	; 30
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	39 f3       	breq	.-50     	; 0xd1e <init_bc95+0x112>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
     d50:	f5 01       	movw	r30, r10
     d52:	c6 01       	movw	r24, r12
     d54:	11 92       	st	Z+, r1
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	e9 f7       	brne	.-6      	; 0xd54 <init_bc95+0x148>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
    for (unsigned char i = 0; i < 10; i++)
     d5a:	1f 5f       	subi	r17, 0xFF	; 255
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	e9 0e       	add	r14, r25
     d60:	f1 1c       	adc	r15, r1
     d62:	1a 30       	cpi	r17, 0x0A	; 10
     d64:	09 f0       	breq	.+2      	; 0xd68 <init_bc95+0x15c>
     d66:	6f cf       	rjmp	.-290    	; 0xc46 <init_bc95+0x3a>
            default:
                break;
        }
    }
	//创建socket连接
	device_status_bc95.socket_status = bc95_create_socket();
     d68:	0e 94 3f 05 	call	0xa7e	; 0xa7e <bc95_create_socket>
     d6c:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <device_status_bc95+0x36>
	if (device_status_bc95.socket_status == 'e')
     d70:	85 36       	cpi	r24, 0x65	; 101
     d72:	29 f5       	brne	.+74     	; 0xdbe <init_bc95+0x1b2>
	{
		//尝试关闭连接
		bc95_send_string(bc95_close_socket_command);
     d74:	84 ed       	ldi	r24, 0xD4	; 212
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 c9 08 	call	0x1192	; 0x1192 <bc95_send_string>
     d7c:	ef ef       	ldi	r30, 0xFF	; 255
     d7e:	ff eb       	ldi	r31, 0xBF	; 191
     d80:	26 e0       	ldi	r18, 0x06	; 6
     d82:	e1 50       	subi	r30, 0x01	; 1
     d84:	f0 40       	sbci	r31, 0x00	; 0
     d86:	20 40       	sbci	r18, 0x00	; 0
     d88:	e1 f7       	brne	.-8      	; 0xd82 <init_bc95+0x176>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <init_bc95+0x180>
     d8c:	00 00       	nop
		_delay_ms(BC95_COMMAND_DELAY);
/*--------------------------------------
			调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 socket create error try to close socket ... \r\n");
     d8e:	8b e2       	ldi	r24, 0x2B	; 43
     d90:	96 e0       	ldi	r25, 0x06	; 6
     d92:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif
		//重新创建socket连接，如果错误则标记socket创建失败
		device_status_bc95.socket_status = bc95_create_socket();
     d96:	0e 94 3f 05 	call	0xa7e	; 0xa7e <bc95_create_socket>
     d9a:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <device_status_bc95+0x36>
		if (device_status_bc95.socket_status != 'e')
     d9e:	85 36       	cpi	r24, 0x65	; 101
     da0:	41 f0       	breq	.+16     	; 0xdb2 <init_bc95+0x1a6>
		{
			uart0_send_string("bc95 socket try reconnect success ...\r\n");
     da2:	8f e5       	ldi	r24, 0x5F	; 95
     da4:	96 e0       	ldi	r25, 0x06	; 6
     da6:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
			device_status_bc95.socket_status = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <device_status_bc95+0x36>
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <init_bc95+0x1b2>
		}else{
/*--------------------------------------
			调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 rebooting ... \r\n");
     db2:	87 e8       	ldi	r24, 0x87	; 135
     db4:	96 e0       	ldi	r25, 0x06	; 6
     db6:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif
			bc95_reboot();
     dba:	0e 94 3a 05 	call	0xa74	; 0xa74 <bc95_reboot>
		}
	}
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	08 95       	ret

00000dd4 <get_Low_switch>:
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void stop_chongxi(){
	stop_create_water();		//停止制水
	PORTE &= ~(1 << PE6);		//关闭浓水电磁阀
     dd4:	86 b3       	in	r24, 0x16	; 22
     dd6:	86 fb       	bst	r24, 6
     dd8:	88 27       	eor	r24, r24
     dda:	80 f9       	bld	r24, 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	08 95       	ret

00000de0 <get_hight_switch>:
     de0:	86 b3       	in	r24, 0x16	; 22
     de2:	08 2e       	mov	r0, r24
     de4:	00 0c       	add	r0, r0
     de6:	99 0b       	sbc	r25, r25
     de8:	80 95       	com	r24
     dea:	90 95       	com	r25
     dec:	89 2f       	mov	r24, r25
     dee:	88 1f       	adc	r24, r24
     df0:	88 27       	eor	r24, r24
     df2:	88 1f       	adc	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	08 95       	ret

00000df8 <get_all_adc_value>:
}

void get_all_adc_value(){
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <get_all_adc_value+0x14>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <get_all_adc_value+0x16>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <get_all_adc_value+0x18>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	memset(&adc_data, 0, sizeof(struct adc_data_list));
     e14:	0f 2e       	mov	r0, r31
     e16:	fb e3       	ldi	r31, 0x3B	; 59
     e18:	cf 2e       	mov	r12, r31
     e1a:	fb e0       	ldi	r31, 0x0B	; 11
     e1c:	df 2e       	mov	r13, r31
     e1e:	f0 2d       	mov	r31, r0
     e20:	0f 2e       	mov	r0, r31
     e22:	f6 e0       	ldi	r31, 0x06	; 6
     e24:	bf 2e       	mov	r11, r31
     e26:	f0 2d       	mov	r31, r0
     e28:	f6 01       	movw	r30, r12
     e2a:	8b 2d       	mov	r24, r11
     e2c:	11 92       	st	Z+, r1
     e2e:	8a 95       	dec	r24
     e30:	e9 f7       	brne	.-6      	; 0xe2c <get_all_adc_value+0x34>
	
	PORTD	&= ~((1 << PD4) | (1 << PD5));
     e32:	82 b3       	in	r24, 0x12	; 18
     e34:	8f 7c       	andi	r24, 0xCF	; 207
     e36:	82 bb       	out	0x12, r24	; 18
	
	adc_get_pure_water();
     e38:	0e 94 fe 00 	call	0x1fc	; 0x1fc <adc_get_pure_water>
	adc_get_raw_water();
     e3c:	0e 94 0e 01 	call	0x21c	; 0x21c <adc_get_raw_water>
	adc_check_leakage();
     e40:	0e 94 1e 01 	call	0x23c	; 0x23c <adc_check_leakage>
	
	PORTD	|= ((1 << PD4) | (1 << PD5));
     e44:	82 b3       	in	r24, 0x12	; 18
     e46:	80 63       	ori	r24, 0x30	; 48
     e48:	82 bb       	out	0x12, r24	; 18
	
	device_status_lcd.raw_water_tds = voltage_to_tds(adc_data.raw_water);
     e4a:	f6 01       	movw	r30, r12
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	0e 94 42 08 	call	0x1084	; 0x1084 <voltage_to_tds>
     e54:	0f 2e       	mov	r0, r31
     e56:	f4 e3       	ldi	r31, 0x34	; 52
     e58:	ef 2e       	mov	r14, r31
     e5a:	fb e0       	ldi	r31, 0x0B	; 11
     e5c:	ff 2e       	mov	r15, r31
     e5e:	f0 2d       	mov	r31, r0
     e60:	f7 01       	movw	r30, r14
     e62:	94 83       	std	Z+4, r25	; 0x04
     e64:	83 83       	std	Z+3, r24	; 0x03
	device_status_lcd.pure_water_tds = voltage_to_tds(adc_data.pure_water);
     e66:	f6 01       	movw	r30, r12
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0e 94 42 08 	call	0x1084	; 0x1084 <voltage_to_tds>
     e70:	f7 01       	movw	r30, r14
     e72:	96 83       	std	Z+6, r25	; 0x06
     e74:	85 83       	std	Z+5, r24	; 0x05

#ifdef	DEBUG
	unsigned char cache[6] = {0};
     e76:	8e 01       	movw	r16, r28
     e78:	0f 5f       	subi	r16, 0xFF	; 255
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	f8 01       	movw	r30, r16
     e7e:	11 92       	st	Z+, r1
     e80:	ba 94       	dec	r11
     e82:	e9 f7       	brne	.-6      	; 0xe7e <get_all_adc_value+0x86>
	uart0_send_string("--------------------------------------\r\n");
     e84:	8a ee       	ldi	r24, 0xEA	; 234
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("get all adc is run ... \r\n");
     e8c:	82 ed       	ldi	r24, 0xD2	; 210
     e8e:	96 e0       	ldi	r25, 0x06	; 6
     e90:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("leakage ---> ");
     e94:	8c ee       	ldi	r24, 0xEC	; 236
     e96:	96 e0       	ldi	r25, 0x06	; 6
     e98:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     e9c:	4a e0       	ldi	r20, 0x0A	; 10
     e9e:	b8 01       	movw	r22, r16
     ea0:	f6 01       	movw	r30, r12
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	95 81       	ldd	r25, Z+5	; 0x05
     ea6:	0e 94 b1 09 	call	0x1362	; 0x1362 <__itoa_ncheck>
	itoa(adc_data.leakage, cache, 10);
	uart0_send_string(cache);
     eaa:	c8 01       	movw	r24, r16
     eac:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("\r\n");
     eb0:	83 ec       	ldi	r24, 0xC3	; 195
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("raw_water ---> ");
     eb8:	8a ef       	ldi	r24, 0xFA	; 250
     eba:	96 e0       	ldi	r25, 0x06	; 6
     ebc:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     ec0:	4a e0       	ldi	r20, 0x0A	; 10
     ec2:	b8 01       	movw	r22, r16
     ec4:	f7 01       	movw	r30, r14
     ec6:	83 81       	ldd	r24, Z+3	; 0x03
     ec8:	94 81       	ldd	r25, Z+4	; 0x04
     eca:	0e 94 b1 09 	call	0x1362	; 0x1362 <__itoa_ncheck>
	itoa(device_status_lcd.raw_water_tds, cache, 10);
	uart0_send_string(cache);
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("\r\n");
     ed4:	83 ec       	ldi	r24, 0xC3	; 195
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("pure_warter ---> ");
     edc:	8a e0       	ldi	r24, 0x0A	; 10
     ede:	97 e0       	ldi	r25, 0x07	; 7
     ee0:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
     ee4:	4a e0       	ldi	r20, 0x0A	; 10
     ee6:	b8 01       	movw	r22, r16
     ee8:	f7 01       	movw	r30, r14
     eea:	85 81       	ldd	r24, Z+5	; 0x05
     eec:	96 81       	ldd	r25, Z+6	; 0x06
     eee:	0e 94 b1 09 	call	0x1362	; 0x1362 <__itoa_ncheck>
	itoa(device_status_lcd.pure_water_tds, cache, 10);
	uart0_send_string(cache);
     ef2:	c8 01       	movw	r24, r16
     ef4:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
	uart0_send_string("\r\n");
     ef8:	83 ec       	ldi	r24, 0xC3	; 195
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
#endif
     f00:	26 96       	adiw	r28, 0x06	; 6
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	08 95       	ret

00000f20 <tm1726_start>:
void write_string_address_tm1726(unsigned char Address,unsigned char len,unsigned char *Data)
{
	while(len--){
		write_byte_address_tm1726(Address++, *Data++);		
	}
}
     f20:	d8 9a       	sbi	0x1b, 0	; 27
     f22:	d9 9a       	sbi	0x1b, 1	; 27
     f24:	85 e2       	ldi	r24, 0x25	; 37
     f26:	8a 95       	dec	r24
     f28:	f1 f7       	brne	.-4      	; 0xf26 <tm1726_start+0x6>
     f2a:	d8 98       	cbi	0x1b, 0	; 27
     f2c:	85 e2       	ldi	r24, 0x25	; 37
     f2e:	8a 95       	dec	r24
     f30:	f1 f7       	brne	.-4      	; 0xf2e <tm1726_start+0xe>
     f32:	d9 98       	cbi	0x1b, 1	; 27
     f34:	85 e2       	ldi	r24, 0x25	; 37
     f36:	8a 95       	dec	r24
     f38:	f1 f7       	brne	.-4      	; 0xf36 <tm1726_start+0x16>
     f3a:	08 95       	ret

00000f3c <tm1726_stop>:
     f3c:	d8 98       	cbi	0x1b, 0	; 27
     f3e:	d9 9a       	sbi	0x1b, 1	; 27
     f40:	85 e2       	ldi	r24, 0x25	; 37
     f42:	8a 95       	dec	r24
     f44:	f1 f7       	brne	.-4      	; 0xf42 <tm1726_stop+0x6>
     f46:	d8 9a       	sbi	0x1b, 0	; 27
     f48:	85 e2       	ldi	r24, 0x25	; 37
     f4a:	8a 95       	dec	r24
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <tm1726_stop+0xe>
     f4e:	d9 98       	cbi	0x1b, 1	; 27
     f50:	85 e2       	ldi	r24, 0x25	; 37
     f52:	8a 95       	dec	r24
     f54:	f1 f7       	brne	.-4      	; 0xf52 <tm1726_stop+0x16>
     f56:	08 95       	ret

00000f58 <write_byte_tm1726>:
     f58:	d8 98       	cbi	0x1b, 0	; 27
     f5a:	d9 98       	cbi	0x1b, 1	; 27
     f5c:	24 e0       	ldi	r18, 0x04	; 4
     f5e:	2a 95       	dec	r18
     f60:	f1 f7       	brne	.-4      	; 0xf5e <write_byte_tm1726+0x6>
     f62:	98 e0       	ldi	r25, 0x08	; 8
     f64:	d9 98       	cbi	0x1b, 1	; 27
     f66:	80 ff       	sbrs	r24, 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <write_byte_tm1726+0x16>
     f6a:	d8 9a       	sbi	0x1b, 0	; 27
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <write_byte_tm1726+0x18>
     f6e:	d8 98       	cbi	0x1b, 0	; 27
     f70:	24 e0       	ldi	r18, 0x04	; 4
     f72:	2a 95       	dec	r18
     f74:	f1 f7       	brne	.-4      	; 0xf72 <write_byte_tm1726+0x1a>
     f76:	d9 9a       	sbi	0x1b, 1	; 27
     f78:	86 95       	lsr	r24
     f7a:	91 50       	subi	r25, 0x01	; 1
     f7c:	99 f7       	brne	.-26     	; 0xf64 <write_byte_tm1726+0xc>
     f7e:	d9 98       	cbi	0x1b, 1	; 27
     f80:	d8 98       	cbi	0x1b, 0	; 27
     f82:	08 95       	ret

00000f84 <write_all_ram_tm1726>:
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	d8 2f       	mov	r29, r24
     f8a:	d8 9a       	sbi	0x1b, 0	; 27
     f8c:	d9 9a       	sbi	0x1b, 1	; 27
     f8e:	0e 94 90 07 	call	0xf20	; 0xf20 <tm1726_start>
     f92:	84 e0       	ldi	r24, 0x04	; 4
     f94:	8a 95       	dec	r24
     f96:	f1 f7       	brne	.-4      	; 0xf94 <write_all_ram_tm1726+0x10>
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	0e 94 ac 07 	call	0xf58	; 0xf58 <write_byte_tm1726>
     f9e:	c2 e1       	ldi	r28, 0x12	; 18
     fa0:	d8 9a       	sbi	0x1b, 0	; 27
     fa2:	d9 9a       	sbi	0x1b, 1	; 27
     fa4:	dd 23       	and	r29, r29
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <write_all_ram_tm1726+0x2c>
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	0e 94 ac 07 	call	0xf58	; 0xf58 <write_byte_tm1726>
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <write_all_ram_tm1726+0x32>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 ac 07 	call	0xf58	; 0xf58 <write_byte_tm1726>
     fb6:	c1 50       	subi	r28, 0x01	; 1
     fb8:	99 f7       	brne	.-26     	; 0xfa0 <write_all_ram_tm1726+0x1c>
     fba:	0e 94 9e 07 	call	0xf3c	; 0xf3c <tm1726_stop>
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <init_tm1726>:
     fc4:	d8 9a       	sbi	0x1b, 0	; 27
     fc6:	d9 9a       	sbi	0x1b, 1	; 27
     fc8:	0e 94 90 07 	call	0xf20	; 0xf20 <tm1726_start>
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	8a 95       	dec	r24
     fd0:	f1 f7       	brne	.-4      	; 0xfce <init_tm1726+0xa>
     fd2:	87 e3       	ldi	r24, 0x37	; 55
     fd4:	0e 94 ac 07 	call	0xf58	; 0xf58 <write_byte_tm1726>
     fd8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <tm1726_stop>
     fdc:	08 95       	ret

00000fde <init_lcd>:
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_lcd()
{
	init_tm1726();
     fde:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <init_tm1726>
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	8f eb       	ldi	r24, 0xBF	; 191
     fe6:	96 e0       	ldi	r25, 0x06	; 6
     fe8:	21 50       	subi	r18, 0x01	; 1
     fea:	80 40       	sbci	r24, 0x00	; 0
     fec:	90 40       	sbci	r25, 0x00	; 0
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <init_lcd+0xa>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <init_lcd+0x14>
     ff2:	00 00       	nop
	_delay_ms(200);
	write_all_ram_tm1726(1);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_all_ram_tm1726>
     ffa:	2f ef       	ldi	r18, 0xFF	; 255
     ffc:	8f eb       	ldi	r24, 0xBF	; 191
     ffe:	91 e2       	ldi	r25, 0x21	; 33
    1000:	21 50       	subi	r18, 0x01	; 1
    1002:	80 40       	sbci	r24, 0x00	; 0
    1004:	90 40       	sbci	r25, 0x00	; 0
    1006:	e1 f7       	brne	.-8      	; 0x1000 <init_lcd+0x22>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <init_lcd+0x2c>
    100a:	00 00       	nop
	_delay_ms(1000);
	write_all_ram_tm1726(0);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_all_ram_tm1726>
    1012:	08 95       	ret

00001014 <init_port>:
	---------------------------------------
		TM1726	端口初始化
			SDA				PA0		OUT
			SCL				PA1		OUT
	-------------------------------------*/
	DDRA |= ((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3));
    1014:	8a b3       	in	r24, 0x1a	; 26
    1016:	8f 60       	ori	r24, 0x0F	; 15
    1018:	8a bb       	out	0x1a, r24	; 26
		ADC		端口初始化	高阻无上拉输入
				PF5			漏水
				PF6			TDS1		原水
				PF7			TDS2		纯水
	------------------------------------*/
	PORTF	&= ~((1 << PF7) | (1 << PF6 )|(1 << PF5));
    101a:	e2 e6       	ldi	r30, 0x62	; 98
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 71       	andi	r24, 0x1F	; 31
    1022:	80 83       	st	Z, r24
	DDRF	&= ~(( 1<< PF7) | (1 << PF6) |(1 << PF5));
    1024:	e1 e6       	ldi	r30, 0x61	; 97
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 71       	andi	r24, 0x1F	; 31
    102c:	80 83       	st	Z, r24
	/*------------------------------------
		ADC电压	端口初始化	输出，高电平
				PD5		TDS1
				PD4		TDS2
	------------------------------------*/
	DDRD	|= ((1 << PD4) | (1 << PD5));
    102e:	81 b3       	in	r24, 0x11	; 17
    1030:	80 63       	ori	r24, 0x30	; 48
    1032:	81 bb       	out	0x11, r24	; 17
	PORTD	|= ((1 << PD4) | (1 << PD5));
    1034:	82 b3       	in	r24, 0x12	; 18
    1036:	80 63       	ori	r24, 0x30	; 48
    1038:	82 bb       	out	0x12, r24	; 18
	
	/*------------------------------------
		uart	端口初始化
	------------------------------------*/
	DDRE	|=	 (1 << PE1);		//TXD设置为输出
    103a:	11 9a       	sbi	0x02, 1	; 2
	DDRE	&=	~(1 << PE0);		//RXD设置为输入
    103c:	10 98       	cbi	0x02, 0	; 2
	PORTE	&=	 0xFF;				//uart0
    103e:	83 b1       	in	r24, 0x03	; 3
    1040:	83 b9       	out	0x03, r24	; 3
	
	DDRD	|=	 (1 << PD3);		//TXD设置为输出
    1042:	8b 9a       	sbi	0x11, 3	; 17
	DDRD	&=	~(1 << PD2);		//RXD设置为输入
    1044:	8a 98       	cbi	0x11, 2	; 17
	PORTD	&=	 0xFF;				//uart1
    1046:	82 b3       	in	r24, 0x12	; 18
    1048:	82 bb       	out	0x12, r24	; 18
	
	/*------------------------------------
		led		端口初始化
	------------------------------------*/
	DDRC	|=	(1 << PC0);			//PC0设置为输出
    104a:	a0 9a       	sbi	0x14, 0	; 20
	PORTC	|=	(1 << PC0);			//熄灭led
    104c:	a8 9a       	sbi	0x15, 0	; 21
	
	/*------------------------------------
		beep	端口初始化
	------------------------------------*/
	DDRB	|=	 (1 << PB0);		//PB0设置为输出
    104e:	b8 9a       	sbi	0x17, 0	; 23
	PORTB	&=	~(1 << PB0);		//蜂鸣器不响
    1050:	c0 98       	cbi	0x18, 0	; 24

	/*------------------------------------
		TM1726背光灯	端口初始化
	------------------------------------*/
	DDRE	|=	(1 << PE2);			//PE2设置为输出
    1052:	12 9a       	sbi	0x02, 2	; 2
	PORTE	|=	(1 << PE2);			//打开背光	
    1054:	1a 9a       	sbi	0x03, 2	; 3
	/*------------------------------------
		TM1726串行	端口初始化
			PA0		SDA		设置为输出
			PA1		SCL		设置为输出
	------------------------------------*/	
	DDRA	|=	((1 << PA0) | (1 << PA1));
    1056:	8a b3       	in	r24, 0x1a	; 26
    1058:	83 60       	ori	r24, 0x03	; 3
    105a:	8a bb       	out	0x1a, r24	; 26
	PORTA	|=	((1 << PA0) | (1 << PA1));
    105c:	8b b3       	in	r24, 0x1b	; 27
    105e:	83 60       	ori	r24, 0x03	; 3
    1060:	8b bb       	out	0x1b, r24	; 27
		电磁阀	端口初始化
			PE7		进水电磁阀		设置为输出
			PE6		出水电磁阀		设置为输出
			初始化为关闭
	------------------------------------*/	
	DDRE	|=	((1 << PE7) | (1 << PE6));
    1062:	82 b1       	in	r24, 0x02	; 2
    1064:	80 6c       	ori	r24, 0xC0	; 192
    1066:	82 b9       	out	0x02, r24	; 2
	PORTE	&= ~((1 << PE7) | (1 << PE6));
    1068:	83 b1       	in	r24, 0x03	; 3
    106a:	8f 73       	andi	r24, 0x3F	; 63
    106c:	83 b9       	out	0x03, r24	; 3
	
	/*------------------------------------
		水泵	端口初始化
	------------------------------------*/	
	DDRB	|=	(1 << PB2);			//PB2设置为输出
    106e:	ba 9a       	sbi	0x17, 2	; 23
	PORTB	&= ~(1 << PB2);			//初始化为关闭
    1070:	c2 98       	cbi	0x18, 2	; 24
		压力开关	端口初始化	
			PB6		低压开关
			PB7		高压开关
		初始化为输入
	------------------------------------*/	
	DDRB	&= ~((1 << PB6) | (1 << PB7));
    1072:	87 b3       	in	r24, 0x17	; 23
    1074:	8f 73       	andi	r24, 0x3F	; 63
    1076:	87 bb       	out	0x17, r24	; 23
	PORTB	|=	((1 << PB6) | (1 << PB7));
    1078:	88 b3       	in	r24, 0x18	; 24
    107a:	80 6c       	ori	r24, 0xC0	; 192
    107c:	88 bb       	out	0x18, r24	; 24
	
	/*------------------------------------
		流量计	端口初始化	
		初始化为上拉输入
	------------------------------------*/	
	DDRD  &= ~(0x1<<PD6);
    107e:	8e 98       	cbi	0x11, 6	; 17
	PORTD |= (0x1<<PD6);
    1080:	96 9a       	sbi	0x12, 6	; 18
    1082:	08 95       	ret

00001084 <voltage_to_tds>:
#define  Q_cm 357



unsigned int voltage_to_tds(unsigned int adc)
{
    1084:	9c 01       	movw	r18, r24
	// 	unsigned int G_us = I_mA/U_mV ;
	// 	unsigned int K = G * Q; //(K单位是uS/cm)
	// 	unsigned int tds = K >> 2;
	unsigned int G_us = 0, K = 0;
	unsigned int a = 0,b = 0, n = 0, s = 0;
	a = 1024 - adc;
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	94 e0       	ldi	r25, 0x04	; 4
    108a:	82 1b       	sub	r24, r18
    108c:	93 0b       	sbc	r25, r19
    108e:	43 e0       	ldi	r20, 0x03	; 3
	// 	unsigned int I_mA = (E_mV - U_mV) / 2000;	//（R0 = 2000）
	// 	unsigned int G_us = I_mA/U_mV ;
	// 	unsigned int K = G * Q; //(K单位是uS/cm)
	// 	unsigned int tds = K >> 2;
	unsigned int G_us = 0, K = 0;
	unsigned int a = 0,b = 0, n = 0, s = 0;
    1090:	e0 e0       	ldi	r30, 0x00	; 0
    1092:	f0 e0       	ldi	r31, 0x00	; 0
	a = 1024 - adc;
	for(unsigned char i = 0; i < 3 ; i++)//取3个有效位
	{
		n =	a/ adc;
    1094:	b9 01       	movw	r22, r18
    1096:	0e 94 57 09 	call	0x12ae	; 0x12ae <__udivmodhi4>
		b = a% adc;
		a = b*10;
    109a:	dc 01       	movw	r26, r24
    109c:	aa 0f       	add	r26, r26
    109e:	bb 1f       	adc	r27, r27
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	8a 0f       	add	r24, r26
    10ae:	9b 1f       	adc	r25, r27
		s = s * 10 + n;
    10b0:	df 01       	movw	r26, r30
    10b2:	aa 0f       	add	r26, r26
    10b4:	bb 1f       	adc	r27, r27
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	ea 0f       	add	r30, r26
    10c4:	fb 1f       	adc	r31, r27
    10c6:	e6 0f       	add	r30, r22
    10c8:	f7 1f       	adc	r31, r23
    10ca:	41 50       	subi	r20, 0x01	; 1
	// 	unsigned int K = G * Q; //(K单位是uS/cm)
	// 	unsigned int tds = K >> 2;
	unsigned int G_us = 0, K = 0;
	unsigned int a = 0,b = 0, n = 0, s = 0;
	a = 1024 - adc;
	for(unsigned char i = 0; i < 3 ; i++)//取3个有效位
    10cc:	19 f7       	brne	.-58     	; 0x1094 <voltage_to_tds+0x10>
		s = s * 10 + n;
	}
	G_us = s * 5;
	//	G_us = (1024 - adc) * 10e6  / (2000 * y);
	K	= G_us * Q_cm/100;
	return (K>>2);
    10ce:	89 ef       	ldi	r24, 0xF9	; 249
    10d0:	96 e0       	ldi	r25, 0x06	; 6
    10d2:	e8 9f       	mul	r30, r24
    10d4:	90 01       	movw	r18, r0
    10d6:	e9 9f       	mul	r30, r25
    10d8:	30 0d       	add	r19, r0
    10da:	f8 9f       	mul	r31, r24
    10dc:	30 0d       	add	r19, r0
    10de:	11 24       	eor	r1, r1
    10e0:	36 95       	lsr	r19
    10e2:	27 95       	ror	r18
    10e4:	36 95       	lsr	r19
    10e6:	27 95       	ror	r18
    10e8:	ab e7       	ldi	r26, 0x7B	; 123
    10ea:	b4 e1       	ldi	r27, 0x14	; 20
    10ec:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__umulhisi3>
	//	return ((1024-adc)*125/(adc));
}
    10f0:	96 95       	lsr	r25
    10f2:	87 95       	ror	r24
    10f4:	96 95       	lsr	r25
    10f6:	87 95       	ror	r24
    10f8:	96 95       	lsr	r25
    10fa:	87 95       	ror	r24
    10fc:	08 95       	ret

000010fe <init_uart0>:
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void uart0_rx_array_set_empty(){
	memset(uart0_rx_array , 0 , sizeof(uart0_rx_array));
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1104:	87 e4       	ldi	r24, 0x47	; 71
    1106:	89 b9       	out	0x09, r24	; 9
    1108:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    110c:	8a b1       	in	r24, 0x0a	; 10
    110e:	88 69       	ori	r24, 0x98	; 152
    1110:	8a b9       	out	0x0a, r24	; 10
    1112:	08 95       	ret

00001114 <init_uart1>:
    1114:	ed e9       	ldi	r30, 0x9D	; 157
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	86 60       	ori	r24, 0x06	; 6
    111c:	80 83       	st	Z, r24
    111e:	8f e8       	ldi	r24, 0x8F	; 143
    1120:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1124:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1128:	eb e9       	ldi	r30, 0x9B	; 155
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	80 83       	st	Z, r24
    1132:	ea e9       	ldi	r30, 0x9A	; 154
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	88 69       	ori	r24, 0x98	; 152
    113a:	80 83       	st	Z, r24
    113c:	08 95       	ret

0000113e <uart0_send_byte>:
    113e:	5d 9b       	sbis	0x0b, 5	; 11
    1140:	fe cf       	rjmp	.-4      	; 0x113e <uart0_send_byte>
    1142:	8c b9       	out	0x0c, r24	; 12
    1144:	08 95       	ret

00001146 <uart0_send_string>:
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
    114c:	88 81       	ld	r24, Y
    114e:	88 23       	and	r24, r24
    1150:	31 f0       	breq	.+12     	; 0x115e <uart0_send_string+0x18>
    1152:	21 96       	adiw	r28, 0x01	; 1
    1154:	0e 94 9f 08 	call	0x113e	; 0x113e <uart0_send_byte>
    1158:	89 91       	ld	r24, Y+
    115a:	81 11       	cpse	r24, r1
    115c:	fb cf       	rjmp	.-10     	; 0x1154 <uart0_send_string+0xe>
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <uart1_send_byte>:
    1164:	eb e9       	ldi	r30, 0x9B	; 155
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	90 81       	ld	r25, Z
    116a:	95 ff       	sbrs	r25, 5
    116c:	fd cf       	rjmp	.-6      	; 0x1168 <uart1_send_byte+0x4>
    116e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1172:	08 95       	ret

00001174 <uart1_send_string>:
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
    117a:	88 81       	ld	r24, Y
    117c:	88 23       	and	r24, r24
    117e:	31 f0       	breq	.+12     	; 0x118c <uart1_send_string+0x18>
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	0e 94 b2 08 	call	0x1164	; 0x1164 <uart1_send_byte>
    1186:	89 91       	ld	r24, Y+
    1188:	81 11       	cpse	r24, r1
    118a:	fb cf       	rjmp	.-10     	; 0x1182 <uart1_send_string+0xe>
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <bc95_send_string>:
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	ec 01       	movw	r28, r24
    1198:	0e 94 a3 08 	call	0x1146	; 0x1146 <uart0_send_string>
    119c:	ce 01       	movw	r24, r28
    119e:	0e 94 ba 08 	call	0x1174	; 0x1174 <uart1_send_string>
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <uart1_rx_array_set_empty>:
    11a8:	89 ec       	ldi	r24, 0xC9	; 201
    11aa:	e1 e4       	ldi	r30, 0x41	; 65
    11ac:	fb e0       	ldi	r31, 0x0B	; 11
    11ae:	df 01       	movw	r26, r30
    11b0:	1d 92       	st	X+, r1
    11b2:	8a 95       	dec	r24
    11b4:	e9 f7       	brne	.-6      	; 0x11b0 <uart1_rx_array_set_empty+0x8>
    11b6:	08 95       	ret

000011b8 <__vector_18>:
* 中断向量：USART0_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART0_RX_vect){
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
	if (uart0_rx_count >= UART0_RX_ARRAY_LEN)
    11ca:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uart0_rx_count>
    11ce:	88 3c       	cpi	r24, 0xC8	; 200
    11d0:	10 f0       	brcs	.+4      	; 0x11d6 <__vector_18+0x1e>
	{
		uart0_rx_count = 0;
    11d2:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <uart0_rx_count>
	}
	while(!(UCSR0A & (1 << RXC0)));		//判断缓冲区是否有数据
    11d6:	5f 9b       	sbis	0x0b, 7	; 11
    11d8:	fe cf       	rjmp	.-4      	; 0x11d6 <__vector_18+0x1e>
	uart0_rx_array[uart0_rx_count] = UDR0;
    11da:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uart0_rx_count>
    11de:	9c b1       	in	r25, 0x0c	; 12
    11e0:	e8 2f       	mov	r30, r24
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	ee 5b       	subi	r30, 0xBE	; 190
    11e6:	f8 4f       	sbci	r31, 0xF8	; 248
    11e8:	90 83       	st	Z, r25
	uart0_rx_count++;
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <uart0_rx_count>
	
}
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_30>:
* 中断向量：USART1_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART1_RX_vect){
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
	//如果接收数据的数组长度大于定义的最大长度则将计数清0
	if (uart1_rx_data.message_length >= UART1_RX_ARRAY_LEN)
    1224:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <uart1_rx_data+0xc8>
    1228:	88 3c       	cpi	r24, 0xC8	; 200
    122a:	10 f0       	brcs	.+4      	; 0x1230 <__vector_30+0x2e>
	{
		uart1_rx_data.message_length = 0;
    122c:	10 92 09 0c 	sts	0x0C09, r1	; 0x800c09 <uart1_rx_data+0xc8>
	}
	
	while( !(UCSR1A & (1<<RXC1)) );								//判断缓冲区是否有数据
    1230:	eb e9       	ldi	r30, 0x9B	; 155
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	88 23       	and	r24, r24
    1238:	ec f7       	brge	.-6      	; 0x1234 <__vector_30+0x32>
	uart1_rx_data.message[uart1_rx_data.message_length] = UDR1;		//保存接收到的数据
    123a:	a9 e0       	ldi	r26, 0x09	; 9
    123c:	bc e0       	ldi	r27, 0x0C	; 12
    123e:	8c 91       	ld	r24, X
    1240:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1244:	e8 2f       	mov	r30, r24
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	ef 5b       	subi	r30, 0xBF	; 191
    124a:	f4 4f       	sbci	r31, 0xF4	; 244
    124c:	90 83       	st	Z, r25
	uart1_rx_data.message_length++;									//计数
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	8c 93       	st	X, r24
	
	if (uart1_rx_data.message_length >= 10)
    1252:	8a 30       	cpi	r24, 0x0A	; 10
    1254:	b8 f0       	brcs	.+46     	; 0x1284 <__vector_30+0x82>
	{
		
		//如果检测到接收数据，则标记接收到消息，
		if (strstr(uart1_rx_data.message, "+NSONMI:") != NULL)
    1256:	6c e1       	ldi	r22, 0x1C	; 28
    1258:	77 e0       	ldi	r23, 0x07	; 7
    125a:	81 e4       	ldi	r24, 0x41	; 65
    125c:	9b e0       	ldi	r25, 0x0B	; 11
    125e:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
    1262:	89 2b       	or	r24, r25
    1264:	21 f0       	breq	.+8      	; 0x126e <__vector_30+0x6c>
		{
			device_status_bc95.have_receive = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <device_status_bc95+0x35>
    126c:	0b c0       	rjmp	.+22     	; 0x1284 <__vector_30+0x82>
			//如果检测到bc95模块重启则重新初始化
		}else if (strstr(uart1_rx_data.message, "REBOOT_CAU") != NULL)
    126e:	65 e2       	ldi	r22, 0x25	; 37
    1270:	77 e0       	ldi	r23, 0x07	; 7
    1272:	81 e4       	ldi	r24, 0x41	; 65
    1274:	9b e0       	ldi	r25, 0x0B	; 11
    1276:	0e 94 97 09 	call	0x132e	; 0x132e <strstr>
    127a:	89 2b       	or	r24, r25
    127c:	19 f0       	breq	.+6      	; 0x1284 <__vector_30+0x82>
		{
			device_status_bc95.have_reboot = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 3e 0c 	sts	0x0C3E, r24	; 0x800c3e <device_status_bc95+0x34>
		}
		
	}
	
	LED_REVERSE;
    1284:	95 b3       	in	r25, 0x15	; 21
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 27       	eor	r24, r25
    128a:	85 bb       	out	0x15, r24	; 21
}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	bf 91       	pop	r27
    1292:	af 91       	pop	r26
    1294:	9f 91       	pop	r25
    1296:	8f 91       	pop	r24
    1298:	7f 91       	pop	r23
    129a:	6f 91       	pop	r22
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__udivmodhi4>:
    12ae:	aa 1b       	sub	r26, r26
    12b0:	bb 1b       	sub	r27, r27
    12b2:	51 e1       	ldi	r21, 0x11	; 17
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <__udivmodhi4_ep>

000012b6 <__udivmodhi4_loop>:
    12b6:	aa 1f       	adc	r26, r26
    12b8:	bb 1f       	adc	r27, r27
    12ba:	a6 17       	cp	r26, r22
    12bc:	b7 07       	cpc	r27, r23
    12be:	10 f0       	brcs	.+4      	; 0x12c4 <__udivmodhi4_ep>
    12c0:	a6 1b       	sub	r26, r22
    12c2:	b7 0b       	sbc	r27, r23

000012c4 <__udivmodhi4_ep>:
    12c4:	88 1f       	adc	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	5a 95       	dec	r21
    12ca:	a9 f7       	brne	.-22     	; 0x12b6 <__udivmodhi4_loop>
    12cc:	80 95       	com	r24
    12ce:	90 95       	com	r25
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	08 95       	ret

000012d6 <__umulhisi3>:
    12d6:	a2 9f       	mul	r26, r18
    12d8:	b0 01       	movw	r22, r0
    12da:	b3 9f       	mul	r27, r19
    12dc:	c0 01       	movw	r24, r0
    12de:	a3 9f       	mul	r26, r19
    12e0:	70 0d       	add	r23, r0
    12e2:	81 1d       	adc	r24, r1
    12e4:	11 24       	eor	r1, r1
    12e6:	91 1d       	adc	r25, r1
    12e8:	b2 9f       	mul	r27, r18
    12ea:	70 0d       	add	r23, r0
    12ec:	81 1d       	adc	r24, r1
    12ee:	11 24       	eor	r1, r1
    12f0:	91 1d       	adc	r25, r1
    12f2:	08 95       	ret

000012f4 <strcat>:
    12f4:	fb 01       	movw	r30, r22
    12f6:	dc 01       	movw	r26, r24
    12f8:	0d 90       	ld	r0, X+
    12fa:	00 20       	and	r0, r0
    12fc:	e9 f7       	brne	.-6      	; 0x12f8 <strcat+0x4>
    12fe:	11 97       	sbiw	r26, 0x01	; 1
    1300:	01 90       	ld	r0, Z+
    1302:	0d 92       	st	X+, r0
    1304:	00 20       	and	r0, r0
    1306:	e1 f7       	brne	.-8      	; 0x1300 <strcat+0xc>
    1308:	08 95       	ret

0000130a <strchr>:
    130a:	fc 01       	movw	r30, r24
    130c:	81 91       	ld	r24, Z+
    130e:	86 17       	cp	r24, r22
    1310:	21 f0       	breq	.+8      	; 0x131a <strchr+0x10>
    1312:	88 23       	and	r24, r24
    1314:	d9 f7       	brne	.-10     	; 0x130c <strchr+0x2>
    1316:	99 27       	eor	r25, r25
    1318:	08 95       	ret
    131a:	31 97       	sbiw	r30, 0x01	; 1
    131c:	cf 01       	movw	r24, r30
    131e:	08 95       	ret

00001320 <strcpy>:
    1320:	fb 01       	movw	r30, r22
    1322:	dc 01       	movw	r26, r24
    1324:	01 90       	ld	r0, Z+
    1326:	0d 92       	st	X+, r0
    1328:	00 20       	and	r0, r0
    132a:	e1 f7       	brne	.-8      	; 0x1324 <strcpy+0x4>
    132c:	08 95       	ret

0000132e <strstr>:
    132e:	fb 01       	movw	r30, r22
    1330:	51 91       	ld	r21, Z+
    1332:	55 23       	and	r21, r21
    1334:	a9 f0       	breq	.+42     	; 0x1360 <strstr+0x32>
    1336:	bf 01       	movw	r22, r30
    1338:	dc 01       	movw	r26, r24
    133a:	4d 91       	ld	r20, X+
    133c:	45 17       	cp	r20, r21
    133e:	41 11       	cpse	r20, r1
    1340:	e1 f7       	brne	.-8      	; 0x133a <strstr+0xc>
    1342:	59 f4       	brne	.+22     	; 0x135a <strstr+0x2c>
    1344:	cd 01       	movw	r24, r26
    1346:	01 90       	ld	r0, Z+
    1348:	00 20       	and	r0, r0
    134a:	49 f0       	breq	.+18     	; 0x135e <strstr+0x30>
    134c:	4d 91       	ld	r20, X+
    134e:	40 15       	cp	r20, r0
    1350:	41 11       	cpse	r20, r1
    1352:	c9 f3       	breq	.-14     	; 0x1346 <strstr+0x18>
    1354:	fb 01       	movw	r30, r22
    1356:	41 11       	cpse	r20, r1
    1358:	ef cf       	rjmp	.-34     	; 0x1338 <strstr+0xa>
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	08 95       	ret

00001362 <__itoa_ncheck>:
    1362:	bb 27       	eor	r27, r27
    1364:	4a 30       	cpi	r20, 0x0A	; 10
    1366:	31 f4       	brne	.+12     	; 0x1374 <__itoa_ncheck+0x12>
    1368:	99 23       	and	r25, r25
    136a:	22 f4       	brpl	.+8      	; 0x1374 <__itoa_ncheck+0x12>
    136c:	bd e2       	ldi	r27, 0x2D	; 45
    136e:	90 95       	com	r25
    1370:	81 95       	neg	r24
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__utoa_common>

00001378 <__utoa_ncheck>:
    1378:	bb 27       	eor	r27, r27

0000137a <__utoa_common>:
    137a:	fb 01       	movw	r30, r22
    137c:	55 27       	eor	r21, r21
    137e:	aa 27       	eor	r26, r26
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	aa 1f       	adc	r26, r26
    1386:	a4 17       	cp	r26, r20
    1388:	10 f0       	brcs	.+4      	; 0x138e <__utoa_common+0x14>
    138a:	a4 1b       	sub	r26, r20
    138c:	83 95       	inc	r24
    138e:	50 51       	subi	r21, 0x10	; 16
    1390:	b9 f7       	brne	.-18     	; 0x1380 <__utoa_common+0x6>
    1392:	a0 5d       	subi	r26, 0xD0	; 208
    1394:	aa 33       	cpi	r26, 0x3A	; 58
    1396:	08 f0       	brcs	.+2      	; 0x139a <__utoa_common+0x20>
    1398:	a9 5d       	subi	r26, 0xD9	; 217
    139a:	a1 93       	st	Z+, r26
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	79 f7       	brne	.-34     	; 0x137e <__utoa_common+0x4>
    13a0:	b1 11       	cpse	r27, r1
    13a2:	b1 93       	st	Z+, r27
    13a4:	11 92       	st	Z+, r1
    13a6:	cb 01       	movw	r24, r22
    13a8:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <strrev>

000013ac <strrev>:
    13ac:	dc 01       	movw	r26, r24
    13ae:	fc 01       	movw	r30, r24
    13b0:	67 2f       	mov	r22, r23
    13b2:	71 91       	ld	r23, Z+
    13b4:	77 23       	and	r23, r23
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <strrev+0x4>
    13b8:	32 97       	sbiw	r30, 0x02	; 2
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <strrev+0x18>
    13bc:	7c 91       	ld	r23, X
    13be:	6d 93       	st	X+, r22
    13c0:	70 83       	st	Z, r23
    13c2:	62 91       	ld	r22, -Z
    13c4:	ae 17       	cp	r26, r30
    13c6:	bf 07       	cpc	r27, r31
    13c8:	c8 f3       	brcs	.-14     	; 0x13bc <strrev+0x10>
    13ca:	08 95       	ret

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
