
NB-IOT_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a3  00800100  00800100  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d7  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb1  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a27  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00002eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064f  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a28  00000000  00000000  000037a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000041cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_18>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_21>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_30>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	22 e0       	ldi	r18, 0x02	; 2
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a3 3a       	cpi	r26, 0xA3	; 163
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  c2:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__vector_21>:
	
	ADMUX =	(ADMUX&0xe0) | channel;			//不改变其他配置，并设置通道
	ADCSRA |= (1 << ADSC);					//启动转换
}

SIGNAL(ADC_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	adc_channel_data_list[adc_interrupt_channel_cache] = (ADCL | ADCH << 8);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	25 b1       	in	r18, 0x05	; 5
  e2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_end>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ef 5f       	subi	r30, 0xFF	; 255
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	92 2b       	or	r25, r18
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:
#include "app.h"


int main(void)
{
	port_init();
 10c:	0e 94 06 01 	call	0x20c	; 0x20c <port_init>
	lcd_init();
 110:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_init>
	write_all_ram_tm1726(1);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 c1 00 	call	0x182	; 0x182 <write_all_ram_tm1726>
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0xe>

0000011c <tm1726_start>:
		TM1726_SDA_1;
		TM1726_SCL_1;
		write_byte_tm1726((*(Data + i)));
	}
	tm1726_stop();
}
 11c:	d8 9a       	sbi	0x1b, 0	; 27
 11e:	d9 9a       	sbi	0x1b, 1	; 27
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <tm1726_start+0x6>
 126:	d8 98       	cbi	0x1b, 0	; 27
 128:	85 e2       	ldi	r24, 0x25	; 37
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <tm1726_start+0xe>
 12e:	d9 98       	cbi	0x1b, 1	; 27
 130:	85 e2       	ldi	r24, 0x25	; 37
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <tm1726_start+0x16>
 136:	08 95       	ret

00000138 <tm1726_stop>:
 138:	d8 98       	cbi	0x1b, 0	; 27
 13a:	d9 9a       	sbi	0x1b, 1	; 27
 13c:	85 e2       	ldi	r24, 0x25	; 37
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <tm1726_stop+0x6>
 142:	d8 9a       	sbi	0x1b, 0	; 27
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <tm1726_stop+0xe>
 14a:	d9 98       	cbi	0x1b, 1	; 27
 14c:	85 e2       	ldi	r24, 0x25	; 37
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <tm1726_stop+0x16>
 152:	08 95       	ret

00000154 <write_byte_tm1726>:
 154:	d8 98       	cbi	0x1b, 0	; 27
 156:	d9 98       	cbi	0x1b, 1	; 27
 158:	24 e0       	ldi	r18, 0x04	; 4
 15a:	2a 95       	dec	r18
 15c:	f1 f7       	brne	.-4      	; 0x15a <write_byte_tm1726+0x6>
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	d9 98       	cbi	0x1b, 1	; 27
 162:	28 2f       	mov	r18, r24
 164:	29 23       	and	r18, r25
 166:	11 f0       	breq	.+4      	; 0x16c <write_byte_tm1726+0x18>
 168:	d8 9a       	sbi	0x1b, 0	; 27
 16a:	01 c0       	rjmp	.+2      	; 0x16e <write_byte_tm1726+0x1a>
 16c:	d8 98       	cbi	0x1b, 0	; 27
 16e:	24 e0       	ldi	r18, 0x04	; 4
 170:	2a 95       	dec	r18
 172:	f1 f7       	brne	.-4      	; 0x170 <write_byte_tm1726+0x1c>
 174:	d9 9a       	sbi	0x1b, 1	; 27
 176:	99 0f       	add	r25, r25
 178:	91 38       	cpi	r25, 0x81	; 129
 17a:	90 f3       	brcs	.-28     	; 0x160 <write_byte_tm1726+0xc>
 17c:	d9 98       	cbi	0x1b, 1	; 27
 17e:	d8 98       	cbi	0x1b, 0	; 27
 180:	08 95       	ret

00000182 <write_all_ram_tm1726>:
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	d8 2f       	mov	r29, r24
 188:	d8 9a       	sbi	0x1b, 0	; 27
 18a:	d9 9a       	sbi	0x1b, 1	; 27
 18c:	0e 94 8e 00 	call	0x11c	; 0x11c <tm1726_start>
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <write_all_ram_tm1726+0x10>
 196:	80 ec       	ldi	r24, 0xC0	; 192
 198:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 19c:	c2 e1       	ldi	r28, 0x12	; 18
 19e:	d8 9a       	sbi	0x1b, 0	; 27
 1a0:	d9 9a       	sbi	0x1b, 1	; 27
 1a2:	dd 23       	and	r29, r29
 1a4:	21 f0       	breq	.+8      	; 0x1ae <write_all_ram_tm1726+0x2c>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <write_all_ram_tm1726+0x32>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 1b4:	c1 50       	subi	r28, 0x01	; 1
 1b6:	99 f7       	brne	.-26     	; 0x19e <write_all_ram_tm1726+0x1c>
 1b8:	0e 94 9c 00 	call	0x138	; 0x138 <tm1726_stop>
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <init_tm1726>:
 1c2:	d8 9a       	sbi	0x1b, 0	; 27
 1c4:	d9 9a       	sbi	0x1b, 1	; 27
 1c6:	0e 94 8e 00 	call	0x11c	; 0x11c <tm1726_start>
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <init_tm1726+0xa>
 1d0:	87 e3       	ldi	r24, 0x37	; 55
 1d2:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 1d6:	0e 94 9c 00 	call	0x138	; 0x138 <tm1726_stop>
 1da:	08 95       	ret

000001dc <lcd_init>:


void lcd_init()
{
	init_tm1726();
 1dc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <init_tm1726>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	8f eb       	ldi	r24, 0xBF	; 191
 1e4:	96 e0       	ldi	r25, 0x06	; 6
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <lcd_init+0xa>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_init+0x14>
 1f0:	00 00       	nop
	_delay_ms(200);
	write_all_ram_tm1726(1);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 c1 00 	call	0x182	; 0x182 <write_all_ram_tm1726>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	8f eb       	ldi	r24, 0xBF	; 191
 1fc:	91 e2       	ldi	r25, 0x21	; 33
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <lcd_init+0x22>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_init+0x2c>
 208:	00 00       	nop
 20a:	08 95       	ret

0000020c <port_init>:
	---------------------------------------
		TM1726	端口初始化
			SDA				PA0		OUT
			SCL				PA1		OUT
	-------------------------------------*/
	DDRA |= ((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3));
 20c:	8a b3       	in	r24, 0x1a	; 26
 20e:	8f 60       	ori	r24, 0x0F	; 15
 210:	8a bb       	out	0x1a, r24	; 26
	
	/*------------------------------------
		ADC		端口初始化
	------------------------------------*/
	PORTF &= ~((0x01<< PF7) | (0x01<<PF6 )|(0x01<<PF5));
 212:	e2 e6       	ldi	r30, 0x62	; 98
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	8f 71       	andi	r24, 0x1F	; 31
 21a:	80 83       	st	Z, r24
	DDRF  &= ~((0x01<< PF7) | (0x01<<PF6) |(0x01<<PF5));
 21c:	e1 e6       	ldi	r30, 0x61	; 97
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8f 71       	andi	r24, 0x1F	; 31
 224:	80 83       	st	Z, r24
	
	/*------------------------------------
		uart	端口初始化
	------------------------------------*/
	DDRE	|=	 (1 << PE1);		//TXD设置为输出
 226:	11 9a       	sbi	0x02, 1	; 2
	DDRE	&=	~(1 << PE0);		//RXD设置为输入
 228:	10 98       	cbi	0x02, 0	; 2
	PORTE	&=	 0xFF;				//uart0
 22a:	83 b1       	in	r24, 0x03	; 3
 22c:	83 b9       	out	0x03, r24	; 3
	
	DDRD	|=	 (1 << PD3);		//TXD设置为输出
 22e:	8b 9a       	sbi	0x11, 3	; 17
	DDRD	&=	~(1 << PD2);		//RXD设置为输入
 230:	8a 98       	cbi	0x11, 2	; 17
	PORTD	&=	 0xFF;				//uart1
 232:	82 b3       	in	r24, 0x12	; 18
 234:	82 bb       	out	0x12, r24	; 18
	
	/*------------------------------------
		led		端口初始化
	------------------------------------*/
	DDRC	|=	(1 << PC0);			//PC0设置为输出
 236:	a0 9a       	sbi	0x14, 0	; 20
	PORTC	|=	(1 << PC0);			//熄灭led
 238:	a8 9a       	sbi	0x15, 0	; 21
	
	/*------------------------------------
		beep	端口初始化
	------------------------------------*/
	DDRB	|=	 (1 << PB0);		//PB0设置为输出
 23a:	b8 9a       	sbi	0x17, 0	; 23
	PORTB	&=	~(1 << PB0);		//蜂鸣器不响
 23c:	c0 98       	cbi	0x18, 0	; 24

	/*------------------------------------
		TM1726背光灯	端口初始化
	------------------------------------*/
	DDRE	|=	(1 << PE2);			//PE2设置为输出
 23e:	12 9a       	sbi	0x02, 2	; 2
	PORTE	|=	(1 << PE2);			//打开背光	
 240:	1a 9a       	sbi	0x03, 2	; 3
	/*------------------------------------
		TM1726串行	端口初始化
			PA0		SDA		设置为输出
			PA1		SCL		设置为输出
	------------------------------------*/	
	DDRA	|=	((1 << PA0) | (1 << PA1));
 242:	8a b3       	in	r24, 0x1a	; 26
 244:	83 60       	ori	r24, 0x03	; 3
 246:	8a bb       	out	0x1a, r24	; 26
	PORTA	|=	((1 << PA0) | (1 << PA1));
 248:	8b b3       	in	r24, 0x1b	; 27
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	8b bb       	out	0x1b, r24	; 27
 24e:	08 95       	ret

00000250 <__vector_18>:
* 中断向量：USART0_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART0_RX_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	while( !(UCSR0A & (1<<RXC0)) );		//判断缓冲区是否有数据
 262:	5f 9b       	sbis	0x0b, 7	; 11
 264:	fe cf       	rjmp	.-4      	; 0x262 <__vector_18+0x12>
	uart0_rx_array[uart0_rx_count] = UDR0;
 266:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <uart0_rx_count>
 26a:	9c b1       	in	r25, 0x0c	; 12
 26c:	e8 2f       	mov	r30, r24
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	e5 52       	subi	r30, 0x25	; 37
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	90 83       	st	Z, r25
	uart0_rx_count++;
 276:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (uart0_rx_count >= UART0_RX_ARRAY_LEN)
 278:	88 3c       	cpi	r24, 0xC8	; 200
 27a:	18 f4       	brcc	.+6      	; 0x282 <__vector_18+0x32>
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART0_RX_vect){
	while( !(UCSR0A & (1<<RXC0)) );		//判断缓冲区是否有数据
	uart0_rx_array[uart0_rx_count] = UDR0;
	uart0_rx_count++;
 27c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <uart0_rx_count>
 280:	02 c0       	rjmp	.+4      	; 0x286 <__vector_18+0x36>
	
	if (uart0_rx_count >= UART0_RX_ARRAY_LEN)
	{
		uart0_rx_count = 0;
 282:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <uart0_rx_count>
	}
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_30>:
* 中断向量：USART1_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART1_RX_vect){
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	while( !(UCSR1A & (1<<RXC1)) );				//判断缓冲区是否有数据
 2aa:	eb e9       	ldi	r30, 0x9B	; 155
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	ec f7       	brge	.-6      	; 0x2ae <__vector_30+0x16>
	uart1_rx_array[uart1_rx_count] = UDR1;		//保存接收到的数据
 2b4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <uart1_rx_count>
 2b8:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2bc:	e8 2f       	mov	r30, r24
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ee 5e       	subi	r30, 0xEE	; 238
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	90 83       	st	Z, r25
	uart1_rx_count++;							//计数
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
	
	//如果接收数据的数组长度大于定义的最大长度则将计数清0
	if (uart1_rx_count >= UART1_RX_ARRAY_LEN)
 2c8:	88 3c       	cpi	r24, 0xC8	; 200
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <__vector_30+0x3a>
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART1_RX_vect){
	while( !(UCSR1A & (1<<RXC1)) );				//判断缓冲区是否有数据
	uart1_rx_array[uart1_rx_count] = UDR1;		//保存接收到的数据
	uart1_rx_count++;							//计数
 2cc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <uart1_rx_count>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_30+0x3e>
	
	//如果接收数据的数组长度大于定义的最大长度则将计数清0
	if (uart1_rx_count >= UART1_RX_ARRAY_LEN)
	{
		uart1_rx_count = 0;
 2d2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <uart1_rx_count>
	}
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
