
NB-IOT_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  00000c08  00000c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004d4  00800216  00800216  00000db2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002935  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001065  00000000  00000000  00003985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001262  00000000  00000000  000049ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00005c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bdd  00000000  00000000  00006288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159a  00000000  00000000  00006e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  000083ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_18>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_21>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_30>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a6 31       	cpi	r26, 0x16	; 22
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	26 e0       	ldi	r18, 0x06	; 6
  b0:	a6 e1       	ldi	r26, 0x16	; 22
  b2:	b2 e0       	ldi	r27, 0x02	; 2
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	aa 3e       	cpi	r26, 0xEA	; 234
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  c2:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__vector_21>:
	
	ADMUX =	(ADMUX&0xe0) | channel;			//不改变其他配置，并设置通道
	ADCSRA |= (1 << ADSC);					//启动转换
}

SIGNAL(ADC_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	adc_channel_data_list[adc_interrupt_channel_cache] = (ADCL | ADCH << 8);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	25 b1       	in	r18, 0x05	; 5
  e2:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <__data_end>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e9 5e       	subi	r30, 0xE9	; 233
  ee:	fd 4f       	sbci	r31, 0xFD	; 253
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	92 2b       	or	r25, r18
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <call>:
	init_uart1();
	init_bc95();
	sei();
}
unsigned char call(){
	lcd_update_pure_ppm_display(111);
 10c:	8f e6       	ldi	r24, 0x6F	; 111
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 aa 04 	call	0x954	; 0x954 <lcd_update_pure_ppm_display>
}
 114:	08 95       	ret

00000116 <system_init>:
 */ 

#include "app.h"

void system_init(){
	cli();
 116:	f8 94       	cli
	init_port();
 118:	0e 94 c7 04 	call	0x98e	; 0x98e <init_port>
	init_lcd();
 11c:	0e 94 22 03 	call	0x644	; 0x644 <init_lcd>
	init_uart0();
 120:	0e 94 f7 04 	call	0x9ee	; 0x9ee <init_uart0>
	init_uart1();
 124:	0e 94 02 05 	call	0xa04	; 0xa04 <init_uart1>
	init_bc95();
 128:	0e 94 ff 01 	call	0x3fe	; 0x3fe <init_bc95>
	sei();
 12c:	78 94       	sei
 12e:	08 95       	ret

00000130 <call_test>:
unsigned char call(){
	lcd_update_pure_ppm_display(111);
}

void call_test(unsigned char (*callback)()){
	callback();
 130:	fc 01       	movw	r30, r24
 132:	09 95       	icall
 134:	08 95       	ret

00000136 <main>:
}

int main(void)
{
	system_init();
 136:	0e 94 8b 00 	call	0x116	; 0x116 <system_init>
	
	unsigned char test[3] = "5";
	lcd_update_raw_ppm_display(atoi(device_status_bc95.band));
 13a:	84 ee       	ldi	r24, 0xE4	; 228
 13c:	96 e0       	ldi	r25, 0x06	; 6
 13e:	0e 94 b0 05 	call	0xb60	; 0xb60 <atoi>
 142:	0e 94 e6 03 	call	0x7cc	; 0x7cc <lcd_update_raw_ppm_display>
	
	call_test(call);
 146:	86 e8       	ldi	r24, 0x86	; 134
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 98 00 	call	0x130	; 0x130 <call_test>
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x18>

00000150 <callback_get_imei>:
		uart1_rx_array_set_empty();
	}
	
	uart1_rx_array_set_empty();
	return 0;
}
 150:	08 95       	ret

00000152 <callback_get_imsi>:
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret

00000156 <callback_get_eps_status>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret

0000015a <callback_get_profile_status>:
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret

0000015e <callback_get_plmn>:
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret

00000162 <callback_get_band>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 d0       	rcall	.+0      	; 0x168 <callback_get_band+0x6>
 168:	00 d0       	rcall	.+0      	; 0x16a <callback_get_band+0x8>
 16a:	00 d0       	rcall	.+0      	; 0x16c <callback_get_band+0xa>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	e2 ed       	ldi	r30, 0xD2	; 210
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	de 01       	movw	r26, r28
 178:	11 96       	adiw	r26, 0x01	; 1
 17a:	01 90       	ld	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	8a 95       	dec	r24
 180:	e1 f7       	brne	.-8      	; 0x17a <callback_get_band+0x18>
 182:	be 01       	movw	r22, r28
 184:	6f 5f       	subi	r22, 0xFF	; 255
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	81 ed       	ldi	r24, 0xD1	; 209
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strstr>
 190:	89 2b       	or	r24, r25
 192:	19 f1       	breq	.+70     	; 0x1da <callback_get_band+0x78>
 194:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <query_data_flag+0x101>
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <query_data_flag+0xff>
 19e:	83 17       	cp	r24, r19
 1a0:	d8 f4       	brcc	.+54     	; 0x1d8 <callback_get_band+0x76>
 1a2:	e8 2f       	mov	r30, r24
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ef 52       	subi	r30, 0x2F	; 47
 1a8:	fc 4f       	sbci	r31, 0xFC	; 252
 1aa:	90 81       	ld	r25, Z
 1ac:	9d 30       	cpi	r25, 0x0D	; 13
 1ae:	51 f4       	brne	.+20     	; 0x1c4 <callback_get_band+0x62>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	16 c0       	rjmp	.+44     	; 0x1e0 <callback_get_band+0x7e>
 1b4:	e8 2f       	mov	r30, r24
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ef 52       	subi	r30, 0x2F	; 47
 1ba:	fc 4f       	sbci	r31, 0xFC	; 252
 1bc:	90 81       	ld	r25, Z
 1be:	9d 30       	cpi	r25, 0x0D	; 13
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <callback_get_band+0x64>
 1c2:	0d c0       	rjmp	.+26     	; 0x1de <callback_get_band+0x7c>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	e2 2f       	mov	r30, r18
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ec 51       	subi	r30, 0x1C	; 28
 1cc:	f9 4f       	sbci	r31, 0xF9	; 249
 1ce:	90 83       	st	Z, r25
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	83 17       	cp	r24, r19
 1d6:	70 f3       	brcs	.-36     	; 0x1b4 <callback_get_band+0x52>
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <callback_get_band+0x7e>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <callback_get_band+0x7e>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	26 96       	adiw	r28, 0x06	; 6
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <callback_get_csq>:
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <callback_get_csq+0x6>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <callback_get_csq+0x8>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	83 e4       	ldi	r24, 0x43	; 67
 200:	93 e5       	ldi	r25, 0x53	; 83
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	81 e5       	ldi	r24, 0x51	; 81
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	9c 83       	std	Y+4, r25	; 0x04
 20c:	8b 83       	std	Y+3, r24	; 0x03
 20e:	be 01       	movw	r22, r28
 210:	6f 5f       	subi	r22, 0xFF	; 255
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	81 ed       	ldi	r24, 0xD1	; 209
 216:	93 e0       	ldi	r25, 0x03	; 3
 218:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strstr>
 21c:	89 2b       	or	r24, r25
 21e:	21 f1       	breq	.+72     	; 0x268 <callback_get_csq+0x76>
 220:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <query_data_flag+0x101>
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <query_data_flag+0xff>
 22a:	83 17       	cp	r24, r19
 22c:	f8 f4       	brcc	.+62     	; 0x26c <callback_get_csq+0x7a>
 22e:	e8 2f       	mov	r30, r24
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ef 52       	subi	r30, 0x2F	; 47
 234:	fc 4f       	sbci	r31, 0xFC	; 252
 236:	90 81       	ld	r25, Z
 238:	9c 32       	cpi	r25, 0x2C	; 44
 23a:	51 f4       	brne	.+20     	; 0x250 <callback_get_csq+0x5e>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	19 c0       	rjmp	.+50     	; 0x272 <callback_get_csq+0x80>
 240:	e8 2f       	mov	r30, r24
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ef 52       	subi	r30, 0x2F	; 47
 246:	fc 4f       	sbci	r31, 0xFC	; 252
 248:	90 81       	ld	r25, Z
 24a:	9c 32       	cpi	r25, 0x2C	; 44
 24c:	11 f4       	brne	.+4      	; 0x252 <callback_get_csq+0x60>
 24e:	10 c0       	rjmp	.+32     	; 0x270 <callback_get_csq+0x7e>
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	e2 2f       	mov	r30, r18
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ec 51       	subi	r30, 0x1C	; 28
 258:	f9 4f       	sbci	r31, 0xF9	; 249
 25a:	93 83       	std	Z+3, r25	; 0x03
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	83 17       	cp	r24, r19
 262:	70 f3       	brcs	.-36     	; 0x240 <callback_get_csq+0x4e>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	05 c0       	rjmp	.+10     	; 0x272 <callback_get_csq+0x80>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	03 c0       	rjmp	.+6      	; 0x272 <callback_get_csq+0x80>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	01 c0       	rjmp	.+2      	; 0x272 <callback_get_csq+0x80>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <type_set_process>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	27 97       	sbiw	r28, 0x07	; 7
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	87 e0       	ldi	r24, 0x07	; 7
 296:	e4 ee       	ldi	r30, 0xE4	; 228
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	de 01       	movw	r26, r28
 29c:	11 96       	adiw	r26, 0x01	; 1
 29e:	01 90       	ld	r0, Z+
 2a0:	0d 92       	st	X+, r0
 2a2:	8a 95       	dec	r24
 2a4:	e1 f7       	brne	.-8      	; 0x29e <type_set_process+0x1e>
 2a6:	6e e0       	ldi	r22, 0x0E	; 14
 2a8:	72 e0       	ldi	r23, 0x02	; 2
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strstr>
 2b2:	89 2b       	or	r24, r25
 2b4:	21 f0       	breq	.+8      	; 0x2be <type_set_process+0x3e>
 2b6:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart1_rx_array_set_empty>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <type_set_process+0x58>
 2be:	68 e0       	ldi	r22, 0x08	; 8
 2c0:	72 e0       	ldi	r23, 0x02	; 2
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strstr>
 2ca:	89 2b       	or	r24, r25
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <type_set_process+0x56>
 2ce:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart1_rx_array_set_empty>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <type_set_process+0x58>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	27 96       	adiw	r28, 0x07	; 7
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <type_query_process>:
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/

unsigned char type_query_process(unsigned char callback_function_number){
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	63 97       	sbiw	r28, 0x13	; 19
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	18 2f       	mov	r17, r24
	//测试数据
	unsigned char uart1_rx_array1[] = "\r\n+NBAND:5\r\n\r\nOK\r\n";
 302:	83 e1       	ldi	r24, 0x13	; 19
 304:	e8 ed       	ldi	r30, 0xD8	; 216
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	de 01       	movw	r26, r28
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	01 90       	ld	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	8a 95       	dec	r24
 312:	e1 f7       	brne	.-8      	; 0x30c <type_query_process+0x22>
	strcpy(query_data_flag.message, uart1_rx_array1);					//复制串口数据
 314:	be 01       	movw	r22, r28
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	81 ed       	ldi	r24, 0xD1	; 209
 31c:	93 e0       	ldi	r25, 0x03	; 3
 31e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <strcpy>
	uart1_rx_array_set_empty();						//清空串口数据用于接收
 322:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart1_rx_array_set_empty>
	query_data_flag.comma_offset_number = 0;		//初始化逗号记录，记录有多少个逗号，就有+1个数据
 326:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <query_data_flag+0x102>
	
	if (strstr(uart1_rx_array1, bc95_response_ok)!= NULL && strstr(uart1_rx_array1, "+") != NULL && strstr(uart1_rx_array1, ":") != NULL)
 32a:	6e e0       	ldi	r22, 0x0E	; 14
 32c:	72 e0       	ldi	r23, 0x02	; 2
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strstr>
 336:	89 2b       	or	r24, r25
 338:	09 f4       	brne	.+2      	; 0x33c <type_query_process+0x52>
 33a:	52 c0       	rjmp	.+164    	; 0x3e0 <type_query_process+0xf6>
 33c:	6b e2       	ldi	r22, 0x2B	; 43
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	0e 94 ce 05 	call	0xb9c	; 0xb9c <strchr>
 348:	89 2b       	or	r24, r25
 34a:	09 f4       	brne	.+2      	; 0x34e <type_query_process+0x64>
 34c:	4b c0       	rjmp	.+150    	; 0x3e4 <type_query_process+0xfa>
 34e:	6a e3       	ldi	r22, 0x3A	; 58
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	0e 94 ce 05 	call	0xb9c	; 0xb9c <strchr>
 35a:	89 2b       	or	r24, r25
 35c:	09 f4       	brne	.+2      	; 0x360 <type_query_process+0x76>
 35e:	44 c0       	rjmp	.+136    	; 0x3e8 <type_query_process+0xfe>
	{
		query_data_flag.message_length = strlen(uart1_rx_array1);			//如果接收完成，则计算字符串长度
 360:	de 01       	movw	r26, r28
 362:	11 96       	adiw	r26, 0x01	; 1
 364:	fd 01       	movw	r30, r26
 366:	01 90       	ld	r0, Z+
 368:	00 20       	and	r0, r0
 36a:	e9 f7       	brne	.-6      	; 0x366 <type_query_process+0x7c>
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	ea 1b       	sub	r30, r26
 370:	fb 0b       	sbc	r31, r27
 372:	2e 2f       	mov	r18, r30
 374:	e0 93 d0 04 	sts	0x04D0, r30	; 0x8004d0 <query_data_flag+0xff>
		for (unsigned char i = 0 ; i < query_data_flag.message_length ; i++)//循环处理字符串，将标志与信息记录在query_data_flag结构体里
 378:	ee 23       	and	r30, r30
 37a:	11 f1       	breq	.+68     	; 0x3c0 <type_query_process+0xd6>
 37c:	40 91 d1 04 	lds	r20, 0x04D1	; 0x8004d1 <query_data_flag+0x100>
 380:	50 91 d2 04 	lds	r21, 0x04D2	; 0x8004d2 <query_data_flag+0x101>
 384:	e1 ed       	ldi	r30, 0xD1	; 209
 386:	f3 e0       	ldi	r31, 0x03	; 3
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
		{
			if (query_data_flag.message[i] == '+')
 38c:	91 91       	ld	r25, Z+
 38e:	9b 32       	cpi	r25, 0x2B	; 43
 390:	59 f0       	breq	.+22     	; 0x3a8 <type_query_process+0xbe>
			{
				query_data_flag.add_offset = i;
			}else if (query_data_flag.message[i] == ':')
 392:	9a 33       	cpi	r25, 0x3A	; 58
 394:	59 f0       	breq	.+22     	; 0x3ac <type_query_process+0xc2>
			{
				query_data_flag.colon_offset = i;
			}else if (query_data_flag.message[i] == ',')
 396:	9c 32       	cpi	r25, 0x2C	; 44
 398:	51 f4       	brne	.+20     	; 0x3ae <type_query_process+0xc4>
			{
				query_data_flag.comma_offset[query_data_flag.comma_offset_number] = i;
 39a:	a3 2f       	mov	r26, r19
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	ac 52       	subi	r26, 0x2C	; 44
 3a0:	bb 4f       	sbci	r27, 0xFB	; 251
 3a2:	8c 93       	st	X, r24
				query_data_flag.comma_offset_number++;
 3a4:	3f 5f       	subi	r19, 0xFF	; 255
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <type_query_process+0xc4>
		query_data_flag.message_length = strlen(uart1_rx_array1);			//如果接收完成，则计算字符串长度
		for (unsigned char i = 0 ; i < query_data_flag.message_length ; i++)//循环处理字符串，将标志与信息记录在query_data_flag结构体里
		{
			if (query_data_flag.message[i] == '+')
			{
				query_data_flag.add_offset = i;
 3a8:	48 2f       	mov	r20, r24
 3aa:	01 c0       	rjmp	.+2      	; 0x3ae <type_query_process+0xc4>
			}else if (query_data_flag.message[i] == ':')
			{
				query_data_flag.colon_offset = i;
 3ac:	58 2f       	mov	r21, r24
	query_data_flag.comma_offset_number = 0;		//初始化逗号记录，记录有多少个逗号，就有+1个数据
	
	if (strstr(uart1_rx_array1, bc95_response_ok)!= NULL && strstr(uart1_rx_array1, "+") != NULL && strstr(uart1_rx_array1, ":") != NULL)
	{
		query_data_flag.message_length = strlen(uart1_rx_array1);			//如果接收完成，则计算字符串长度
		for (unsigned char i = 0 ; i < query_data_flag.message_length ; i++)//循环处理字符串，将标志与信息记录在query_data_flag结构体里
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	28 13       	cpse	r18, r24
 3b2:	ec cf       	rjmp	.-40     	; 0x38c <type_query_process+0xa2>
 3b4:	40 93 d1 04 	sts	0x04D1, r20	; 0x8004d1 <query_data_flag+0x100>
 3b8:	50 93 d2 04 	sts	0x04D2, r21	; 0x8004d2 <query_data_flag+0x101>
 3bc:	30 93 d3 04 	sts	0x04D3, r19	; 0x8004d3 <query_data_flag+0x102>
			{
				query_data_flag.comma_offset[query_data_flag.comma_offset_number] = i;
				query_data_flag.comma_offset_number++;
			}
		}		
		return init_command[callback_function_number].callback_function();		//调用回调函数，并返回处理结果
 3c0:	81 2f       	mov	r24, r17
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	fc 01       	movw	r30, r24
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	e8 0f       	add	r30, r24
 3cc:	f9 1f       	adc	r31, r25
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	e0 50       	subi	r30, 0x00	; 0
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	04 80       	ldd	r0, Z+4	; 0x04
 3d8:	f5 81       	ldd	r31, Z+5	; 0x05
 3da:	e0 2d       	mov	r30, r0
 3dc:	09 95       	icall
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <type_query_process+0x100>
	}	//判断是否出错，
	else if (strstr(uart1_rx_array1, bc95_response_error) != NULL)
	{
		return 0;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <type_query_process+0x100>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <type_query_process+0x100>
 3e8:	80 e0       	ldi	r24, 0x00	; 0
	}else{
		return 0;
	}
	return 0;
}
 3ea:	63 96       	adiw	r28, 0x13	; 19
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	08 95       	ret

000003fe <init_bc95>:
			在lcd上
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
 3fe:	af 92       	push	r10
 400:	bf 92       	push	r11
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	d1 e0       	ldi	r29, 0x01	; 1
    for (unsigned char i = 0; i < 12; i++)
 416:	f1 2c       	mov	r15, r1
                break;

            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
					memset(&query_data_flag, 0 , sizeof(struct bc95_query_data_flag));
 418:	0f 2e       	mov	r0, r31
 41a:	f1 ed       	ldi	r31, 0xD1	; 209
 41c:	af 2e       	mov	r10, r31
 41e:	f3 e0       	ldi	r31, 0x03	; 3
 420:	bf 2e       	mov	r11, r31
 422:	f0 2d       	mov	r31, r0
 424:	0f 2e       	mov	r0, r31
 426:	fd e0       	ldi	r31, 0x0D	; 13
 428:	cf 2e       	mov	r12, r31
 42a:	dd 24       	eor	r13, r13
 42c:	d3 94       	inc	r13
 42e:	f0 2d       	mov	r31, r0
 430:	8e 01       	movw	r16, r28
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
    for (unsigned char i = 0; i < 12; i++)
    {
		bc95_send_string(init_command[i].command);		
 432:	8a 81       	ldd	r24, Y+2	; 0x02
 434:	9b 81       	ldd	r25, Y+3	; 0x03
 436:	0e 94 3c 05 	call	0xa78	; 0xa78 <bc95_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	9b e6       	ldi	r25, 0x6B	; 107
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
        unsigned char	resend_count = RESEND_NUMBER;       //初始化循环检查次数
		_delay_ms(BC95_COMMAND_DELAY);

        //根据发送的数据类型处理bc95返回的数据
        switch (init_command[i].type){
 446:	88 81       	ld	r24, Y
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	21 f0       	breq	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	09 f0       	breq	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	48 c0       	rjmp	.+144    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 452:	21 c0       	rjmp	.+66     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
            case SET:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_set_process() != 1){
 454:	0e 94 40 01 	call	0x280	; 0x280 <type_set_process>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	a1 f4       	brne	.+40     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 45c:	42 c0       	rjmp	.+132    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
						bc95_send_string(init_command[i].command);
 45e:	f8 01       	movw	r30, r16
 460:	82 81       	ldd	r24, Z+2	; 0x02
 462:	93 81       	ldd	r25, Z+3	; 0x03
 464:	0e 94 3c 05 	call	0xa78	; 0xa78 <bc95_send_string>
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	9b e6       	ldi	r25, 0x6B	; 107
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop

						_delay_ms(BC95_COMMAND_DELAY);
						//如果判断成功则退出循环发送下一条指令
                        if (type_set_process() == 1){
 474:	0e 94 40 01 	call	0x280	; 0x280 <type_set_process>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	99 f1       	breq	.+102    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 47c:	ea 94       	dec	r14
        switch (init_command[i].type){
            case SET:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_set_process() != 1){
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
 47e:	e1 10       	cpse	r14, r1
 480:	05 c0       	rjmp	.+10     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 482:	2f c0       	rjmp	.+94     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 484:	0f 2e       	mov	r0, r31
 486:	fa e0       	ldi	r31, 0x0A	; 10
 488:	ef 2e       	mov	r14, r31
 48a:	f0 2d       	mov	r31, r0
 48c:	f8 01       	movw	r30, r16
 48e:	81 81       	ldd	r24, Z+1	; 0x01
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	29 f3       	breq	.-54     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 494:	26 c0       	rjmp	.+76     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>

                break;

            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
 496:	8f 2d       	mov	r24, r15
 498:	0e 94 75 01 	call	0x2ea	; 0x2ea <type_query_process>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	09 f1       	breq	.+66     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
					memset(&query_data_flag, 0 , sizeof(struct bc95_query_data_flag));
 4a0:	f5 01       	movw	r30, r10
 4a2:	c6 01       	movw	r24, r12
 4a4:	11 92       	st	Z+, r1
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	e9 f7       	brne	.-6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4aa:	0f 2e       	mov	r0, r31
 4ac:	fa e0       	ldi	r31, 0x0A	; 10
 4ae:	ef 2e       	mov	r14, r31
 4b0:	f0 2d       	mov	r31, r0
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
						bc95_send_string(init_command[i].command);
 4b4:	f8 01       	movw	r30, r16
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	93 81       	ldd	r25, Z+3	; 0x03
 4ba:	0e 94 3c 05 	call	0xa78	; 0xa78 <bc95_send_string>
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	9b e6       	ldi	r25, 0x6B	; 107
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c8:	00 00       	nop

						_delay_ms(BC95_COMMAND_DELAY);
                        if (type_query_process(i) == 1){
 4ca:	8f 2d       	mov	r24, r15
 4cc:	0e 94 75 01 	call	0x2ea	; 0x2ea <type_query_process>
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d4:	ea 94       	dec	r14
            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
					memset(&query_data_flag, 0 , sizeof(struct bc95_query_data_flag));
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
 4d6:	ee 20       	and	r14, r14
 4d8:	21 f0       	breq	.+8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4da:	f8 01       	movw	r30, r16
 4dc:	81 81       	ldd	r24, Z+1	; 0x01
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	49 f3       	breq	.-46     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
    for (unsigned char i = 0; i < 12; i++)
 4e2:	f3 94       	inc	r15
 4e4:	26 96       	adiw	r28, 0x06	; 6
 4e6:	fc e0       	ldi	r31, 0x0C	; 12
 4e8:	ff 12       	cpse	r15, r31
 4ea:	a2 cf       	rjmp	.-188    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
                break;
            default:
                break;
        }
    }
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	bf 90       	pop	r11
 4fe:	af 90       	pop	r10
 500:	08 95       	ret

00000502 <tm1726_start>:
*-----------------------------------------------------------------------------*/
void lcd_update_flow_display(unsigned long int number){
	unsigned char	cache[5] = {0};
	make_flow_number(number, cache);
	write_string_address_tm1726(5, 5, cache);
}
 502:	d8 9a       	sbi	0x1b, 0	; 27
 504:	d9 9a       	sbi	0x1b, 1	; 27
 506:	85 e2       	ldi	r24, 0x25	; 37
 508:	8a 95       	dec	r24
 50a:	f1 f7       	brne	.-4      	; 0x508 <tm1726_start+0x6>
 50c:	d8 98       	cbi	0x1b, 0	; 27
 50e:	85 e2       	ldi	r24, 0x25	; 37
 510:	8a 95       	dec	r24
 512:	f1 f7       	brne	.-4      	; 0x510 <tm1726_start+0xe>
 514:	d9 98       	cbi	0x1b, 1	; 27
 516:	85 e2       	ldi	r24, 0x25	; 37
 518:	8a 95       	dec	r24
 51a:	f1 f7       	brne	.-4      	; 0x518 <tm1726_start+0x16>
 51c:	08 95       	ret

0000051e <tm1726_stop>:
 51e:	d8 98       	cbi	0x1b, 0	; 27
 520:	d9 9a       	sbi	0x1b, 1	; 27
 522:	85 e2       	ldi	r24, 0x25	; 37
 524:	8a 95       	dec	r24
 526:	f1 f7       	brne	.-4      	; 0x524 <tm1726_stop+0x6>
 528:	d8 9a       	sbi	0x1b, 0	; 27
 52a:	85 e2       	ldi	r24, 0x25	; 37
 52c:	8a 95       	dec	r24
 52e:	f1 f7       	brne	.-4      	; 0x52c <tm1726_stop+0xe>
 530:	d9 98       	cbi	0x1b, 1	; 27
 532:	85 e2       	ldi	r24, 0x25	; 37
 534:	8a 95       	dec	r24
 536:	f1 f7       	brne	.-4      	; 0x534 <tm1726_stop+0x16>
 538:	08 95       	ret

0000053a <write_byte_tm1726>:
 53a:	d8 98       	cbi	0x1b, 0	; 27
 53c:	d9 98       	cbi	0x1b, 1	; 27
 53e:	24 e0       	ldi	r18, 0x04	; 4
 540:	2a 95       	dec	r18
 542:	f1 f7       	brne	.-4      	; 0x540 <write_byte_tm1726+0x6>
 544:	98 e0       	ldi	r25, 0x08	; 8
 546:	d9 98       	cbi	0x1b, 1	; 27
 548:	80 ff       	sbrs	r24, 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <write_byte_tm1726+0x16>
 54c:	d8 9a       	sbi	0x1b, 0	; 27
 54e:	01 c0       	rjmp	.+2      	; 0x552 <write_byte_tm1726+0x18>
 550:	d8 98       	cbi	0x1b, 0	; 27
 552:	24 e0       	ldi	r18, 0x04	; 4
 554:	2a 95       	dec	r18
 556:	f1 f7       	brne	.-4      	; 0x554 <write_byte_tm1726+0x1a>
 558:	d9 9a       	sbi	0x1b, 1	; 27
 55a:	86 95       	lsr	r24
 55c:	91 50       	subi	r25, 0x01	; 1
 55e:	99 f7       	brne	.-26     	; 0x546 <write_byte_tm1726+0xc>
 560:	d9 98       	cbi	0x1b, 1	; 27
 562:	d8 98       	cbi	0x1b, 0	; 27
 564:	08 95       	ret

00000566 <write_all_ram_tm1726>:
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	d8 2f       	mov	r29, r24
 56c:	d8 9a       	sbi	0x1b, 0	; 27
 56e:	d9 9a       	sbi	0x1b, 1	; 27
 570:	0e 94 81 02 	call	0x502	; 0x502 <tm1726_start>
 574:	84 e0       	ldi	r24, 0x04	; 4
 576:	8a 95       	dec	r24
 578:	f1 f7       	brne	.-4      	; 0x576 <write_all_ram_tm1726+0x10>
 57a:	80 ec       	ldi	r24, 0xC0	; 192
 57c:	0e 94 9d 02 	call	0x53a	; 0x53a <write_byte_tm1726>
 580:	c2 e1       	ldi	r28, 0x12	; 18
 582:	d8 9a       	sbi	0x1b, 0	; 27
 584:	d9 9a       	sbi	0x1b, 1	; 27
 586:	dd 23       	and	r29, r29
 588:	21 f0       	breq	.+8      	; 0x592 <write_all_ram_tm1726+0x2c>
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	0e 94 9d 02 	call	0x53a	; 0x53a <write_byte_tm1726>
 590:	03 c0       	rjmp	.+6      	; 0x598 <write_all_ram_tm1726+0x32>
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 9d 02 	call	0x53a	; 0x53a <write_byte_tm1726>
 598:	c1 50       	subi	r28, 0x01	; 1
 59a:	99 f7       	brne	.-26     	; 0x582 <write_all_ram_tm1726+0x1c>
 59c:	0e 94 8f 02 	call	0x51e	; 0x51e <tm1726_stop>
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <init_tm1726>:
 5a6:	d8 9a       	sbi	0x1b, 0	; 27
 5a8:	d9 9a       	sbi	0x1b, 1	; 27
 5aa:	0e 94 81 02 	call	0x502	; 0x502 <tm1726_start>
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	8a 95       	dec	r24
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <init_tm1726+0xa>
 5b4:	87 e3       	ldi	r24, 0x37	; 55
 5b6:	0e 94 9d 02 	call	0x53a	; 0x53a <write_byte_tm1726>
 5ba:	0e 94 8f 02 	call	0x51e	; 0x51e <tm1726_stop>
 5be:	08 95       	ret

000005c0 <write_byte_address_tm1726>:
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	d8 2f       	mov	r29, r24
 5c6:	c6 2f       	mov	r28, r22
 5c8:	d8 9a       	sbi	0x1b, 0	; 27
 5ca:	d9 9a       	sbi	0x1b, 1	; 27
 5cc:	0e 94 81 02 	call	0x502	; 0x502 <tm1726_start>
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	9b e6       	ldi	r25, 0x6B	; 107
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <write_byte_address_tm1726+0x14>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <write_byte_address_tm1726+0x1a>
 5da:	00 00       	nop
 5dc:	80 ec       	ldi	r24, 0xC0	; 192
 5de:	8d 0f       	add	r24, r29
 5e0:	0e 94 9d 02 	call	0x53a	; 0x53a <write_byte_tm1726>
 5e4:	d8 9a       	sbi	0x1b, 0	; 27
 5e6:	d9 9a       	sbi	0x1b, 1	; 27
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	9b e6       	ldi	r25, 0x6B	; 107
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <write_byte_address_tm1726+0x2c>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <write_byte_address_tm1726+0x32>
 5f2:	00 00       	nop
 5f4:	8c 2f       	mov	r24, r28
 5f6:	0e 94 9d 02 	call	0x53a	; 0x53a <write_byte_tm1726>
 5fa:	0e 94 8f 02 	call	0x51e	; 0x51e <tm1726_stop>
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <write_string_address_tm1726>:
 604:	ef 92       	push	r14
 606:	ff 92       	push	r15
 608:	1f 93       	push	r17
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	9f ef       	ldi	r25, 0xFF	; 255
 610:	96 0f       	add	r25, r22
 612:	66 23       	and	r22, r22
 614:	89 f0       	breq	.+34     	; 0x638 <write_string_address_tm1726+0x34>
 616:	ea 01       	movw	r28, r20
 618:	e9 2e       	mov	r14, r25
 61a:	f1 2c       	mov	r15, r1
 61c:	9f ef       	ldi	r25, 0xFF	; 255
 61e:	e9 1a       	sub	r14, r25
 620:	f9 0a       	sbc	r15, r25
 622:	e4 0e       	add	r14, r20
 624:	f5 1e       	adc	r15, r21
 626:	69 91       	ld	r22, Y+
 628:	11 e0       	ldi	r17, 0x01	; 1
 62a:	18 0f       	add	r17, r24
 62c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <write_byte_address_tm1726>
 630:	81 2f       	mov	r24, r17
 632:	ce 15       	cp	r28, r14
 634:	df 05       	cpc	r29, r15
 636:	b9 f7       	brne	.-18     	; 0x626 <write_string_address_tm1726+0x22>
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	ff 90       	pop	r15
 640:	ef 90       	pop	r14
 642:	08 95       	ret

00000644 <init_lcd>:
 644:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <init_tm1726>
 648:	2f ef       	ldi	r18, 0xFF	; 255
 64a:	8f eb       	ldi	r24, 0xBF	; 191
 64c:	96 e0       	ldi	r25, 0x06	; 6
 64e:	21 50       	subi	r18, 0x01	; 1
 650:	80 40       	sbci	r24, 0x00	; 0
 652:	90 40       	sbci	r25, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <init_lcd+0xa>
 656:	00 c0       	rjmp	.+0      	; 0x658 <init_lcd+0x14>
 658:	00 00       	nop
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 b3 02 	call	0x566	; 0x566 <write_all_ram_tm1726>
 660:	2f ef       	ldi	r18, 0xFF	; 255
 662:	8f eb       	ldi	r24, 0xBF	; 191
 664:	91 e2       	ldi	r25, 0x21	; 33
 666:	21 50       	subi	r18, 0x01	; 1
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <init_lcd+0x22>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <init_lcd+0x2c>
 670:	00 00       	nop
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	0e 94 b3 02 	call	0x566	; 0x566 <write_all_ram_tm1726>
 678:	08 95       	ret

0000067a <make_raw_ppm_number>:

* 出口参数：	unsigned char	*number_array		用于存储转换后可填充RAM的字符数组

* 返 回 值：无
*-----------------------------------------------------------------------------*/
void make_raw_ppm_number(unsigned int number, unsigned char *number_array){
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	7c 01       	movw	r14, r24
 686:	eb 01       	movw	r28, r22
	
	number_array[0] =SMG[ (number%10) ];
 688:	9c 01       	movw	r18, r24
 68a:	ad ec       	ldi	r26, 0xCD	; 205
 68c:	bc ec       	ldi	r27, 0xCC	; 204
 68e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 692:	ac 01       	movw	r20, r24
 694:	56 95       	lsr	r21
 696:	47 95       	ror	r20
 698:	56 95       	lsr	r21
 69a:	47 95       	ror	r20
 69c:	56 95       	lsr	r21
 69e:	47 95       	ror	r20
 6a0:	9a 01       	movw	r18, r20
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	ca 01       	movw	r24, r20
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	82 0f       	add	r24, r18
 6b6:	93 1f       	adc	r25, r19
 6b8:	f7 01       	movw	r30, r14
 6ba:	e8 1b       	sub	r30, r24
 6bc:	f9 0b       	sbc	r31, r25
 6be:	e8 53       	subi	r30, 0x38	; 56
 6c0:	fe 4f       	sbci	r31, 0xFE	; 254
 6c2:	10 81       	ld	r17, Z
 6c4:	18 83       	st	Y, r17
	number_array[1] =SMG[ ((number/10)%10) ];
 6c6:	9a 01       	movw	r18, r20
 6c8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 6cc:	96 95       	lsr	r25
 6ce:	87 95       	ror	r24
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	9c 01       	movw	r18, r24
 6da:	22 0f       	add	r18, r18
 6dc:	33 1f       	adc	r19, r19
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	82 0f       	add	r24, r18
 6ec:	93 1f       	adc	r25, r19
 6ee:	48 1b       	sub	r20, r24
 6f0:	59 0b       	sbc	r21, r25
 6f2:	fa 01       	movw	r30, r20
 6f4:	e8 53       	subi	r30, 0x38	; 56
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	80 81       	ld	r24, Z
 6fa:	89 83       	std	Y+1, r24	; 0x01
	number_array[2] =SMG[ ((number/100)%10) ];
 6fc:	97 01       	movw	r18, r14
 6fe:	36 95       	lsr	r19
 700:	27 95       	ror	r18
 702:	36 95       	lsr	r19
 704:	27 95       	ror	r18
 706:	ab e7       	ldi	r26, 0x7B	; 123
 708:	b4 e1       	ldi	r27, 0x14	; 20
 70a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 70e:	ac 01       	movw	r20, r24
 710:	56 95       	lsr	r21
 712:	47 95       	ror	r20
 714:	9a 01       	movw	r18, r20
 716:	ad ec       	ldi	r26, 0xCD	; 205
 718:	bc ec       	ldi	r27, 0xCC	; 204
 71a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	9c 01       	movw	r18, r24
 72c:	22 0f       	add	r18, r18
 72e:	33 1f       	adc	r19, r19
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	82 0f       	add	r24, r18
 73e:	93 1f       	adc	r25, r19
 740:	48 1b       	sub	r20, r24
 742:	59 0b       	sbc	r21, r25
 744:	fa 01       	movw	r30, r20
 746:	e8 53       	subi	r30, 0x38	; 56
 748:	fe 4f       	sbci	r31, 0xFE	; 254
 74a:	80 81       	ld	r24, Z
 74c:	8a 83       	std	Y+2, r24	; 0x02
	number_array[3] =SMG[ ((number/1000)%10) ] | RAW_WATER_ICON;
 74e:	97 01       	movw	r18, r14
 750:	36 95       	lsr	r19
 752:	27 95       	ror	r18
 754:	36 95       	lsr	r19
 756:	27 95       	ror	r18
 758:	36 95       	lsr	r19
 75a:	27 95       	ror	r18
 75c:	a5 ec       	ldi	r26, 0xC5	; 197
 75e:	b0 e2       	ldi	r27, 0x20	; 32
 760:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 764:	ac 01       	movw	r20, r24
 766:	52 95       	swap	r21
 768:	42 95       	swap	r20
 76a:	4f 70       	andi	r20, 0x0F	; 15
 76c:	45 27       	eor	r20, r21
 76e:	5f 70       	andi	r21, 0x0F	; 15
 770:	45 27       	eor	r20, r21
 772:	9a 01       	movw	r18, r20
 774:	ad ec       	ldi	r26, 0xCD	; 205
 776:	bc ec       	ldi	r27, 0xCC	; 204
 778:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 77c:	96 95       	lsr	r25
 77e:	87 95       	ror	r24
 780:	96 95       	lsr	r25
 782:	87 95       	ror	r24
 784:	96 95       	lsr	r25
 786:	87 95       	ror	r24
 788:	9c 01       	movw	r18, r24
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	82 0f       	add	r24, r18
 79c:	93 1f       	adc	r25, r19
 79e:	48 1b       	sub	r20, r24
 7a0:	59 0b       	sbc	r21, r25
 7a2:	fa 01       	movw	r30, r20
 7a4:	e8 53       	subi	r30, 0x38	; 56
 7a6:	fe 4f       	sbci	r31, 0xFE	; 254
 7a8:	80 81       	ld	r24, Z
 7aa:	80 61       	ori	r24, 0x10	; 16
 7ac:	8b 83       	std	Y+3, r24	; 0x03
	if (device_status_lcd.no_water == YES)
 7ae:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <device_status_lcd>
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	19 f4       	brne	.+6      	; 0x7bc <make_raw_ppm_number+0x142>
	{
		number_array[0] |= NO_WATER_ICON;
 7b6:	10 61       	ori	r17, 0x10	; 16
 7b8:	18 83       	st	Y, r17
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <make_raw_ppm_number+0x146>
	}else{
		number_array[0] &= ~NO_WATER_ICON;
 7bc:	1f 7e       	andi	r17, 0xEF	; 239
 7be:	18 83       	st	Y, r17
	}
}
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	ff 90       	pop	r15
 7c8:	ef 90       	pop	r14
 7ca:	08 95       	ret

000007cc <lcd_update_raw_ppm_display>:
* 入口参数：	unsigned long int	number			要显示的数字

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void lcd_update_raw_ppm_display(unsigned int number){
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <lcd_update_raw_ppm_display+0x6>
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <lcd_update_raw_ppm_display+0x8>
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
	unsigned char cache[4] = {0};
 7d8:	19 82       	std	Y+1, r1	; 0x01
 7da:	1a 82       	std	Y+2, r1	; 0x02
 7dc:	1b 82       	std	Y+3, r1	; 0x03
 7de:	1c 82       	std	Y+4, r1	; 0x04
	make_raw_ppm_number(number, cache);
 7e0:	be 01       	movw	r22, r28
 7e2:	6f 5f       	subi	r22, 0xFF	; 255
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	0e 94 3d 03 	call	0x67a	; 0x67a <make_raw_ppm_number>
	
	write_string_address_tm1726(14, 4, cache);
 7ea:	ae 01       	movw	r20, r28
 7ec:	4f 5f       	subi	r20, 0xFF	; 255
 7ee:	5f 4f       	sbci	r21, 0xFF	; 255
 7f0:	64 e0       	ldi	r22, 0x04	; 4
 7f2:	8e e0       	ldi	r24, 0x0E	; 14
 7f4:	0e 94 02 03 	call	0x604	; 0x604 <write_string_address_tm1726>
}
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <make_pure_ppm_number>:
	}else{
		number_array[0] &= ~NO_WATER_ICON;
	}
}

void make_pure_ppm_number(unsigned int number, unsigned char *number_array){
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	8c 01       	movw	r16, r24
 810:	eb 01       	movw	r28, r22
	
	number_array[0] =SMG[ (number%10) ] | PURE_WATER_ICON;
 812:	9c 01       	movw	r18, r24
 814:	ad ec       	ldi	r26, 0xCD	; 205
 816:	bc ec       	ldi	r27, 0xCC	; 204
 818:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 81c:	ac 01       	movw	r20, r24
 81e:	56 95       	lsr	r21
 820:	47 95       	ror	r20
 822:	56 95       	lsr	r21
 824:	47 95       	ror	r20
 826:	56 95       	lsr	r21
 828:	47 95       	ror	r20
 82a:	9a 01       	movw	r18, r20
 82c:	22 0f       	add	r18, r18
 82e:	33 1f       	adc	r19, r19
 830:	ca 01       	movw	r24, r20
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	82 0f       	add	r24, r18
 840:	93 1f       	adc	r25, r19
 842:	f8 01       	movw	r30, r16
 844:	e8 1b       	sub	r30, r24
 846:	f9 0b       	sbc	r31, r25
 848:	e8 53       	subi	r30, 0x38	; 56
 84a:	fe 4f       	sbci	r31, 0xFE	; 254
 84c:	80 81       	ld	r24, Z
 84e:	80 61       	ori	r24, 0x10	; 16
 850:	88 83       	st	Y, r24
	number_array[1] =SMG[ ((number/10)%10) ];
 852:	9a 01       	movw	r18, r20
 854:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 858:	96 95       	lsr	r25
 85a:	87 95       	ror	r24
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	96 95       	lsr	r25
 862:	87 95       	ror	r24
 864:	9c 01       	movw	r18, r24
 866:	22 0f       	add	r18, r18
 868:	33 1f       	adc	r19, r19
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	82 0f       	add	r24, r18
 878:	93 1f       	adc	r25, r19
 87a:	48 1b       	sub	r20, r24
 87c:	59 0b       	sbc	r21, r25
 87e:	fa 01       	movw	r30, r20
 880:	e8 53       	subi	r30, 0x38	; 56
 882:	fe 4f       	sbci	r31, 0xFE	; 254
 884:	80 81       	ld	r24, Z
 886:	89 83       	std	Y+1, r24	; 0x01
	number_array[2] =SMG[ ((number/100)%10) ];
 888:	98 01       	movw	r18, r16
 88a:	36 95       	lsr	r19
 88c:	27 95       	ror	r18
 88e:	36 95       	lsr	r19
 890:	27 95       	ror	r18
 892:	ab e7       	ldi	r26, 0x7B	; 123
 894:	b4 e1       	ldi	r27, 0x14	; 20
 896:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 89a:	ac 01       	movw	r20, r24
 89c:	56 95       	lsr	r21
 89e:	47 95       	ror	r20
 8a0:	9a 01       	movw	r18, r20
 8a2:	ad ec       	ldi	r26, 0xCD	; 205
 8a4:	bc ec       	ldi	r27, 0xCC	; 204
 8a6:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 8aa:	96 95       	lsr	r25
 8ac:	87 95       	ror	r24
 8ae:	96 95       	lsr	r25
 8b0:	87 95       	ror	r24
 8b2:	96 95       	lsr	r25
 8b4:	87 95       	ror	r24
 8b6:	9c 01       	movw	r18, r24
 8b8:	22 0f       	add	r18, r18
 8ba:	33 1f       	adc	r19, r19
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	88 0f       	add	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	82 0f       	add	r24, r18
 8ca:	93 1f       	adc	r25, r19
 8cc:	48 1b       	sub	r20, r24
 8ce:	59 0b       	sbc	r21, r25
 8d0:	fa 01       	movw	r30, r20
 8d2:	e8 53       	subi	r30, 0x38	; 56
 8d4:	fe 4f       	sbci	r31, 0xFE	; 254
 8d6:	80 81       	ld	r24, Z
 8d8:	8a 83       	std	Y+2, r24	; 0x02
	number_array[3] =SMG[ ((number/1000)%10) ];
 8da:	98 01       	movw	r18, r16
 8dc:	36 95       	lsr	r19
 8de:	27 95       	ror	r18
 8e0:	36 95       	lsr	r19
 8e2:	27 95       	ror	r18
 8e4:	36 95       	lsr	r19
 8e6:	27 95       	ror	r18
 8e8:	a5 ec       	ldi	r26, 0xC5	; 197
 8ea:	b0 e2       	ldi	r27, 0x20	; 32
 8ec:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 8f0:	ac 01       	movw	r20, r24
 8f2:	52 95       	swap	r21
 8f4:	42 95       	swap	r20
 8f6:	4f 70       	andi	r20, 0x0F	; 15
 8f8:	45 27       	eor	r20, r21
 8fa:	5f 70       	andi	r21, 0x0F	; 15
 8fc:	45 27       	eor	r20, r21
 8fe:	9a 01       	movw	r18, r20
 900:	ad ec       	ldi	r26, 0xCD	; 205
 902:	bc ec       	ldi	r27, 0xCC	; 204
 904:	0e 94 a1 05 	call	0xb42	; 0xb42 <__umulhisi3>
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	96 95       	lsr	r25
 912:	87 95       	ror	r24
 914:	9c 01       	movw	r18, r24
 916:	22 0f       	add	r18, r18
 918:	33 1f       	adc	r19, r19
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	82 0f       	add	r24, r18
 928:	93 1f       	adc	r25, r19
 92a:	48 1b       	sub	r20, r24
 92c:	59 0b       	sbc	r21, r25
 92e:	fa 01       	movw	r30, r20
 930:	e8 53       	subi	r30, 0x38	; 56
 932:	fe 4f       	sbci	r31, 0xFE	; 254
 934:	80 81       	ld	r24, Z
 936:	8b 83       	std	Y+3, r24	; 0x03
	
	if (device_status_lcd.leakage)
 938:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <device_status_lcd+0x2>
 93c:	99 23       	and	r25, r25
 93e:	19 f0       	breq	.+6      	; 0x946 <make_pure_ppm_number+0x140>
	{
		number_array[3] |= LEAKAGE_ICON;
 940:	80 61       	ori	r24, 0x10	; 16
 942:	8b 83       	std	Y+3, r24	; 0x03
 944:	02 c0       	rjmp	.+4      	; 0x94a <make_pure_ppm_number+0x144>
	}else{
		number_array[3] &= ~LEAKAGE_ICON;
 946:	8f 7e       	andi	r24, 0xEF	; 239
 948:	8b 83       	std	Y+3, r24	; 0x03
	}

}
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	08 95       	ret

00000954 <lcd_update_pure_ppm_display>:
* 入口参数：	unsigned long int	number			要显示的数字

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void lcd_update_pure_ppm_display(unsigned int number){
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	00 d0       	rcall	.+0      	; 0x95a <lcd_update_pure_ppm_display+0x6>
 95a:	00 d0       	rcall	.+0      	; 0x95c <lcd_update_pure_ppm_display+0x8>
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
	unsigned char cache[4] = {0};
 960:	19 82       	std	Y+1, r1	; 0x01
 962:	1a 82       	std	Y+2, r1	; 0x02
 964:	1b 82       	std	Y+3, r1	; 0x03
 966:	1c 82       	std	Y+4, r1	; 0x04
	make_pure_ppm_number(number, cache);
 968:	be 01       	movw	r22, r28
 96a:	6f 5f       	subi	r22, 0xFF	; 255
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	0e 94 03 04 	call	0x806	; 0x806 <make_pure_ppm_number>
	write_string_address_tm1726(10, 4, cache);
 972:	ae 01       	movw	r20, r28
 974:	4f 5f       	subi	r20, 0xFF	; 255
 976:	5f 4f       	sbci	r21, 0xFF	; 255
 978:	64 e0       	ldi	r22, 0x04	; 4
 97a:	8a e0       	ldi	r24, 0x0A	; 10
 97c:	0e 94 02 03 	call	0x604	; 0x604 <write_string_address_tm1726>
}
 980:	0f 90       	pop	r0
 982:	0f 90       	pop	r0
 984:	0f 90       	pop	r0
 986:	0f 90       	pop	r0
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	08 95       	ret

0000098e <init_port>:
	---------------------------------------
		TM1726	端口初始化
			SDA				PA0		OUT
			SCL				PA1		OUT
	-------------------------------------*/
	DDRA |= ((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3));
 98e:	8a b3       	in	r24, 0x1a	; 26
 990:	8f 60       	ori	r24, 0x0F	; 15
 992:	8a bb       	out	0x1a, r24	; 26
	
	/*------------------------------------
		ADC		端口初始化
	------------------------------------*/
	PORTF &= ~((0x01<< PF7) | (0x01<<PF6 )|(0x01<<PF5));
 994:	e2 e6       	ldi	r30, 0x62	; 98
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	8f 71       	andi	r24, 0x1F	; 31
 99c:	80 83       	st	Z, r24
	DDRF  &= ~((0x01<< PF7) | (0x01<<PF6) |(0x01<<PF5));
 99e:	e1 e6       	ldi	r30, 0x61	; 97
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	8f 71       	andi	r24, 0x1F	; 31
 9a6:	80 83       	st	Z, r24
	
	/*------------------------------------
		uart	端口初始化
	------------------------------------*/
	DDRE	|=	 (1 << PE1);		//TXD设置为输出
 9a8:	11 9a       	sbi	0x02, 1	; 2
	DDRE	&=	~(1 << PE0);		//RXD设置为输入
 9aa:	10 98       	cbi	0x02, 0	; 2
	PORTE	&=	 0xFF;				//uart0
 9ac:	83 b1       	in	r24, 0x03	; 3
 9ae:	83 b9       	out	0x03, r24	; 3
	
	DDRD	|=	 (1 << PD3);		//TXD设置为输出
 9b0:	8b 9a       	sbi	0x11, 3	; 17
	DDRD	&=	~(1 << PD2);		//RXD设置为输入
 9b2:	8a 98       	cbi	0x11, 2	; 17
	PORTD	&=	 0xFF;				//uart1
 9b4:	82 b3       	in	r24, 0x12	; 18
 9b6:	82 bb       	out	0x12, r24	; 18
	
	/*------------------------------------
		led		端口初始化
	------------------------------------*/
	DDRC	|=	(1 << PC0);			//PC0设置为输出
 9b8:	a0 9a       	sbi	0x14, 0	; 20
	PORTC	|=	(1 << PC0);			//熄灭led
 9ba:	a8 9a       	sbi	0x15, 0	; 21
	
	/*------------------------------------
		beep	端口初始化
	------------------------------------*/
	DDRB	|=	 (1 << PB0);		//PB0设置为输出
 9bc:	b8 9a       	sbi	0x17, 0	; 23
	PORTB	&=	~(1 << PB0);		//蜂鸣器不响
 9be:	c0 98       	cbi	0x18, 0	; 24

	/*------------------------------------
		TM1726背光灯	端口初始化
	------------------------------------*/
	DDRE	|=	(1 << PE2);			//PE2设置为输出
 9c0:	12 9a       	sbi	0x02, 2	; 2
	PORTE	|=	(1 << PE2);			//打开背光	
 9c2:	1a 9a       	sbi	0x03, 2	; 3
	/*------------------------------------
		TM1726串行	端口初始化
			PA0		SDA		设置为输出
			PA1		SCL		设置为输出
	------------------------------------*/	
	DDRA	|=	((1 << PA0) | (1 << PA1));
 9c4:	8a b3       	in	r24, 0x1a	; 26
 9c6:	83 60       	ori	r24, 0x03	; 3
 9c8:	8a bb       	out	0x1a, r24	; 26
	PORTA	|=	((1 << PA0) | (1 << PA1));
 9ca:	8b b3       	in	r24, 0x1b	; 27
 9cc:	83 60       	ori	r24, 0x03	; 3
 9ce:	8b bb       	out	0x1b, r24	; 27
		电磁阀	端口初始化
			PE7		进水电磁阀		设置为输出
			PE6		出水电磁阀		设置为输出
			初始化为关闭
	------------------------------------*/	
	DDRE	|=	((1 << PE7) | (1 << PE6));
 9d0:	82 b1       	in	r24, 0x02	; 2
 9d2:	80 6c       	ori	r24, 0xC0	; 192
 9d4:	82 b9       	out	0x02, r24	; 2
	PORTE	&= ~((1 << PE7) | (1 << PE6));
 9d6:	83 b1       	in	r24, 0x03	; 3
 9d8:	8f 73       	andi	r24, 0x3F	; 63
 9da:	83 b9       	out	0x03, r24	; 3
	
	/*------------------------------------
		水泵	端口初始化
	------------------------------------*/	
	DDRB	|=	(1 << PB2);			//PB2设置为输出
 9dc:	ba 9a       	sbi	0x17, 2	; 23
	PORTB	&= ~(1 << PB2);			//初始化为关闭
 9de:	c2 98       	cbi	0x18, 2	; 24
	
	/*------------------------------------
		压力开关	端口初始化	
		初始化为输入
	------------------------------------*/	
	DDRB	&= ~((1 << PB6) | (1 << PB7));
 9e0:	87 b3       	in	r24, 0x17	; 23
 9e2:	8f 73       	andi	r24, 0x3F	; 63
 9e4:	87 bb       	out	0x17, r24	; 23
	PORTB	|=	((1 << PB6) | (1 << PB7));
 9e6:	88 b3       	in	r24, 0x18	; 24
 9e8:	80 6c       	ori	r24, 0xC0	; 192
 9ea:	88 bb       	out	0x18, r24	; 24
 9ec:	08 95       	ret

000009ee <init_uart0>:
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void uart0_rx_array_set_empty(){
	memset(uart0_rx_array , 0 , sizeof(uart1_rx_array));
 9ee:	86 e0       	ldi	r24, 0x06	; 6
 9f0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 9f4:	87 e4       	ldi	r24, 0x47	; 71
 9f6:	89 b9       	out	0x09, r24	; 9
 9f8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 9fc:	8a b1       	in	r24, 0x0a	; 10
 9fe:	88 69       	ori	r24, 0x98	; 152
 a00:	8a b9       	out	0x0a, r24	; 10
 a02:	08 95       	ret

00000a04 <init_uart1>:
 a04:	ed e9       	ldi	r30, 0x9D	; 157
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	86 60       	ori	r24, 0x06	; 6
 a0c:	80 83       	st	Z, r24
 a0e:	87 e4       	ldi	r24, 0x47	; 71
 a10:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 a14:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 a18:	ea e9       	ldi	r30, 0x9A	; 154
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	88 69       	ori	r24, 0x98	; 152
 a20:	80 83       	st	Z, r24
 a22:	08 95       	ret

00000a24 <uart0_send_byte>:
 a24:	5d 9b       	sbis	0x0b, 5	; 11
 a26:	fe cf       	rjmp	.-4      	; 0xa24 <uart0_send_byte>
 a28:	8c b9       	out	0x0c, r24	; 12
 a2a:	08 95       	ret

00000a2c <uart0_send_string>:
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	ec 01       	movw	r28, r24
 a32:	88 81       	ld	r24, Y
 a34:	88 23       	and	r24, r24
 a36:	31 f0       	breq	.+12     	; 0xa44 <uart0_send_string+0x18>
 a38:	21 96       	adiw	r28, 0x01	; 1
 a3a:	0e 94 12 05 	call	0xa24	; 0xa24 <uart0_send_byte>
 a3e:	89 91       	ld	r24, Y+
 a40:	81 11       	cpse	r24, r1
 a42:	fb cf       	rjmp	.-10     	; 0xa3a <uart0_send_string+0xe>
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	08 95       	ret

00000a4a <uart1_send_byte>:
 a4a:	eb e9       	ldi	r30, 0x9B	; 155
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	90 81       	ld	r25, Z
 a50:	95 ff       	sbrs	r25, 5
 a52:	fd cf       	rjmp	.-6      	; 0xa4e <uart1_send_byte+0x4>
 a54:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 a58:	08 95       	ret

00000a5a <uart1_send_string>:
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	ec 01       	movw	r28, r24
 a60:	88 81       	ld	r24, Y
 a62:	88 23       	and	r24, r24
 a64:	31 f0       	breq	.+12     	; 0xa72 <uart1_send_string+0x18>
 a66:	21 96       	adiw	r28, 0x01	; 1
 a68:	0e 94 25 05 	call	0xa4a	; 0xa4a <uart1_send_byte>
 a6c:	89 91       	ld	r24, Y+
 a6e:	81 11       	cpse	r24, r1
 a70:	fb cf       	rjmp	.-10     	; 0xa68 <uart1_send_string+0xe>
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	08 95       	ret

00000a78 <bc95_send_string>:
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	ec 01       	movw	r28, r24
 a7e:	0e 94 16 05 	call	0xa2c	; 0xa2c <uart0_send_string>
 a82:	ce 01       	movw	r24, r28
 a84:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uart1_send_string>
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	08 95       	ret

00000a8e <uart1_rx_array_set_empty>:
 a8e:	88 ec       	ldi	r24, 0xC8	; 200
 a90:	e8 e2       	ldi	r30, 0x28	; 40
 a92:	f2 e0       	ldi	r31, 0x02	; 2
 a94:	df 01       	movw	r26, r30
 a96:	1d 92       	st	X+, r1
 a98:	8a 95       	dec	r24
 a9a:	e9 f7       	brne	.-6      	; 0xa96 <uart1_rx_array_set_empty+0x8>
 a9c:	08 95       	ret

00000a9e <__vector_18>:
* 中断向量：USART0_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART0_RX_vect){
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	8f 93       	push	r24
 aaa:	9f 93       	push	r25
 aac:	ef 93       	push	r30
 aae:	ff 93       	push	r31
	if (uart0_rx_count >= UART0_RX_ARRAY_LEN)
 ab0:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <uart0_rx_count>
 ab4:	88 3c       	cpi	r24, 0xC8	; 200
 ab6:	10 f0       	brcs	.+4      	; 0xabc <__vector_18+0x1e>
	{
		uart0_rx_count = 0;
 ab8:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <uart0_rx_count>
	}
	while(!(UCSR0A & (1 << RXC0)));		//判断缓冲区是否有数据
 abc:	5f 9b       	sbis	0x0b, 7	; 11
 abe:	fe cf       	rjmp	.-4      	; 0xabc <__vector_18+0x1e>
	uart0_rx_array[uart0_rx_count] = UDR0;
 ac0:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <uart0_rx_count>
 ac4:	9c b1       	in	r25, 0x0c	; 12
 ac6:	e8 2f       	mov	r30, r24
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	ef 50       	subi	r30, 0x0F	; 15
 acc:	fd 4f       	sbci	r31, 0xFD	; 253
 ace:	90 83       	st	Z, r25
	uart0_rx_count++;
 ad0:	8f 5f       	subi	r24, 0xFF	; 255
 ad2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <uart0_rx_count>
	
}
 ad6:	ff 91       	pop	r31
 ad8:	ef 91       	pop	r30
 ada:	9f 91       	pop	r25
 adc:	8f 91       	pop	r24
 ade:	0f 90       	pop	r0
 ae0:	0f be       	out	0x3f, r0	; 63
 ae2:	0f 90       	pop	r0
 ae4:	1f 90       	pop	r1
 ae6:	18 95       	reti

00000ae8 <__vector_30>:
* 中断向量：USART1_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART1_RX_vect){
 ae8:	1f 92       	push	r1
 aea:	0f 92       	push	r0
 aec:	0f b6       	in	r0, 0x3f	; 63
 aee:	0f 92       	push	r0
 af0:	11 24       	eor	r1, r1
 af2:	8f 93       	push	r24
 af4:	9f 93       	push	r25
 af6:	ef 93       	push	r30
 af8:	ff 93       	push	r31
	//如果接收数据的数组长度大于定义的最大长度则将计数清0
	if (uart1_rx_count >= UART1_RX_ARRAY_LEN)
 afa:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <uart1_rx_count>
 afe:	88 3c       	cpi	r24, 0xC8	; 200
 b00:	10 f0       	brcs	.+4      	; 0xb06 <__vector_30+0x1e>
	{
		uart1_rx_count = 0;
 b02:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <uart1_rx_count>
	}
	
	while( !(UCSR1A & (1<<RXC1)) );				//判断缓冲区是否有数据
 b06:	eb e9       	ldi	r30, 0x9B	; 155
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	80 81       	ld	r24, Z
 b0c:	88 23       	and	r24, r24
 b0e:	ec f7       	brge	.-6      	; 0xb0a <__vector_30+0x22>
	uart1_rx_array[uart1_rx_count] = UDR1;		//保存接收到的数据
 b10:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <uart1_rx_count>
 b14:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 b18:	e8 2f       	mov	r30, r24
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	e8 5d       	subi	r30, 0xD8	; 216
 b1e:	fd 4f       	sbci	r31, 0xFD	; 253
 b20:	90 83       	st	Z, r25
	uart1_rx_count++;							//计数
 b22:	8f 5f       	subi	r24, 0xFF	; 255
 b24:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <uart1_rx_count>
	
	LED_REVERSE;
 b28:	95 b3       	in	r25, 0x15	; 21
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	89 27       	eor	r24, r25
 b2e:	85 bb       	out	0x15, r24	; 21
}
 b30:	ff 91       	pop	r31
 b32:	ef 91       	pop	r30
 b34:	9f 91       	pop	r25
 b36:	8f 91       	pop	r24
 b38:	0f 90       	pop	r0
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	0f 90       	pop	r0
 b3e:	1f 90       	pop	r1
 b40:	18 95       	reti

00000b42 <__umulhisi3>:
 b42:	a2 9f       	mul	r26, r18
 b44:	b0 01       	movw	r22, r0
 b46:	b3 9f       	mul	r27, r19
 b48:	c0 01       	movw	r24, r0
 b4a:	a3 9f       	mul	r26, r19
 b4c:	70 0d       	add	r23, r0
 b4e:	81 1d       	adc	r24, r1
 b50:	11 24       	eor	r1, r1
 b52:	91 1d       	adc	r25, r1
 b54:	b2 9f       	mul	r27, r18
 b56:	70 0d       	add	r23, r0
 b58:	81 1d       	adc	r24, r1
 b5a:	11 24       	eor	r1, r1
 b5c:	91 1d       	adc	r25, r1
 b5e:	08 95       	ret

00000b60 <atoi>:
 b60:	fc 01       	movw	r30, r24
 b62:	88 27       	eor	r24, r24
 b64:	99 27       	eor	r25, r25
 b66:	e8 94       	clt
 b68:	21 91       	ld	r18, Z+
 b6a:	20 32       	cpi	r18, 0x20	; 32
 b6c:	e9 f3       	breq	.-6      	; 0xb68 <atoi+0x8>
 b6e:	29 30       	cpi	r18, 0x09	; 9
 b70:	10 f0       	brcs	.+4      	; 0xb76 <atoi+0x16>
 b72:	2e 30       	cpi	r18, 0x0E	; 14
 b74:	c8 f3       	brcs	.-14     	; 0xb68 <atoi+0x8>
 b76:	2b 32       	cpi	r18, 0x2B	; 43
 b78:	41 f0       	breq	.+16     	; 0xb8a <atoi+0x2a>
 b7a:	2d 32       	cpi	r18, 0x2D	; 45
 b7c:	39 f4       	brne	.+14     	; 0xb8c <atoi+0x2c>
 b7e:	68 94       	set
 b80:	04 c0       	rjmp	.+8      	; 0xb8a <atoi+0x2a>
 b82:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulhi_const_10>
 b86:	82 0f       	add	r24, r18
 b88:	91 1d       	adc	r25, r1
 b8a:	21 91       	ld	r18, Z+
 b8c:	20 53       	subi	r18, 0x30	; 48
 b8e:	2a 30       	cpi	r18, 0x0A	; 10
 b90:	c0 f3       	brcs	.-16     	; 0xb82 <atoi+0x22>
 b92:	1e f4       	brtc	.+6      	; 0xb9a <atoi+0x3a>
 b94:	90 95       	com	r25
 b96:	81 95       	neg	r24
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	08 95       	ret

00000b9c <strchr>:
 b9c:	fc 01       	movw	r30, r24
 b9e:	81 91       	ld	r24, Z+
 ba0:	86 17       	cp	r24, r22
 ba2:	21 f0       	breq	.+8      	; 0xbac <strchr+0x10>
 ba4:	88 23       	and	r24, r24
 ba6:	d9 f7       	brne	.-10     	; 0xb9e <strchr+0x2>
 ba8:	99 27       	eor	r25, r25
 baa:	08 95       	ret
 bac:	31 97       	sbiw	r30, 0x01	; 1
 bae:	cf 01       	movw	r24, r30
 bb0:	08 95       	ret

00000bb2 <strcpy>:
 bb2:	fb 01       	movw	r30, r22
 bb4:	dc 01       	movw	r26, r24
 bb6:	01 90       	ld	r0, Z+
 bb8:	0d 92       	st	X+, r0
 bba:	00 20       	and	r0, r0
 bbc:	e1 f7       	brne	.-8      	; 0xbb6 <strcpy+0x4>
 bbe:	08 95       	ret

00000bc0 <strstr>:
 bc0:	fb 01       	movw	r30, r22
 bc2:	51 91       	ld	r21, Z+
 bc4:	55 23       	and	r21, r21
 bc6:	a9 f0       	breq	.+42     	; 0xbf2 <strstr+0x32>
 bc8:	bf 01       	movw	r22, r30
 bca:	dc 01       	movw	r26, r24
 bcc:	4d 91       	ld	r20, X+
 bce:	45 17       	cp	r20, r21
 bd0:	41 11       	cpse	r20, r1
 bd2:	e1 f7       	brne	.-8      	; 0xbcc <strstr+0xc>
 bd4:	59 f4       	brne	.+22     	; 0xbec <strstr+0x2c>
 bd6:	cd 01       	movw	r24, r26
 bd8:	01 90       	ld	r0, Z+
 bda:	00 20       	and	r0, r0
 bdc:	49 f0       	breq	.+18     	; 0xbf0 <strstr+0x30>
 bde:	4d 91       	ld	r20, X+
 be0:	40 15       	cp	r20, r0
 be2:	41 11       	cpse	r20, r1
 be4:	c9 f3       	breq	.-14     	; 0xbd8 <strstr+0x18>
 be6:	fb 01       	movw	r30, r22
 be8:	41 11       	cpse	r20, r1
 bea:	ef cf       	rjmp	.-34     	; 0xbca <strstr+0xa>
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	01 97       	sbiw	r24, 0x01	; 1
 bf2:	08 95       	ret

00000bf4 <__mulhi_const_10>:
 bf4:	7a e0       	ldi	r23, 0x0A	; 10
 bf6:	97 9f       	mul	r25, r23
 bf8:	90 2d       	mov	r25, r0
 bfa:	87 9f       	mul	r24, r23
 bfc:	80 2d       	mov	r24, r0
 bfe:	91 0d       	add	r25, r1
 c00:	11 24       	eor	r1, r1
 c02:	08 95       	ret

00000c04 <_exit>:
 c04:	f8 94       	cli

00000c06 <__stop_program>:
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <__stop_program>
