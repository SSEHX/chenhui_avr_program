
NB-IOT_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d8  00800100  00000fc4  00001058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f7  008003d8  008003d8  00001330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031ba  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001028  00000000  00000000  00004786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f2  00000000  00000000  000057ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ac  00000000  00000000  00006ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bfa  00000000  00000000  0000734c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001970  00000000  00000000  00007f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000098b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_18>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_21>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_30>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a8 3d       	cpi	r26, 0xD8	; 216
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	28 e0       	ldi	r18, 0x08	; 8
  b0:	a8 ed       	ldi	r26, 0xD8	; 216
  b2:	b3 e0       	ldi	r27, 0x03	; 3
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	af 3c       	cpi	r26, 0xCF	; 207
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 93 00 	call	0x126	; 0x126 <main>
  c2:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__vector_21>:
	
	ADMUX =	(ADMUX&0xe0) | channel;			//不改变其他配置，并设置通道
	ADCSRA |= (1 << ADSC);					//启动转换
}

SIGNAL(ADC_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	adc_channel_data_list[adc_interrupt_channel_cache] = (ADCL | ADCH << 8);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	25 b1       	in	r18, 0x05	; 5
  e2:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <__data_end>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e7 52       	subi	r30, 0x27	; 39
  ee:	fc 4f       	sbci	r31, 0xFC	; 252
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	92 2b       	or	r25, r18
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <system_init>:
 */ 

#include "app.h"

void system_init(){
	cli();
 10c:	f8 94       	cli
	init_port();
 10e:	0e 94 cb 06 	call	0xd96	; 0xd96 <init_port>
	init_lcd();
 112:	0e 94 26 05 	call	0xa4c	; 0xa4c <init_lcd>
	init_uart0();
 116:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <init_uart0>
	init_uart1();
 11a:	0e 94 06 07 	call	0xe0c	; 0xe0c <init_uart1>
	init_bc95();
 11e:	0e 94 cc 03 	call	0x798	; 0x798 <init_bc95>
	sei();
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <main>:
}

int main(void)
{
	system_init();
 126:	0e 94 86 00 	call	0x10c	; 0x10c <system_init>
	
	lcd_update_pure_ppm_display(sizeof(query_data_flag.message));
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <lcd_update_pure_ppm_display>
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0xc>

00000134 <callback_get_eps_status>:
	return 0;
}

unsigned char callback_create_socket(){
	return 0;
}
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <callback_get_plmn>:
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret

0000013c <callback_get_imsi>:
	
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 get imsi is run ... \r\n");
 13c:	8e eb       	ldi	r24, 0xBE	; 190
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
	//判断获取到的imsi是否为15位如果不是则返回0
	if ((query_data_flag.info_offset_stop - query_data_flag.info_offset_start) != 15)
 144:	20 91 a1 06 	lds	r18, 0x06A1	; 0x8006a1 <query_data_flag+0x10e>
 148:	e0 91 a0 06 	lds	r30, 0x06A0	; 0x8006a0 <query_data_flag+0x10d>
 14c:	82 2f       	mov	r24, r18
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	8e 1b       	sub	r24, r30
 152:	91 09       	sbc	r25, r1
 154:	0f 97       	sbiw	r24, 0x0f	; 15
 156:	71 f0       	breq	.+28     	; 0x174 <callback_get_imsi+0x38>
	{
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
		uart0_send_string("bc95 get imsi ---> ");
 158:	8a ed       	ldi	r24, 0xDA	; 218
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string("NUMBER ERROR");
 160:	8e ee       	ldi	r24, 0xEE	; 238
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string(" \r\n");
 168:	89 e4       	ldi	r24, 0x49	; 73
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
		return 0;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret
	}
	//从起始偏移量开始复制到当前位置，即为imsi的数据,并返回
	for (unsigned int i = query_data_flag.info_offset_start ; i < query_data_flag.info_offset_stop ; i++)
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	e2 17       	cp	r30, r18
 17a:	f3 07       	cpc	r31, r19
 17c:	58 f4       	brcc	.+22     	; 0x194 <callback_get_imsi+0x58>
 17e:	ed 56       	subi	r30, 0x6D	; 109
 180:	fa 4f       	sbci	r31, 0xFA	; 250
 182:	ae eb       	ldi	r26, 0xBE	; 190
 184:	b8 e0       	ldi	r27, 0x08	; 8
 186:	2d 56       	subi	r18, 0x6D	; 109
 188:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		device_status_bc95.imsi[cache_count] = query_data_flag.message[i];
 18a:	81 91       	ld	r24, Z+
 18c:	8d 93       	st	X+, r24
		uart0_send_string(" \r\n");
#endif
		return 0;
	}
	//从起始偏移量开始复制到当前位置，即为imsi的数据,并返回
	for (unsigned int i = query_data_flag.info_offset_start ; i < query_data_flag.info_offset_stop ; i++)
 18e:	e2 17       	cp	r30, r18
 190:	f3 07       	cpc	r31, r19
 192:	d9 f7       	brne	.-10     	; 0x18a <callback_get_imsi+0x4e>

/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 get imsi ---> ");
 194:	8a ed       	ldi	r24, 0xDA	; 218
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
	uart0_send_string(device_status_bc95.imsi);
 19c:	8e eb       	ldi	r24, 0xBE	; 190
 19e:	98 e0       	ldi	r25, 0x08	; 8
 1a0:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
	uart0_send_string(" \r\n");
 1a4:	89 e4       	ldi	r24, 0x49	; 73
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
	return 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
}
 1ae:	08 95       	ret

000001b0 <callback_get_imei>:
* 功    能：解析bc95返回的数据，读取imei
* 入口参数：无
* 出口参数：无
* 返 回 值：unsigned char 获取是否成功，	1--->成功	0--->不成功
*-----------------------------------------------------------------------------*/
unsigned char callback_get_imei(){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <callback_get_imei+0x6>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <callback_get_imei+0x8>
 1b8:	1f 92       	push	r1
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
	unsigned char name[] = "CGSN";
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	ec e2       	ldi	r30, 0x2C	; 44
 1c2:	f2 e0       	ldi	r31, 0x02	; 2
 1c4:	de 01       	movw	r26, r28
 1c6:	11 96       	adiw	r26, 0x01	; 1
 1c8:	01 90       	ld	r0, Z+
 1ca:	0d 92       	st	X+, r0
 1cc:	8a 95       	dec	r24
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <callback_get_imei+0x18>
	
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 get imei is run ... \r\n");
 1d0:	8b ef       	ldi	r24, 0xFB	; 251
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif

	if (strstr(query_data_flag.message, name) != NULL)			//判断是否是需要的返回值
 1d8:	be 01       	movw	r22, r28
 1da:	6f 5f       	subi	r22, 0xFF	; 255
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	83 e9       	ldi	r24, 0x93	; 147
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 1e6:	89 2b       	or	r24, r25
 1e8:	09 f4       	brne	.+2      	; 0x1ec <callback_get_imei+0x3c>
 1ea:	47 c0       	rjmp	.+142    	; 0x27a <callback_get_imei+0xca>
	{
		//从”：“开始检查并存储数据到device_status_bc95.band	直到碰见“\r”数据结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
 1ec:	60 91 94 06 	lds	r22, 0x0694	; 0x800694 <query_data_flag+0x101>
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	86 0f       	add	r24, r22
 1f4:	30 91 92 06 	lds	r19, 0x0692	; 0x800692 <query_data_flag+0xff>
 1f8:	83 17       	cp	r24, r19
 1fa:	b0 f1       	brcs	.+108    	; 0x268 <callback_get_imei+0xb8>
 1fc:	4c c0       	rjmp	.+152    	; 0x296 <callback_get_imei+0xe6>
		{
			if (query_data_flag.message[i] != '\r')
 1fe:	48 2f       	mov	r20, r24
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	fa 01       	movw	r30, r20
 204:	ed 56       	subi	r30, 0x6D	; 109
 206:	fa 4f       	sbci	r31, 0xFA	; 250
 208:	90 81       	ld	r25, Z
 20a:	9d 30       	cpi	r25, 0x0D	; 13
 20c:	11 f4       	brne	.+4      	; 0x212 <callback_get_imei+0x62>
 20e:	0b c0       	rjmp	.+22     	; 0x226 <callback_get_imei+0x76>
 210:	20 e0       	ldi	r18, 0x00	; 0
			{
				device_status_bc95.imei[cache_count] = query_data_flag.message[i];
 212:	e2 2f       	mov	r30, r18
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e8 55       	subi	r30, 0x58	; 88
 218:	f7 4f       	sbci	r31, 0xF7	; 247
 21a:	96 83       	std	Z+6, r25	; 0x06
				cache_count++;
 21c:	2f 5f       	subi	r18, 0xFF	; 255
#endif

	if (strstr(query_data_flag.message, name) != NULL)			//判断是否是需要的返回值
	{
		//从”：“开始检查并存储数据到device_status_bc95.band	直到碰见“\r”数据结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	83 17       	cp	r24, r19
 222:	68 f3       	brcs	.-38     	; 0x1fe <callback_get_imei+0x4e>
 224:	38 c0       	rjmp	.+112    	; 0x296 <callback_get_imei+0xe6>
			if (query_data_flag.message[i] != '\r')
			{
				device_status_bc95.imei[cache_count] = query_data_flag.message[i];
				cache_count++;
			}else{
				if ((i - query_data_flag.colon_offset) != 16)
 226:	46 1b       	sub	r20, r22
 228:	51 09       	sbc	r21, r1
 22a:	40 31       	cpi	r20, 0x10	; 16
 22c:	51 05       	cpc	r21, r1
 22e:	71 f0       	breq	.+28     	; 0x24c <callback_get_imei+0x9c>
				{
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
				uart0_send_string("bc95 get imei ----> ");
 230:	87 e1       	ldi	r24, 0x17	; 23
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string("NUMBER ERROR");
 238:	8e ee       	ldi	r24, 0xEE	; 238
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(" \r\n");
 240:	89 e4       	ldi	r24, 0x49	; 73
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
					return 0;
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	25 c0       	rjmp	.+74     	; 0x296 <callback_get_imei+0xe6>
				}
/*--------------------------------------
			调试输出
--------------------------------------*/
#ifdef	DEBUG
				uart0_send_string("bc95 get imei ----> ");
 24c:	87 e1       	ldi	r24, 0x17	; 23
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(device_status_bc95.imei);
 254:	8e ea       	ldi	r24, 0xAE	; 174
 256:	98 e0       	ldi	r25, 0x08	; 8
 258:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(" \r\n");
 25c:	89 e4       	ldi	r24, 0x49	; 73
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
				
				return 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	17 c0       	rjmp	.+46     	; 0x296 <callback_get_imei+0xe6>
	if (strstr(query_data_flag.message, name) != NULL)			//判断是否是需要的返回值
	{
		//从”：“开始检查并存储数据到device_status_bc95.band	直到碰见“\r”数据结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
		{
			if (query_data_flag.message[i] != '\r')
 268:	48 2f       	mov	r20, r24
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	fa 01       	movw	r30, r20
 26e:	ed 56       	subi	r30, 0x6D	; 109
 270:	fa 4f       	sbci	r31, 0xFA	; 250
 272:	90 81       	ld	r25, Z
 274:	9d 30       	cpi	r25, 0x0D	; 13
 276:	61 f6       	brne	.-104    	; 0x210 <callback_get_imei+0x60>
 278:	d6 cf       	rjmp	.-84     	; 0x226 <callback_get_imei+0x76>
	}else{
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
		uart0_send_string("bc95 get imei ----> ");
 27a:	87 e1       	ldi	r24, 0x17	; 23
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string("ERROR");
 282:	85 ef       	ldi	r24, 0xF5	; 245
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string(" \r\n");
 28a:	89 e4       	ldi	r24, 0x49	; 73
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
		return 0;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	00 c0       	rjmp	.+0      	; 0x296 <callback_get_imei+0xe6>
	}
}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <callback_get_band>:
* 功    能：解析bc95返回的数据，读取band
* 入口参数：无
* 出口参数：无
* 返 回 值：unsigned char 获取是否成功，	1--->成功	0--->不成功
*-----------------------------------------------------------------------------*/
unsigned char callback_get_band(){
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <callback_get_band+0x6>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <callback_get_band+0x8>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <callback_get_band+0xa>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
	unsigned char name[] = "NBAND";
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	e2 e6       	ldi	r30, 0x62	; 98
 2b8:	f2 e0       	ldi	r31, 0x02	; 2
 2ba:	de 01       	movw	r26, r28
 2bc:	11 96       	adiw	r26, 0x01	; 1
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	8a 95       	dec	r24
 2c4:	e1 f7       	brne	.-8      	; 0x2be <callback_get_band+0x18>
	
	/*--------------------------------------
					调试输出
    --------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 get band is run ... \r\n");
 2c6:	81 e3       	ldi	r24, 0x31	; 49
 2c8:	92 e0       	ldi	r25, 0x02	; 2
 2ca:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif

	if (strstr(query_data_flag.message, name) != NULL)			//判断是否是需要的返回值
 2ce:	be 01       	movw	r22, r28
 2d0:	6f 5f       	subi	r22, 0xFF	; 255
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	83 e9       	ldi	r24, 0x93	; 147
 2d6:	95 e0       	ldi	r25, 0x05	; 5
 2d8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 2dc:	89 2b       	or	r24, r25
 2de:	89 f1       	breq	.+98     	; 0x342 <callback_get_band+0x9c>
	{
		//从”：“开始检查并存储数据到device_status_bc95.band	直到碰见“\r”数据结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
 2e0:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <query_data_flag+0x101>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	30 91 92 06 	lds	r19, 0x0692	; 0x800692 <query_data_flag+0xff>
 2ea:	83 17       	cp	r24, r19
 2ec:	10 f1       	brcs	.+68     	; 0x332 <callback_get_band+0x8c>
 2ee:	37 c0       	rjmp	.+110    	; 0x35e <callback_get_band+0xb8>
		{
			if (query_data_flag.message[i] != '\r')
 2f0:	e8 2f       	mov	r30, r24
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ed 56       	subi	r30, 0x6D	; 109
 2f6:	fa 4f       	sbci	r31, 0xFA	; 250
 2f8:	90 81       	ld	r25, Z
 2fa:	9d 30       	cpi	r25, 0x0D	; 13
 2fc:	11 f4       	brne	.+4      	; 0x302 <callback_get_band+0x5c>
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <callback_get_band+0x70>
 300:	20 e0       	ldi	r18, 0x00	; 0
			{
				device_status_bc95.band[cache_count] = query_data_flag.message[i];
 302:	e2 2f       	mov	r30, r18
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	e8 55       	subi	r30, 0x58	; 88
 308:	f7 4f       	sbci	r31, 0xF7	; 247
 30a:	90 83       	st	Z, r25
				cache_count++;
 30c:	2f 5f       	subi	r18, 0xFF	; 255
#endif

	if (strstr(query_data_flag.message, name) != NULL)			//判断是否是需要的返回值
	{
		//从”：“开始检查并存储数据到device_status_bc95.band	直到碰见“\r”数据结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	83 17       	cp	r24, r19
 312:	70 f3       	brcs	.-36     	; 0x2f0 <callback_get_band+0x4a>
 314:	24 c0       	rjmp	.+72     	; 0x35e <callback_get_band+0xb8>
			}else{
				/*--------------------------------------
								调试输出
				--------------------------------------*/
#ifdef	DEBUG
				uart0_send_string("bc95 get band ----> ");
 316:	8d e4       	ldi	r24, 0x4D	; 77
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(device_status_bc95.band);
 31e:	88 ea       	ldi	r24, 0xA8	; 168
 320:	98 e0       	ldi	r25, 0x08	; 8
 322:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(" \r\n");
 326:	89 e4       	ldi	r24, 0x49	; 73
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
				
				return 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	16 c0       	rjmp	.+44     	; 0x35e <callback_get_band+0xb8>
	if (strstr(query_data_flag.message, name) != NULL)			//判断是否是需要的返回值
	{
		//从”：“开始检查并存储数据到device_status_bc95.band	直到碰见“\r”数据结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
		{
			if (query_data_flag.message[i] != '\r')
 332:	e8 2f       	mov	r30, r24
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ed 56       	subi	r30, 0x6D	; 109
 338:	fa 4f       	sbci	r31, 0xFA	; 250
 33a:	90 81       	ld	r25, Z
 33c:	9d 30       	cpi	r25, 0x0D	; 13
 33e:	01 f7       	brne	.-64     	; 0x300 <callback_get_band+0x5a>
 340:	ea cf       	rjmp	.-44     	; 0x316 <callback_get_band+0x70>
	}else{
				/*--------------------------------------
								调试输出
				--------------------------------------*/
#ifdef	DEBUG
		uart0_send_string("bc95 get band ----> ");
 342:	8d e4       	ldi	r24, 0x4D	; 77
 344:	92 e0       	ldi	r25, 0x02	; 2
 346:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string("ERROR");
 34a:	85 ef       	ldi	r24, 0xF5	; 245
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string(" \r\n");
 352:	89 e4       	ldi	r24, 0x49	; 73
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
		return 0;
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	00 c0       	rjmp	.+0      	; 0x35e <callback_get_band+0xb8>
	}
}
 35e:	26 96       	adiw	r28, 0x06	; 6
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <callback_get_csq>:
* 功    能：解析bc95返回的数据，读取csq信号强度
* 入口参数：无
* 出口参数：无
* 返 回 值：unsigned char 获取是否成功，	1--->成功	0--->不成功
*-----------------------------------------------------------------------------*/
unsigned char callback_get_csq(){
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	00 d0       	rcall	.+0      	; 0x382 <callback_get_csq+0x12>
 382:	00 d0       	rcall	.+0      	; 0x384 <callback_get_csq+0x14>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	unsigned char name[] = "CSQ";
 388:	83 e4       	ldi	r24, 0x43	; 67
 38a:	93 e5       	ldi	r25, 0x53	; 83
 38c:	9a 83       	std	Y+2, r25	; 0x02
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	81 e5       	ldi	r24, 0x51	; 81
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	9c 83       	std	Y+4, r25	; 0x04
 396:	8b 83       	std	Y+3, r24	; 0x03
	
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 get csq is run ... \r\n");
 398:	88 e6       	ldi	r24, 0x68	; 104
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif

	if (strstr(query_data_flag.message, name) != NULL)	//判断是否存在返回的需要的相关数据
 3a0:	be 01       	movw	r22, r28
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	83 e9       	ldi	r24, 0x93	; 147
 3a8:	95 e0       	ldi	r25, 0x05	; 5
 3aa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 3ae:	89 2b       	or	r24, r25
 3b0:	a1 f1       	breq	.+104    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		//循环存储数据，从“：”开始为数据，碰到“，”即为结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
 3b2:	f0 90 94 06 	lds	r15, 0x0694	; 0x800694 <query_data_flag+0x101>
 3b6:	f3 94       	inc	r15
 3b8:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <query_data_flag+0xff>
 3bc:	f8 16       	cp	r15, r24
 3be:	d8 f5       	brcc	.+118    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3c0:	e1 2c       	mov	r14, r1
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f2 e9       	ldi	r31, 0x92	; 146
 3c6:	cf 2e       	mov	r12, r31
 3c8:	f6 e0       	ldi	r31, 0x06	; 6
 3ca:	df 2e       	mov	r13, r31
 3cc:	f0 2d       	mov	r31, r0
		{
			uart0_send_string(i);
 3ce:	0f 2d       	mov	r16, r15
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	c8 01       	movw	r24, r16
 3d4:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
			if (query_data_flag.message[i] != ',')		//如果碰不到“，”则继续接收
 3d8:	f8 01       	movw	r30, r16
 3da:	ed 56       	subi	r30, 0x6D	; 109
 3dc:	fa 4f       	sbci	r31, 0xFA	; 250
 3de:	80 81       	ld	r24, Z
 3e0:	8c 32       	cpi	r24, 0x2C	; 44
 3e2:	69 f0       	breq	.+26     	; 0x3fe <callback_get_csq+0x8e>
			{
				device_status_bc95.csq[cache_count] = query_data_flag.message[i];
 3e4:	ee 2d       	mov	r30, r14
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	e8 55       	subi	r30, 0x58	; 88
 3ea:	f7 4f       	sbci	r31, 0xF7	; 247
 3ec:	83 83       	std	Z+3, r24	; 0x03
				cache_count++;						
 3ee:	e3 94       	inc	r14
#endif

	if (strstr(query_data_flag.message, name) != NULL)	//判断是否存在返回的需要的相关数据
	{
		//循环存储数据，从“：”开始为数据，碰到“，”即为结束
		for (unsigned char i = query_data_flag.colon_offset+1 ; i < query_data_flag.message_length ; i++)
 3f0:	f3 94       	inc	r15
 3f2:	f6 01       	movw	r30, r12
 3f4:	80 81       	ld	r24, Z
 3f6:	f8 16       	cp	r15, r24
 3f8:	50 f3       	brcs	.-44     	; 0x3ce <callback_get_csq+0x5e>
		uart0_send_string("ERROR");
		uart0_send_string(" \r\n");
#endif
		return 0;
	}
		return 0;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	1d c0       	rjmp	.+58     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			}else{										//碰到“，”则返回1			
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
				uart0_send_string("bc95 get csq ----> ");
 3fe:	83 e8       	ldi	r24, 0x83	; 131
 400:	92 e0       	ldi	r25, 0x02	; 2
 402:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(device_status_bc95.csq);
 406:	8b ea       	ldi	r24, 0xAB	; 171
 408:	98 e0       	ldi	r25, 0x08	; 8
 40a:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(" \r\n");
 40e:	89 e4       	ldi	r24, 0x49	; 73
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
				return 1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0f c0       	rjmp	.+30     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	}else{												//如果没有检测到相关的返回数据，则返回0
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
		uart0_send_string("bc95 get csq ----> ");
 41a:	83 e8       	ldi	r24, 0x83	; 131
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string("ERROR");
 422:	85 ef       	ldi	r24, 0xF5	; 245
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string(" \r\n");
 42a:	89 e4       	ldi	r24, 0x49	; 73
 42c:	92 e0       	ldi	r25, 0x02	; 2
 42e:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
		return 0;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	01 c0       	rjmp	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	}
		return 0;
 436:	80 e0       	ldi	r24, 0x00	; 0
}
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	08 95       	ret

00000452 <callback_get_profile_status>:
}

unsigned char callback_get_eps_status(){
	return 0;
}
unsigned char callback_get_profile_status(){
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	00 d0       	rcall	.+0      	; 0x45c <callback_get_profile_status+0xa>
 45c:	00 d0       	rcall	.+0      	; 0x45e <callback_get_profile_status+0xc>
 45e:	00 d0       	rcall	.+0      	; 0x460 <callback_get_profile_status+0xe>
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char name[] = "CGATT";
 464:	86 e0       	ldi	r24, 0x06	; 6
 466:	ec ed       	ldi	r30, 0xDC	; 220
 468:	f2 e0       	ldi	r31, 0x02	; 2
 46a:	de 01       	movw	r26, r28
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <callback_get_profile_status+0x1c>
	
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 get profile status is run ... \r\n");
 476:	87 e9       	ldi	r24, 0x97	; 151
 478:	92 e0       	ldi	r25, 0x02	; 2
 47a:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif

	if (strstr(query_data_flag.message, name) != NULL)			//判断是否是需要的返回值
 47e:	be 01       	movw	r22, r28
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	83 e9       	ldi	r24, 0x93	; 147
 486:	95 e0       	ldi	r25, 0x05	; 5
 488:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 48c:	89 2b       	or	r24, r25
 48e:	79 f1       	breq	.+94     	; 0x4ee <callback_get_profile_status+0x9c>
	{
		if (query_data_flag.message[query_data_flag.colon_offset+1] == '1' || query_data_flag.message[query_data_flag.colon_offset+1] == 1)
 490:	e0 91 94 06 	lds	r30, 0x0694	; 0x800694 <query_data_flag+0x101>
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ed 56       	subi	r30, 0x6D	; 109
 498:	fa 4f       	sbci	r31, 0xFA	; 250
 49a:	81 81       	ldd	r24, Z+1	; 0x01
 49c:	81 33       	cpi	r24, 0x31	; 49
 49e:	11 f0       	breq	.+4      	; 0x4a4 <callback_get_profile_status+0x52>
 4a0:	81 30       	cpi	r24, 0x01	; 1
 4a2:	b9 f4       	brne	.+46     	; 0x4d2 <callback_get_profile_status+0x80>
		{
			device_status_bc95.profile_status = query_data_flag.message[query_data_flag.colon_offset+1];
 4a4:	08 ea       	ldi	r16, 0xA8	; 168
 4a6:	18 e0       	ldi	r17, 0x08	; 8
 4a8:	f8 01       	movw	r30, r16
 4aa:	86 a3       	std	Z+38, r24	; 0x26
			
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
				uart0_send_string("bc95 get profile status ----> ");
 4ac:	8d eb       	ldi	r24, 0xBD	; 189
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_byte(device_status_bc95.profile_status);
 4b4:	f8 01       	movw	r30, r16
 4b6:	86 a1       	ldd	r24, Z+38	; 0x26
 4b8:	0e 94 16 07 	call	0xe2c	; 0xe2c <uart0_send_byte>
				lcd_update_raw_ppm_display(device_status_bc95.profile_status);
 4bc:	f8 01       	movw	r30, r16
 4be:	86 a1       	ldd	r24, Z+38	; 0x26
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <lcd_update_raw_ppm_display>
				uart0_send_string(" \r\n");
 4c6:	89 e4       	ldi	r24, 0x49	; 73
 4c8:	92 e0       	ldi	r25, 0x02	; 2
 4ca:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
			return 1;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	1b c0       	rjmp	.+54     	; 0x508 <callback_get_profile_status+0xb6>
		}else{
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
				uart0_send_string("bc95 get profile status ----> ");
 4d2:	8d eb       	ldi	r24, 0xBD	; 189
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string("ERROR");
 4da:	85 ef       	ldi	r24, 0xF5	; 245
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
				uart0_send_string(" \r\n");
 4e2:	89 e4       	ldi	r24, 0x49	; 73
 4e4:	92 e0       	ldi	r25, 0x02	; 2
 4e6:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
			return 0;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <callback_get_profile_status+0xb6>
	}else{
/*--------------------------------------
				调试输出
--------------------------------------*/
#ifdef	DEBUG
		uart0_send_string("bc95 get profile status ----> ");
 4ee:	8d eb       	ldi	r24, 0xBD	; 189
 4f0:	92 e0       	ldi	r25, 0x02	; 2
 4f2:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string("ERROR");
 4f6:	85 ef       	ldi	r24, 0xF5	; 245
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
		uart0_send_string(" \r\n");
 4fe:	89 e4       	ldi	r24, 0x49	; 73
 500:	92 e0       	ldi	r25, 0x02	; 2
 502:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
		return 0;
 506:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 508:	26 96       	adiw	r28, 0x06	; 6
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <type_set_process>:
* 功    能：类型为set的数据处理
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
unsigned char type_set_process(){
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	27 97       	sbiw	r28, 0x07	; 7
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
/*--------------------------------------
			调试输出
--------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 set process is run ... \r\n");
 532:	82 ee       	ldi	r24, 0xE2	; 226
 534:	92 e0       	ldi	r25, 0x02	; 2
 536:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
	unsigned char uart1_rx_array1[] = "\r\nOK\r\n";
 53a:	87 e0       	ldi	r24, 0x07	; 7
 53c:	e7 e4       	ldi	r30, 0x47	; 71
 53e:	f3 e0       	ldi	r31, 0x03	; 3
 540:	de 01       	movw	r26, r28
 542:	11 96       	adiw	r26, 0x01	; 1
 544:	01 90       	ld	r0, Z+
 546:	0d 92       	st	X+, r0
 548:	8a 95       	dec	r24
 54a:	e1 f7       	brne	.-8      	; 0x544 <type_set_process+0x26>
	if (strstr(uart1_rx_array1, bc95_response_ok) != NULL)
 54c:	60 ed       	ldi	r22, 0xD0	; 208
 54e:	73 e0       	ldi	r23, 0x03	; 3
 550:	ce 01       	movw	r24, r28
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 558:	89 2b       	or	r24, r25
 55a:	21 f0       	breq	.+8      	; 0x564 <type_set_process+0x46>
	{
		
		uart1_rx_array_set_empty();
 55c:	0e 94 4b 07 	call	0xe96	; 0xe96 <uart1_rx_array_set_empty>
		return 1;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0d c0       	rjmp	.+26     	; 0x57e <type_set_process+0x60>
	}else if (strstr(uart1_rx_array1, bc95_response_error) != NULL)
 564:	6a ec       	ldi	r22, 0xCA	; 202
 566:	73 e0       	ldi	r23, 0x03	; 3
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 570:	89 2b       	or	r24, r25
 572:	21 f4       	brne	.+8      	; 0x57c <type_set_process+0x5e>
	{
		
		return 0;
	}
	uart1_rx_array_set_empty();
 574:	0e 94 4b 07 	call	0xe96	; 0xe96 <uart1_rx_array_set_empty>
	return 0;
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	01 c0       	rjmp	.+2      	; 0x57e <type_set_process+0x60>
		uart1_rx_array_set_empty();
		return 1;
	}else if (strstr(uart1_rx_array1, bc95_response_error) != NULL)
	{
		
		return 0;
 57c:	80 e0       	ldi	r24, 0x00	; 0
	}
	uart1_rx_array_set_empty();
	return 0;
}
 57e:	27 96       	adiw	r28, 0x07	; 7
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <type_info_process>:
* 功    能：类型为info的数据处理
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
unsigned char type_info_process(unsigned char init_command_number){
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	6a 97       	sbiw	r28, 0x1a	; 26
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	18 2f       	mov	r17, r24
	unsigned char test[] = "\r\n460111176388046\r\n\r\nOK\r\n";
 5a8:	8a e1       	ldi	r24, 0x1A	; 26
 5aa:	e1 e2       	ldi	r30, 0x21	; 33
 5ac:	f3 e0       	ldi	r31, 0x03	; 3
 5ae:	de 01       	movw	r26, r28
 5b0:	11 96       	adiw	r26, 0x01	; 1
 5b2:	01 90       	ld	r0, Z+
 5b4:	0d 92       	st	X+, r0
 5b6:	8a 95       	dec	r24
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <type_info_process+0x22>
	//strcpy(query_data_flag.message, uart1_rx_array);
	strcpy(query_data_flag.message, test);
 5ba:	be 01       	movw	r22, r28
 5bc:	6f 5f       	subi	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	83 e9       	ldi	r24, 0x93	; 147
 5c2:	95 e0       	ldi	r25, 0x05	; 5
 5c4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <strcpy>
	uart1_rx_array_set_empty();
 5c8:	0e 94 4b 07 	call	0xe96	; 0xe96 <uart1_rx_array_set_empty>
	query_data_flag.message_length = strlen(query_data_flag.message);
 5cc:	e3 e9       	ldi	r30, 0x93	; 147
 5ce:	f5 e0       	ldi	r31, 0x05	; 5
 5d0:	01 90       	ld	r0, Z+
 5d2:	00 20       	and	r0, r0
 5d4:	e9 f7       	brne	.-6      	; 0x5d0 <type_info_process+0x40>
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	e3 59       	subi	r30, 0x93	; 147
 5da:	f5 40       	sbci	r31, 0x05	; 5
 5dc:	e0 93 92 06 	sts	0x0692, r30	; 0x800692 <query_data_flag+0xff>
	unsigned char cache_count = 0;
	/*--------------------------------------
					调试输出
    --------------------------------------*/
#ifdef	DEBUG
	uart0_send_string("bc95 info process is run ... \r\n");
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	93 e0       	ldi	r25, 0x03	; 3
 5e4:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
#endif
	
	if (strstr(query_data_flag.message, bc95_response_ok) != NULL)
 5e8:	60 ed       	ldi	r22, 0xD0	; 208
 5ea:	73 e0       	ldi	r23, 0x03	; 3
 5ec:	83 e9       	ldi	r24, 0x93	; 147
 5ee:	95 e0       	ldi	r25, 0x05	; 5
 5f0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 5f4:	89 2b       	or	r24, r25
 5f6:	d1 f1       	breq	.+116    	; 0x66c <type_info_process+0xdc>
	{
		//循环遍历信息
		for (unsigned int i = 0 ; i < query_data_flag.message_length ; i ++){
 5f8:	40 91 92 06 	lds	r20, 0x0692	; 0x800692 <query_data_flag+0xff>
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	41 15       	cp	r20, r1
 600:	51 05       	cpc	r21, r1
 602:	b1 f1       	breq	.+108    	; 0x670 <type_info_process+0xe0>
 604:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <query_data_flag+0x10d>
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
			if (query_data_flag.message[i] == '\r')
 60c:	fc 01       	movw	r30, r24
 60e:	ed 56       	subi	r30, 0x6D	; 109
 610:	fa 4f       	sbci	r31, 0xFA	; 250
 612:	20 81       	ld	r18, Z
 614:	2d 30       	cpi	r18, 0x0D	; 13
 616:	11 f5       	brne	.+68     	; 0x65c <type_info_process+0xcc>
			{
				//如果已经找到数据开头，则再次检测到”\r“为结束
				if (query_data_flag.info_offset_start != 0)		
 618:	77 23       	and	r23, r23
 61a:	a1 f0       	breq	.+40     	; 0x644 <type_info_process+0xb4>
 61c:	70 93 a0 06 	sts	0x06A0, r23	; 0x8006a0 <query_data_flag+0x10d>
				{
					query_data_flag.info_offset_stop = i;
 620:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <query_data_flag+0x10e>
					return init_command[init_command_number].callback_function();
 624:	81 2f       	mov	r24, r17
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	fc 01       	movw	r30, r24
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	e8 0f       	add	r30, r24
 630:	f9 1f       	adc	r31, r25
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	e0 50       	subi	r30, 0x00	; 0
 638:	ff 4f       	sbci	r31, 0xFF	; 255
 63a:	04 80       	ldd	r0, Z+4	; 0x04
 63c:	f5 81       	ldd	r31, Z+5	; 0x05
 63e:	e0 2d       	mov	r30, r0
 640:	09 95       	icall
 642:	17 c0       	rjmp	.+46     	; 0x672 <type_info_process+0xe2>
				}
				//如果检测到”\r“则直接看下一位是否为”\n“如果是则直接跳过/n到数据位
				if (query_data_flag.message[i+1] == '\n')		
 644:	9c 01       	movw	r18, r24
 646:	2f 5f       	subi	r18, 0xFF	; 255
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	f9 01       	movw	r30, r18
 64c:	ed 56       	subi	r30, 0x6D	; 109
 64e:	fa 4f       	sbci	r31, 0xFA	; 250
 650:	60 81       	ld	r22, Z
 652:	6a 30       	cpi	r22, 0x0A	; 10
 654:	19 f4       	brne	.+6      	; 0x65c <type_info_process+0xcc>
				{
					i++;
					//设置信息开始位置偏移量
					query_data_flag.info_offset_start = i+1;
 656:	71 e0       	ldi	r23, 0x01	; 1
 658:	72 0f       	add	r23, r18
					return init_command[init_command_number].callback_function();
				}
				//如果检测到”\r“则直接看下一位是否为”\n“如果是则直接跳过/n到数据位
				if (query_data_flag.message[i+1] == '\n')		
				{
					i++;
 65a:	c9 01       	movw	r24, r18
#endif
	
	if (strstr(query_data_flag.message, bc95_response_ok) != NULL)
	{
		//循环遍历信息
		for (unsigned int i = 0 ; i < query_data_flag.message_length ; i ++){
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	84 17       	cp	r24, r20
 660:	95 07       	cpc	r25, r21
 662:	a0 f2       	brcs	.-88     	; 0x60c <type_info_process+0x7c>
 664:	70 93 a0 06 	sts	0x06A0, r23	; 0x8006a0 <query_data_flag+0x10d>
	{
		return 0;
	}else{
		return 0;
	}
	return 0;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	03 c0       	rjmp	.+6      	; 0x672 <type_info_process+0xe2>
			}
		}
	}	//判断是否出错，
	else if (strstr(query_data_flag.message, bc95_response_error) != NULL)
	{
		return 0;
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	01 c0       	rjmp	.+2      	; 0x672 <type_info_process+0xe2>
	}else{
		return 0;
	}
	return 0;
 670:	80 e0       	ldi	r24, 0x00	; 0
}
 672:	6a 96       	adiw	r28, 0x1a	; 26
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	de bf       	out	0x3e, r29	; 62
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	cd bf       	out	0x3d, r28	; 61
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	08 95       	ret

00000686 <type_query_process>:
* 出口参数：无

* 返 回 值：unsigned char						1--->成功	0--->不成功
*-----------------------------------------------------------------------------*/

unsigned char type_query_process(unsigned char callback_function_number){
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	63 97       	sbiw	r28, 0x13	; 19
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	18 2f       	mov	r17, r24
	//测试数据
	//unsigned char uart1_rx_array1[] = "\r\n+NBAND:5\r\n\r\nOK\r\n";
	//unsigned char uart1_rx_array1[] = "\r\n+CSQ:12,99\r\n\r\nOK\r\n";
	//unsigned char uart1_rx_array1[] = "\r\n+CGSN:863703030636570\r\n\r\nOK\r\n";
	unsigned char uart1_rx_array1[] = "\r\n+CGATT:1\r\n\r\nOK\r\n";
 69e:	83 e1       	ldi	r24, 0x13	; 19
 6a0:	eb e3       	ldi	r30, 0x3B	; 59
 6a2:	f3 e0       	ldi	r31, 0x03	; 3
 6a4:	de 01       	movw	r26, r28
 6a6:	11 96       	adiw	r26, 0x01	; 1
 6a8:	01 90       	ld	r0, Z+
 6aa:	0d 92       	st	X+, r0
 6ac:	8a 95       	dec	r24
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <type_query_process+0x22>
	strcpy(query_data_flag.message, uart1_rx_array1);	//复制串口数据
 6b0:	be 01       	movw	r22, r28
 6b2:	6f 5f       	subi	r22, 0xFF	; 255
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	83 e9       	ldi	r24, 0x93	; 147
 6b8:	95 e0       	ldi	r25, 0x05	; 5
 6ba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <strcpy>
	uart1_rx_array_set_empty();							//清空串口数据用于接收
 6be:	0e 94 4b 07 	call	0xe96	; 0xe96 <uart1_rx_array_set_empty>
													
	query_data_flag.comma_offset_number = 0;									//初始化逗号记录，记录有多少个逗号，就有+1个数据
 6c2:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <query_data_flag+0x102>
	
	if (strstr(query_data_flag.message, bc95_response_ok)!= NULL && strstr(query_data_flag.message, "+") != NULL && strstr(query_data_flag.message, ":") != NULL)
 6c6:	60 ed       	ldi	r22, 0xD0	; 208
 6c8:	73 e0       	ldi	r23, 0x03	; 3
 6ca:	83 e9       	ldi	r24, 0x93	; 147
 6cc:	95 e0       	ldi	r25, 0x05	; 5
 6ce:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strstr>
 6d2:	89 2b       	or	r24, r25
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <type_query_process+0x52>
 6d6:	51 c0       	rjmp	.+162    	; 0x77a <type_query_process+0xf4>
 6d8:	6b e2       	ldi	r22, 0x2B	; 43
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	83 e9       	ldi	r24, 0x93	; 147
 6de:	95 e0       	ldi	r25, 0x05	; 5
 6e0:	0e 94 b4 07 	call	0xf68	; 0xf68 <strchr>
 6e4:	89 2b       	or	r24, r25
 6e6:	09 f4       	brne	.+2      	; 0x6ea <type_query_process+0x64>
 6e8:	4a c0       	rjmp	.+148    	; 0x77e <type_query_process+0xf8>
 6ea:	6a e3       	ldi	r22, 0x3A	; 58
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	83 e9       	ldi	r24, 0x93	; 147
 6f0:	95 e0       	ldi	r25, 0x05	; 5
 6f2:	0e 94 b4 07 	call	0xf68	; 0xf68 <strchr>
 6f6:	89 2b       	or	r24, r25
 6f8:	09 f4       	brne	.+2      	; 0x6fc <type_query_process+0x76>
 6fa:	43 c0       	rjmp	.+134    	; 0x782 <type_query_process+0xfc>
	{
		query_data_flag.message_length = strlen(query_data_flag.message);				//如果接收完成，则计算字符串长度
 6fc:	e3 e9       	ldi	r30, 0x93	; 147
 6fe:	f5 e0       	ldi	r31, 0x05	; 5
 700:	01 90       	ld	r0, Z+
 702:	00 20       	and	r0, r0
 704:	e9 f7       	brne	.-6      	; 0x700 <type_query_process+0x7a>
 706:	31 97       	sbiw	r30, 0x01	; 1
 708:	e3 59       	subi	r30, 0x93	; 147
 70a:	f5 40       	sbci	r31, 0x05	; 5
 70c:	2e 2f       	mov	r18, r30
 70e:	e0 93 92 06 	sts	0x0692, r30	; 0x800692 <query_data_flag+0xff>
		for (unsigned char i = 0 ; i < query_data_flag.message_length ; i++)	//循环处理字符串，将标志与信息记录在query_data_flag结构体里
 712:	ee 23       	and	r30, r30
 714:	11 f1       	breq	.+68     	; 0x75a <type_query_process+0xd4>
 716:	40 91 93 06 	lds	r20, 0x0693	; 0x800693 <query_data_flag+0x100>
 71a:	50 91 94 06 	lds	r21, 0x0694	; 0x800694 <query_data_flag+0x101>
 71e:	e3 e9       	ldi	r30, 0x93	; 147
 720:	f5 e0       	ldi	r31, 0x05	; 5
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	80 e0       	ldi	r24, 0x00	; 0
		{
			if (query_data_flag.message[i] == '+')								//判断如果是”+“则记录”+“位置
 726:	91 91       	ld	r25, Z+
 728:	9b 32       	cpi	r25, 0x2B	; 43
 72a:	59 f0       	breq	.+22     	; 0x742 <type_query_process+0xbc>
			{
				query_data_flag.add_offset = i;
			}else if (query_data_flag.message[i] == ':')						//判断如果是”：“则记录”：“位置
 72c:	9a 33       	cpi	r25, 0x3A	; 58
 72e:	59 f0       	breq	.+22     	; 0x746 <type_query_process+0xc0>
			{
				query_data_flag.colon_offset = i;
			}else if (query_data_flag.message[i] == ',')						//判断如果是”，“则记录”，“位置，并存储在数组内
 730:	9c 32       	cpi	r25, 0x2C	; 44
 732:	51 f4       	brne	.+20     	; 0x748 <type_query_process+0xc2>
			{
				query_data_flag.comma_offset[query_data_flag.comma_offset_number] = i;
 734:	a3 2f       	mov	r26, r19
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	aa 56       	subi	r26, 0x6A	; 106
 73a:	b9 4f       	sbci	r27, 0xF9	; 249
 73c:	8c 93       	st	X, r24
				query_data_flag.comma_offset_number++;
 73e:	3f 5f       	subi	r19, 0xFF	; 255
 740:	03 c0       	rjmp	.+6      	; 0x748 <type_query_process+0xc2>
		query_data_flag.message_length = strlen(query_data_flag.message);				//如果接收完成，则计算字符串长度
		for (unsigned char i = 0 ; i < query_data_flag.message_length ; i++)	//循环处理字符串，将标志与信息记录在query_data_flag结构体里
		{
			if (query_data_flag.message[i] == '+')								//判断如果是”+“则记录”+“位置
			{
				query_data_flag.add_offset = i;
 742:	48 2f       	mov	r20, r24
 744:	01 c0       	rjmp	.+2      	; 0x748 <type_query_process+0xc2>
			}else if (query_data_flag.message[i] == ':')						//判断如果是”：“则记录”：“位置
			{
				query_data_flag.colon_offset = i;
 746:	58 2f       	mov	r21, r24
	query_data_flag.comma_offset_number = 0;									//初始化逗号记录，记录有多少个逗号，就有+1个数据
	
	if (strstr(query_data_flag.message, bc95_response_ok)!= NULL && strstr(query_data_flag.message, "+") != NULL && strstr(query_data_flag.message, ":") != NULL)
	{
		query_data_flag.message_length = strlen(query_data_flag.message);				//如果接收完成，则计算字符串长度
		for (unsigned char i = 0 ; i < query_data_flag.message_length ; i++)	//循环处理字符串，将标志与信息记录在query_data_flag结构体里
 748:	8f 5f       	subi	r24, 0xFF	; 255
 74a:	28 13       	cpse	r18, r24
 74c:	ec cf       	rjmp	.-40     	; 0x726 <type_query_process+0xa0>
 74e:	40 93 93 06 	sts	0x0693, r20	; 0x800693 <query_data_flag+0x100>
 752:	50 93 94 06 	sts	0x0694, r21	; 0x800694 <query_data_flag+0x101>
 756:	30 93 95 06 	sts	0x0695, r19	; 0x800695 <query_data_flag+0x102>
			{
				query_data_flag.comma_offset[query_data_flag.comma_offset_number] = i;
				query_data_flag.comma_offset_number++;
			}
		}		
		return init_command[callback_function_number].callback_function();		//调用回调函数，并返回处理结果
 75a:	81 2f       	mov	r24, r17
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc 01       	movw	r30, r24
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	e8 0f       	add	r30, r24
 766:	f9 1f       	adc	r31, r25
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	e0 50       	subi	r30, 0x00	; 0
 76e:	ff 4f       	sbci	r31, 0xFF	; 255
 770:	04 80       	ldd	r0, Z+4	; 0x04
 772:	f5 81       	ldd	r31, Z+5	; 0x05
 774:	e0 2d       	mov	r30, r0
 776:	09 95       	icall
 778:	05 c0       	rjmp	.+10     	; 0x784 <type_query_process+0xfe>
	}	//判断是否出错，
	else if (strstr(query_data_flag.message, bc95_response_error) != NULL)				//如果检测到错误标志则返回0
	{
		return 0;
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	03 c0       	rjmp	.+6      	; 0x784 <type_query_process+0xfe>
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	01 c0       	rjmp	.+2      	; 0x784 <type_query_process+0xfe>
 782:	80 e0       	ldi	r24, 0x00	; 0
	}else{
		return 0;
	}
	return 0;
}
 784:	63 96       	adiw	r28, 0x13	; 19
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	08 95       	ret

00000798 <init_bc95>:
			在lcd上
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
 798:	af 92       	push	r10
 79a:	bf 92       	push	r11
 79c:	cf 92       	push	r12
 79e:	df 92       	push	r13
 7a0:	ef 92       	push	r14
 7a2:	ff 92       	push	r15
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	0f 2e       	mov	r0, r31
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ef 2e       	mov	r14, r31
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	ff 2e       	mov	r15, r31
 7b6:	f0 2d       	mov	r31, r0
    for (unsigned char i = 0; i < 10; i++)
 7b8:	10 e0       	ldi	r17, 0x00	; 0
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
 7ba:	0f 2e       	mov	r0, r31
 7bc:	f3 e9       	ldi	r31, 0x93	; 147
 7be:	af 2e       	mov	r10, r31
 7c0:	f5 e0       	ldi	r31, 0x05	; 5
 7c2:	bf 2e       	mov	r11, r31
 7c4:	f0 2d       	mov	r31, r0
 7c6:	0f 2e       	mov	r0, r31
 7c8:	ff e0       	ldi	r31, 0x0F	; 15
 7ca:	cf 2e       	mov	r12, r31
 7cc:	dd 24       	eor	r13, r13
 7ce:	d3 94       	inc	r13
 7d0:	f0 2d       	mov	r31, r0
 7d2:	e7 01       	movw	r28, r14
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
    for (unsigned char i = 0; i < 10; i++)
    {
		bc95_send_string(init_command[i].command);		
 7d4:	8a 81       	ldd	r24, Y+2	; 0x02
 7d6:	9b 81       	ldd	r25, Y+3	; 0x03
 7d8:	0e 94 40 07 	call	0xe80	; 0xe80 <bc95_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7dc:	2f ef       	ldi	r18, 0xFF	; 255
 7de:	8f eb       	ldi	r24, 0xBF	; 191
 7e0:	91 e2       	ldi	r25, 0x21	; 33
 7e2:	21 50       	subi	r18, 0x01	; 1
 7e4:	80 40       	sbci	r24, 0x00	; 0
 7e6:	90 40       	sbci	r25, 0x00	; 0
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <init_bc95+0x4a>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <init_bc95+0x54>
 7ec:	00 00       	nop
        unsigned char	resend_count = RESEND_NUMBER;       //初始化循环检查次数
		_delay_ms(BC95_COMMAND_DELAY);

        //根据发送的数据类型处理bc95返回的数据
        switch (init_command[i].type){
 7ee:	88 81       	ld	r24, Y
 7f0:	82 30       	cpi	r24, 0x02	; 2
 7f2:	29 f1       	breq	.+74     	; 0x83e <init_bc95+0xa6>
 7f4:	83 30       	cpi	r24, 0x03	; 3
 7f6:	09 f4       	brne	.+2      	; 0x7fa <init_bc95+0x62>
 7f8:	52 c0       	rjmp	.+164    	; 0x89e <init_bc95+0x106>
 7fa:	81 30       	cpi	r24, 0x01	; 1
 7fc:	09 f0       	breq	.+2      	; 0x800 <init_bc95+0x68>
 7fe:	73 c0       	rjmp	.+230    	; 0x8e6 <init_bc95+0x14e>
            case SET:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_set_process() != 1){
 800:	0e 94 8f 02 	call	0x51e	; 0x51e <type_set_process>
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	b1 f4       	brne	.+44     	; 0x834 <init_bc95+0x9c>
 808:	6e c0       	rjmp	.+220    	; 0x8e6 <init_bc95+0x14e>
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
						bc95_send_string(init_command[i].command);
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	9b 81       	ldd	r25, Y+3	; 0x03
 80e:	0e 94 40 07 	call	0xe80	; 0xe80 <bc95_send_string>
 812:	ff ef       	ldi	r31, 0xFF	; 255
 814:	2f eb       	ldi	r18, 0xBF	; 191
 816:	81 e2       	ldi	r24, 0x21	; 33
 818:	f1 50       	subi	r31, 0x01	; 1
 81a:	20 40       	sbci	r18, 0x00	; 0
 81c:	80 40       	sbci	r24, 0x00	; 0
 81e:	e1 f7       	brne	.-8      	; 0x818 <init_bc95+0x80>
 820:	00 c0       	rjmp	.+0      	; 0x822 <init_bc95+0x8a>
 822:	00 00       	nop

						_delay_ms(BC95_COMMAND_DELAY);
						//如果判断成功则退出循环发送下一条指令
                        if (type_set_process() == 1){
 824:	0e 94 8f 02 	call	0x51e	; 0x51e <type_set_process>
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	09 f4       	brne	.+2      	; 0x82e <init_bc95+0x96>
 82c:	5c c0       	rjmp	.+184    	; 0x8e6 <init_bc95+0x14e>
 82e:	01 50       	subi	r16, 0x01	; 1
        switch (init_command[i].type){
            case SET:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_set_process() != 1){
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
 830:	11 f4       	brne	.+4      	; 0x836 <init_bc95+0x9e>
 832:	59 c0       	rjmp	.+178    	; 0x8e6 <init_bc95+0x14e>
 834:	0a e0       	ldi	r16, 0x0A	; 10
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	39 f3       	breq	.-50     	; 0x80a <init_bc95+0x72>
 83c:	54 c0       	rjmp	.+168    	; 0x8e6 <init_bc95+0x14e>

                break;

            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
 83e:	81 2f       	mov	r24, r17
 840:	0e 94 43 03 	call	0x686	; 0x686 <type_query_process>
 844:	81 30       	cpi	r24, 0x01	; 1
 846:	29 f1       	breq	.+74     	; 0x892 <init_bc95+0xfa>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
 848:	f5 01       	movw	r30, r10
 84a:	c6 01       	movw	r24, r12
 84c:	11 92       	st	Z+, r1
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	e9 f7       	brne	.-6      	; 0x84c <init_bc95+0xb4>
            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
					set_bc95_query_data_flag_empty();			//清空数据标志结构体准备下一次接收
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	e9 f4       	brne	.+58     	; 0x892 <init_bc95+0xfa>
 858:	0a e0       	ldi	r16, 0x0A	; 10
						bc95_send_string(init_command[i].command);
 85a:	8a 81       	ldd	r24, Y+2	; 0x02
 85c:	9b 81       	ldd	r25, Y+3	; 0x03
 85e:	0e 94 40 07 	call	0xe80	; 0xe80 <bc95_send_string>
 862:	9f ef       	ldi	r25, 0xFF	; 255
 864:	ef eb       	ldi	r30, 0xBF	; 191
 866:	f1 e2       	ldi	r31, 0x21	; 33
 868:	91 50       	subi	r25, 0x01	; 1
 86a:	e0 40       	sbci	r30, 0x00	; 0
 86c:	f0 40       	sbci	r31, 0x00	; 0
 86e:	e1 f7       	brne	.-8      	; 0x868 <init_bc95+0xd0>
 870:	00 c0       	rjmp	.+0      	; 0x872 <init_bc95+0xda>
 872:	00 00       	nop

						_delay_ms(BC95_COMMAND_DELAY);
                        if (type_query_process(i) == 1){
 874:	81 2f       	mov	r24, r17
 876:	0e 94 43 03 	call	0x686	; 0x686 <type_query_process>
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	51 f0       	breq	.+20     	; 0x892 <init_bc95+0xfa>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
 87e:	f5 01       	movw	r30, r10
 880:	c6 01       	movw	r24, r12
 882:	11 92       	st	Z+, r1
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	e9 f7       	brne	.-6      	; 0x882 <init_bc95+0xea>
 888:	01 50       	subi	r16, 0x01	; 1
            case QUERY:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_query_process(i) != 1){
					set_bc95_query_data_flag_empty();			//清空数据标志结构体准备下一次接收
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
 88a:	19 f0       	breq	.+6      	; 0x892 <init_bc95+0xfa>
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	21 f3       	breq	.-56     	; 0x85a <init_bc95+0xc2>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
 892:	f5 01       	movw	r30, r10
 894:	c6 01       	movw	r24, r12
 896:	11 92       	st	Z+, r1
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	e9 f7       	brne	.-6      	; 0x896 <init_bc95+0xfe>
 89c:	24 c0       	rjmp	.+72     	; 0x8e6 <init_bc95+0x14e>
				set_bc95_query_data_flag_empty();				//清空数据标志结构体准备下一次接收
                break;

            case INFO:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_info_process(i) != 1){
 89e:	81 2f       	mov	r24, r17
 8a0:	0e 94 c8 02 	call	0x590	; 0x590 <type_info_process>
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	b1 f4       	brne	.+44     	; 0x8d4 <init_bc95+0x13c>
 8a8:	19 c0       	rjmp	.+50     	; 0x8dc <init_bc95+0x144>
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
						bc95_send_string(init_command[i].command);
 8aa:	8a 81       	ldd	r24, Y+2	; 0x02
 8ac:	9b 81       	ldd	r25, Y+3	; 0x03
 8ae:	0e 94 40 07 	call	0xe80	; 0xe80 <bc95_send_string>
 8b2:	9f ef       	ldi	r25, 0xFF	; 255
 8b4:	ef eb       	ldi	r30, 0xBF	; 191
 8b6:	f1 e2       	ldi	r31, 0x21	; 33
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	e0 40       	sbci	r30, 0x00	; 0
 8bc:	f0 40       	sbci	r31, 0x00	; 0
 8be:	e1 f7       	brne	.-8      	; 0x8b8 <init_bc95+0x120>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <init_bc95+0x12a>
 8c2:	00 00       	nop
						_delay_ms(BC95_COMMAND_DELAY);			//延时一段时间再发送
                        if (type_info_process(i) == 1){
 8c4:	81 2f       	mov	r24, r17
 8c6:	0e 94 c8 02 	call	0x590	; 0x590 <type_info_process>
 8ca:	81 30       	cpi	r24, 0x01	; 1
 8cc:	39 f0       	breq	.+14     	; 0x8dc <init_bc95+0x144>
 8ce:	01 50       	subi	r16, 0x01	; 1

            case INFO:
                //如果检测执行不成功则判断是否需要重新发送
                if (type_info_process(i) != 1){
					//如果不成功且命令需要循环发送就循环发送最大循环次数并判断是否成功
                    while(((resend_count--) > 0) && (init_command[i].loop_config == LOOP)){
 8d0:	11 f4       	brne	.+4      	; 0x8d6 <init_bc95+0x13e>
 8d2:	04 c0       	rjmp	.+8      	; 0x8dc <init_bc95+0x144>
 8d4:	0a e0       	ldi	r16, 0x0A	; 10
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	39 f3       	breq	.-50     	; 0x8aa <init_bc95+0x112>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void set_bc95_query_data_flag_empty(){
	memset(&query_data_flag , 0, sizeof(struct bc95_query_data_flag));
 8dc:	f5 01       	movw	r30, r10
 8de:	c6 01       	movw	r24, r12
 8e0:	11 92       	st	Z+, r1
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	e9 f7       	brne	.-6      	; 0x8e0 <init_bc95+0x148>
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void init_bc95(){
    for (unsigned char i = 0; i < 10; i++)
 8e6:	1f 5f       	subi	r17, 0xFF	; 255
 8e8:	96 e0       	ldi	r25, 0x06	; 6
 8ea:	e9 0e       	add	r14, r25
 8ec:	f1 1c       	adc	r15, r1
 8ee:	1a 30       	cpi	r17, 0x0A	; 10
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <init_bc95+0x15c>
 8f2:	6f cf       	rjmp	.-290    	; 0x7d2 <init_bc95+0x3a>
                break;
            default:
                break;
        }
    }
}
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	bf 90       	pop	r11
 906:	af 90       	pop	r10
 908:	08 95       	ret

0000090a <tm1726_start>:
*-----------------------------------------------------------------------------*/
void lcd_update_flow_display(unsigned long int number){
	unsigned char	cache[5] = {0};
	make_flow_number(number, cache);
	write_string_address_tm1726(5, 5, cache);
}
 90a:	d8 9a       	sbi	0x1b, 0	; 27
 90c:	d9 9a       	sbi	0x1b, 1	; 27
 90e:	85 e2       	ldi	r24, 0x25	; 37
 910:	8a 95       	dec	r24
 912:	f1 f7       	brne	.-4      	; 0x910 <tm1726_start+0x6>
 914:	d8 98       	cbi	0x1b, 0	; 27
 916:	85 e2       	ldi	r24, 0x25	; 37
 918:	8a 95       	dec	r24
 91a:	f1 f7       	brne	.-4      	; 0x918 <tm1726_start+0xe>
 91c:	d9 98       	cbi	0x1b, 1	; 27
 91e:	85 e2       	ldi	r24, 0x25	; 37
 920:	8a 95       	dec	r24
 922:	f1 f7       	brne	.-4      	; 0x920 <tm1726_start+0x16>
 924:	08 95       	ret

00000926 <tm1726_stop>:
 926:	d8 98       	cbi	0x1b, 0	; 27
 928:	d9 9a       	sbi	0x1b, 1	; 27
 92a:	85 e2       	ldi	r24, 0x25	; 37
 92c:	8a 95       	dec	r24
 92e:	f1 f7       	brne	.-4      	; 0x92c <tm1726_stop+0x6>
 930:	d8 9a       	sbi	0x1b, 0	; 27
 932:	85 e2       	ldi	r24, 0x25	; 37
 934:	8a 95       	dec	r24
 936:	f1 f7       	brne	.-4      	; 0x934 <tm1726_stop+0xe>
 938:	d9 98       	cbi	0x1b, 1	; 27
 93a:	85 e2       	ldi	r24, 0x25	; 37
 93c:	8a 95       	dec	r24
 93e:	f1 f7       	brne	.-4      	; 0x93c <tm1726_stop+0x16>
 940:	08 95       	ret

00000942 <write_byte_tm1726>:
 942:	d8 98       	cbi	0x1b, 0	; 27
 944:	d9 98       	cbi	0x1b, 1	; 27
 946:	24 e0       	ldi	r18, 0x04	; 4
 948:	2a 95       	dec	r18
 94a:	f1 f7       	brne	.-4      	; 0x948 <write_byte_tm1726+0x6>
 94c:	98 e0       	ldi	r25, 0x08	; 8
 94e:	d9 98       	cbi	0x1b, 1	; 27
 950:	80 ff       	sbrs	r24, 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <write_byte_tm1726+0x16>
 954:	d8 9a       	sbi	0x1b, 0	; 27
 956:	01 c0       	rjmp	.+2      	; 0x95a <write_byte_tm1726+0x18>
 958:	d8 98       	cbi	0x1b, 0	; 27
 95a:	24 e0       	ldi	r18, 0x04	; 4
 95c:	2a 95       	dec	r18
 95e:	f1 f7       	brne	.-4      	; 0x95c <write_byte_tm1726+0x1a>
 960:	d9 9a       	sbi	0x1b, 1	; 27
 962:	86 95       	lsr	r24
 964:	91 50       	subi	r25, 0x01	; 1
 966:	99 f7       	brne	.-26     	; 0x94e <write_byte_tm1726+0xc>
 968:	d9 98       	cbi	0x1b, 1	; 27
 96a:	d8 98       	cbi	0x1b, 0	; 27
 96c:	08 95       	ret

0000096e <write_all_ram_tm1726>:
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	d8 2f       	mov	r29, r24
 974:	d8 9a       	sbi	0x1b, 0	; 27
 976:	d9 9a       	sbi	0x1b, 1	; 27
 978:	0e 94 85 04 	call	0x90a	; 0x90a <tm1726_start>
 97c:	84 e0       	ldi	r24, 0x04	; 4
 97e:	8a 95       	dec	r24
 980:	f1 f7       	brne	.-4      	; 0x97e <write_all_ram_tm1726+0x10>
 982:	80 ec       	ldi	r24, 0xC0	; 192
 984:	0e 94 a1 04 	call	0x942	; 0x942 <write_byte_tm1726>
 988:	c2 e1       	ldi	r28, 0x12	; 18
 98a:	d8 9a       	sbi	0x1b, 0	; 27
 98c:	d9 9a       	sbi	0x1b, 1	; 27
 98e:	dd 23       	and	r29, r29
 990:	21 f0       	breq	.+8      	; 0x99a <write_all_ram_tm1726+0x2c>
 992:	8f ef       	ldi	r24, 0xFF	; 255
 994:	0e 94 a1 04 	call	0x942	; 0x942 <write_byte_tm1726>
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <write_all_ram_tm1726+0x32>
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	0e 94 a1 04 	call	0x942	; 0x942 <write_byte_tm1726>
 9a0:	c1 50       	subi	r28, 0x01	; 1
 9a2:	99 f7       	brne	.-26     	; 0x98a <write_all_ram_tm1726+0x1c>
 9a4:	0e 94 93 04 	call	0x926	; 0x926 <tm1726_stop>
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	08 95       	ret

000009ae <init_tm1726>:
 9ae:	d8 9a       	sbi	0x1b, 0	; 27
 9b0:	d9 9a       	sbi	0x1b, 1	; 27
 9b2:	0e 94 85 04 	call	0x90a	; 0x90a <tm1726_start>
 9b6:	84 e0       	ldi	r24, 0x04	; 4
 9b8:	8a 95       	dec	r24
 9ba:	f1 f7       	brne	.-4      	; 0x9b8 <init_tm1726+0xa>
 9bc:	87 e3       	ldi	r24, 0x37	; 55
 9be:	0e 94 a1 04 	call	0x942	; 0x942 <write_byte_tm1726>
 9c2:	0e 94 93 04 	call	0x926	; 0x926 <tm1726_stop>
 9c6:	08 95       	ret

000009c8 <write_byte_address_tm1726>:
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	d8 2f       	mov	r29, r24
 9ce:	c6 2f       	mov	r28, r22
 9d0:	d8 9a       	sbi	0x1b, 0	; 27
 9d2:	d9 9a       	sbi	0x1b, 1	; 27
 9d4:	0e 94 85 04 	call	0x90a	; 0x90a <tm1726_start>
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	9b e6       	ldi	r25, 0x6B	; 107
 9dc:	01 97       	sbiw	r24, 0x01	; 1
 9de:	f1 f7       	brne	.-4      	; 0x9dc <write_byte_address_tm1726+0x14>
 9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <write_byte_address_tm1726+0x1a>
 9e2:	00 00       	nop
 9e4:	80 ec       	ldi	r24, 0xC0	; 192
 9e6:	8d 0f       	add	r24, r29
 9e8:	0e 94 a1 04 	call	0x942	; 0x942 <write_byte_tm1726>
 9ec:	d8 9a       	sbi	0x1b, 0	; 27
 9ee:	d9 9a       	sbi	0x1b, 1	; 27
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	9b e6       	ldi	r25, 0x6B	; 107
 9f4:	01 97       	sbiw	r24, 0x01	; 1
 9f6:	f1 f7       	brne	.-4      	; 0x9f4 <write_byte_address_tm1726+0x2c>
 9f8:	00 c0       	rjmp	.+0      	; 0x9fa <write_byte_address_tm1726+0x32>
 9fa:	00 00       	nop
 9fc:	8c 2f       	mov	r24, r28
 9fe:	0e 94 a1 04 	call	0x942	; 0x942 <write_byte_tm1726>
 a02:	0e 94 93 04 	call	0x926	; 0x926 <tm1726_stop>
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <write_string_address_tm1726>:
 a0c:	ef 92       	push	r14
 a0e:	ff 92       	push	r15
 a10:	1f 93       	push	r17
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	9f ef       	ldi	r25, 0xFF	; 255
 a18:	96 0f       	add	r25, r22
 a1a:	66 23       	and	r22, r22
 a1c:	89 f0       	breq	.+34     	; 0xa40 <write_string_address_tm1726+0x34>
 a1e:	ea 01       	movw	r28, r20
 a20:	e9 2e       	mov	r14, r25
 a22:	f1 2c       	mov	r15, r1
 a24:	9f ef       	ldi	r25, 0xFF	; 255
 a26:	e9 1a       	sub	r14, r25
 a28:	f9 0a       	sbc	r15, r25
 a2a:	e4 0e       	add	r14, r20
 a2c:	f5 1e       	adc	r15, r21
 a2e:	69 91       	ld	r22, Y+
 a30:	11 e0       	ldi	r17, 0x01	; 1
 a32:	18 0f       	add	r17, r24
 a34:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <write_byte_address_tm1726>
 a38:	81 2f       	mov	r24, r17
 a3a:	ce 15       	cp	r28, r14
 a3c:	df 05       	cpc	r29, r15
 a3e:	b9 f7       	brne	.-18     	; 0xa2e <write_string_address_tm1726+0x22>
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	ff 90       	pop	r15
 a48:	ef 90       	pop	r14
 a4a:	08 95       	ret

00000a4c <init_lcd>:
 a4c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <init_tm1726>
 a50:	2f ef       	ldi	r18, 0xFF	; 255
 a52:	8f eb       	ldi	r24, 0xBF	; 191
 a54:	96 e0       	ldi	r25, 0x06	; 6
 a56:	21 50       	subi	r18, 0x01	; 1
 a58:	80 40       	sbci	r24, 0x00	; 0
 a5a:	90 40       	sbci	r25, 0x00	; 0
 a5c:	e1 f7       	brne	.-8      	; 0xa56 <init_lcd+0xa>
 a5e:	00 c0       	rjmp	.+0      	; 0xa60 <init_lcd+0x14>
 a60:	00 00       	nop
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	0e 94 b7 04 	call	0x96e	; 0x96e <write_all_ram_tm1726>
 a68:	2f ef       	ldi	r18, 0xFF	; 255
 a6a:	8f eb       	ldi	r24, 0xBF	; 191
 a6c:	91 e2       	ldi	r25, 0x21	; 33
 a6e:	21 50       	subi	r18, 0x01	; 1
 a70:	80 40       	sbci	r24, 0x00	; 0
 a72:	90 40       	sbci	r25, 0x00	; 0
 a74:	e1 f7       	brne	.-8      	; 0xa6e <init_lcd+0x22>
 a76:	00 c0       	rjmp	.+0      	; 0xa78 <init_lcd+0x2c>
 a78:	00 00       	nop
 a7a:	80 e0       	ldi	r24, 0x00	; 0
 a7c:	0e 94 b7 04 	call	0x96e	; 0x96e <write_all_ram_tm1726>
 a80:	08 95       	ret

00000a82 <make_raw_ppm_number>:

* 出口参数：	unsigned char	*number_array		用于存储转换后可填充RAM的字符数组

* 返 回 值：无
*-----------------------------------------------------------------------------*/
void make_raw_ppm_number(unsigned int number, unsigned char *number_array){
 a82:	ef 92       	push	r14
 a84:	ff 92       	push	r15
 a86:	1f 93       	push	r17
 a88:	cf 93       	push	r28
 a8a:	df 93       	push	r29
 a8c:	7c 01       	movw	r14, r24
 a8e:	eb 01       	movw	r28, r22
	
	number_array[0] =SMG[ (number%10) ];
 a90:	9c 01       	movw	r18, r24
 a92:	ad ec       	ldi	r26, 0xCD	; 205
 a94:	bc ec       	ldi	r27, 0xCC	; 204
 a96:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 a9a:	ac 01       	movw	r20, r24
 a9c:	56 95       	lsr	r21
 a9e:	47 95       	ror	r20
 aa0:	56 95       	lsr	r21
 aa2:	47 95       	ror	r20
 aa4:	56 95       	lsr	r21
 aa6:	47 95       	ror	r20
 aa8:	9a 01       	movw	r18, r20
 aaa:	22 0f       	add	r18, r18
 aac:	33 1f       	adc	r19, r19
 aae:	ca 01       	movw	r24, r20
 ab0:	88 0f       	add	r24, r24
 ab2:	99 1f       	adc	r25, r25
 ab4:	88 0f       	add	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	82 0f       	add	r24, r18
 abe:	93 1f       	adc	r25, r19
 ac0:	f7 01       	movw	r30, r14
 ac2:	e8 1b       	sub	r30, r24
 ac4:	f9 0b       	sbc	r31, r25
 ac6:	ec 54       	subi	r30, 0x4C	; 76
 ac8:	fe 4f       	sbci	r31, 0xFE	; 254
 aca:	10 81       	ld	r17, Z
 acc:	18 83       	st	Y, r17
	number_array[1] =SMG[ ((number/10)%10) ];
 ace:	9a 01       	movw	r18, r20
 ad0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	96 95       	lsr	r25
 ada:	87 95       	ror	r24
 adc:	96 95       	lsr	r25
 ade:	87 95       	ror	r24
 ae0:	9c 01       	movw	r18, r24
 ae2:	22 0f       	add	r18, r18
 ae4:	33 1f       	adc	r19, r19
 ae6:	88 0f       	add	r24, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	88 0f       	add	r24, r24
 aec:	99 1f       	adc	r25, r25
 aee:	88 0f       	add	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	82 0f       	add	r24, r18
 af4:	93 1f       	adc	r25, r19
 af6:	48 1b       	sub	r20, r24
 af8:	59 0b       	sbc	r21, r25
 afa:	fa 01       	movw	r30, r20
 afc:	ec 54       	subi	r30, 0x4C	; 76
 afe:	fe 4f       	sbci	r31, 0xFE	; 254
 b00:	80 81       	ld	r24, Z
 b02:	89 83       	std	Y+1, r24	; 0x01
	number_array[2] =SMG[ ((number/100)%10) ];
 b04:	97 01       	movw	r18, r14
 b06:	36 95       	lsr	r19
 b08:	27 95       	ror	r18
 b0a:	36 95       	lsr	r19
 b0c:	27 95       	ror	r18
 b0e:	ab e7       	ldi	r26, 0x7B	; 123
 b10:	b4 e1       	ldi	r27, 0x14	; 20
 b12:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 b16:	ac 01       	movw	r20, r24
 b18:	56 95       	lsr	r21
 b1a:	47 95       	ror	r20
 b1c:	9a 01       	movw	r18, r20
 b1e:	ad ec       	ldi	r26, 0xCD	; 205
 b20:	bc ec       	ldi	r27, 0xCC	; 204
 b22:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 b26:	96 95       	lsr	r25
 b28:	87 95       	ror	r24
 b2a:	96 95       	lsr	r25
 b2c:	87 95       	ror	r24
 b2e:	96 95       	lsr	r25
 b30:	87 95       	ror	r24
 b32:	9c 01       	movw	r18, r24
 b34:	22 0f       	add	r18, r18
 b36:	33 1f       	adc	r19, r19
 b38:	88 0f       	add	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	88 0f       	add	r24, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	88 0f       	add	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	82 0f       	add	r24, r18
 b46:	93 1f       	adc	r25, r19
 b48:	48 1b       	sub	r20, r24
 b4a:	59 0b       	sbc	r21, r25
 b4c:	fa 01       	movw	r30, r20
 b4e:	ec 54       	subi	r30, 0x4C	; 76
 b50:	fe 4f       	sbci	r31, 0xFE	; 254
 b52:	80 81       	ld	r24, Z
 b54:	8a 83       	std	Y+2, r24	; 0x02
	number_array[3] =SMG[ ((number/1000)%10) ] | RAW_WATER_ICON;
 b56:	97 01       	movw	r18, r14
 b58:	36 95       	lsr	r19
 b5a:	27 95       	ror	r18
 b5c:	36 95       	lsr	r19
 b5e:	27 95       	ror	r18
 b60:	36 95       	lsr	r19
 b62:	27 95       	ror	r18
 b64:	a5 ec       	ldi	r26, 0xC5	; 197
 b66:	b0 e2       	ldi	r27, 0x20	; 32
 b68:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 b6c:	ac 01       	movw	r20, r24
 b6e:	52 95       	swap	r21
 b70:	42 95       	swap	r20
 b72:	4f 70       	andi	r20, 0x0F	; 15
 b74:	45 27       	eor	r20, r21
 b76:	5f 70       	andi	r21, 0x0F	; 15
 b78:	45 27       	eor	r20, r21
 b7a:	9a 01       	movw	r18, r20
 b7c:	ad ec       	ldi	r26, 0xCD	; 205
 b7e:	bc ec       	ldi	r27, 0xCC	; 204
 b80:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 b84:	96 95       	lsr	r25
 b86:	87 95       	ror	r24
 b88:	96 95       	lsr	r25
 b8a:	87 95       	ror	r24
 b8c:	96 95       	lsr	r25
 b8e:	87 95       	ror	r24
 b90:	9c 01       	movw	r18, r24
 b92:	22 0f       	add	r18, r18
 b94:	33 1f       	adc	r19, r19
 b96:	88 0f       	add	r24, r24
 b98:	99 1f       	adc	r25, r25
 b9a:	88 0f       	add	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	88 0f       	add	r24, r24
 ba0:	99 1f       	adc	r25, r25
 ba2:	82 0f       	add	r24, r18
 ba4:	93 1f       	adc	r25, r19
 ba6:	48 1b       	sub	r20, r24
 ba8:	59 0b       	sbc	r21, r25
 baa:	fa 01       	movw	r30, r20
 bac:	ec 54       	subi	r30, 0x4C	; 76
 bae:	fe 4f       	sbci	r31, 0xFE	; 254
 bb0:	80 81       	ld	r24, Z
 bb2:	80 61       	ori	r24, 0x10	; 16
 bb4:	8b 83       	std	Y+3, r24	; 0x03
	if (device_status_lcd.no_water == YES)
 bb6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <device_status_lcd>
 bba:	81 30       	cpi	r24, 0x01	; 1
 bbc:	19 f4       	brne	.+6      	; 0xbc4 <make_raw_ppm_number+0x142>
	{
		number_array[0] |= NO_WATER_ICON;
 bbe:	10 61       	ori	r17, 0x10	; 16
 bc0:	18 83       	st	Y, r17
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <make_raw_ppm_number+0x146>
	}else{
		number_array[0] &= ~NO_WATER_ICON;
 bc4:	1f 7e       	andi	r17, 0xEF	; 239
 bc6:	18 83       	st	Y, r17
	}
}
 bc8:	df 91       	pop	r29
 bca:	cf 91       	pop	r28
 bcc:	1f 91       	pop	r17
 bce:	ff 90       	pop	r15
 bd0:	ef 90       	pop	r14
 bd2:	08 95       	ret

00000bd4 <lcd_update_raw_ppm_display>:
* 入口参数：	unsigned long int	number			要显示的数字

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void lcd_update_raw_ppm_display(unsigned int number){
 bd4:	cf 93       	push	r28
 bd6:	df 93       	push	r29
 bd8:	00 d0       	rcall	.+0      	; 0xbda <lcd_update_raw_ppm_display+0x6>
 bda:	00 d0       	rcall	.+0      	; 0xbdc <lcd_update_raw_ppm_display+0x8>
 bdc:	cd b7       	in	r28, 0x3d	; 61
 bde:	de b7       	in	r29, 0x3e	; 62
	unsigned char cache[4] = {0};
 be0:	19 82       	std	Y+1, r1	; 0x01
 be2:	1a 82       	std	Y+2, r1	; 0x02
 be4:	1b 82       	std	Y+3, r1	; 0x03
 be6:	1c 82       	std	Y+4, r1	; 0x04
	make_raw_ppm_number(number, cache);
 be8:	be 01       	movw	r22, r28
 bea:	6f 5f       	subi	r22, 0xFF	; 255
 bec:	7f 4f       	sbci	r23, 0xFF	; 255
 bee:	0e 94 41 05 	call	0xa82	; 0xa82 <make_raw_ppm_number>
	
	write_string_address_tm1726(14, 4, cache);
 bf2:	ae 01       	movw	r20, r28
 bf4:	4f 5f       	subi	r20, 0xFF	; 255
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255
 bf8:	64 e0       	ldi	r22, 0x04	; 4
 bfa:	8e e0       	ldi	r24, 0x0E	; 14
 bfc:	0e 94 06 05 	call	0xa0c	; 0xa0c <write_string_address_tm1726>
}
 c00:	0f 90       	pop	r0
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	08 95       	ret

00000c0e <make_pure_ppm_number>:
	}else{
		number_array[0] &= ~NO_WATER_ICON;
	}
}

void make_pure_ppm_number(unsigned int number, unsigned char *number_array){
 c0e:	0f 93       	push	r16
 c10:	1f 93       	push	r17
 c12:	cf 93       	push	r28
 c14:	df 93       	push	r29
 c16:	8c 01       	movw	r16, r24
 c18:	eb 01       	movw	r28, r22
	
	number_array[0] =SMG[ (number%10) ] | PURE_WATER_ICON;
 c1a:	9c 01       	movw	r18, r24
 c1c:	ad ec       	ldi	r26, 0xCD	; 205
 c1e:	bc ec       	ldi	r27, 0xCC	; 204
 c20:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 c24:	ac 01       	movw	r20, r24
 c26:	56 95       	lsr	r21
 c28:	47 95       	ror	r20
 c2a:	56 95       	lsr	r21
 c2c:	47 95       	ror	r20
 c2e:	56 95       	lsr	r21
 c30:	47 95       	ror	r20
 c32:	9a 01       	movw	r18, r20
 c34:	22 0f       	add	r18, r18
 c36:	33 1f       	adc	r19, r19
 c38:	ca 01       	movw	r24, r20
 c3a:	88 0f       	add	r24, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	88 0f       	add	r24, r24
 c40:	99 1f       	adc	r25, r25
 c42:	88 0f       	add	r24, r24
 c44:	99 1f       	adc	r25, r25
 c46:	82 0f       	add	r24, r18
 c48:	93 1f       	adc	r25, r19
 c4a:	f8 01       	movw	r30, r16
 c4c:	e8 1b       	sub	r30, r24
 c4e:	f9 0b       	sbc	r31, r25
 c50:	ec 54       	subi	r30, 0x4C	; 76
 c52:	fe 4f       	sbci	r31, 0xFE	; 254
 c54:	80 81       	ld	r24, Z
 c56:	80 61       	ori	r24, 0x10	; 16
 c58:	88 83       	st	Y, r24
	number_array[1] =SMG[ ((number/10)%10) ];
 c5a:	9a 01       	movw	r18, r20
 c5c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 c60:	96 95       	lsr	r25
 c62:	87 95       	ror	r24
 c64:	96 95       	lsr	r25
 c66:	87 95       	ror	r24
 c68:	96 95       	lsr	r25
 c6a:	87 95       	ror	r24
 c6c:	9c 01       	movw	r18, r24
 c6e:	22 0f       	add	r18, r18
 c70:	33 1f       	adc	r19, r19
 c72:	88 0f       	add	r24, r24
 c74:	99 1f       	adc	r25, r25
 c76:	88 0f       	add	r24, r24
 c78:	99 1f       	adc	r25, r25
 c7a:	88 0f       	add	r24, r24
 c7c:	99 1f       	adc	r25, r25
 c7e:	82 0f       	add	r24, r18
 c80:	93 1f       	adc	r25, r19
 c82:	48 1b       	sub	r20, r24
 c84:	59 0b       	sbc	r21, r25
 c86:	fa 01       	movw	r30, r20
 c88:	ec 54       	subi	r30, 0x4C	; 76
 c8a:	fe 4f       	sbci	r31, 0xFE	; 254
 c8c:	80 81       	ld	r24, Z
 c8e:	89 83       	std	Y+1, r24	; 0x01
	number_array[2] =SMG[ ((number/100)%10) ];
 c90:	98 01       	movw	r18, r16
 c92:	36 95       	lsr	r19
 c94:	27 95       	ror	r18
 c96:	36 95       	lsr	r19
 c98:	27 95       	ror	r18
 c9a:	ab e7       	ldi	r26, 0x7B	; 123
 c9c:	b4 e1       	ldi	r27, 0x14	; 20
 c9e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 ca2:	ac 01       	movw	r20, r24
 ca4:	56 95       	lsr	r21
 ca6:	47 95       	ror	r20
 ca8:	9a 01       	movw	r18, r20
 caa:	ad ec       	ldi	r26, 0xCD	; 205
 cac:	bc ec       	ldi	r27, 0xCC	; 204
 cae:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 cb2:	96 95       	lsr	r25
 cb4:	87 95       	ror	r24
 cb6:	96 95       	lsr	r25
 cb8:	87 95       	ror	r24
 cba:	96 95       	lsr	r25
 cbc:	87 95       	ror	r24
 cbe:	9c 01       	movw	r18, r24
 cc0:	22 0f       	add	r18, r18
 cc2:	33 1f       	adc	r19, r19
 cc4:	88 0f       	add	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	88 0f       	add	r24, r24
 cca:	99 1f       	adc	r25, r25
 ccc:	88 0f       	add	r24, r24
 cce:	99 1f       	adc	r25, r25
 cd0:	82 0f       	add	r24, r18
 cd2:	93 1f       	adc	r25, r19
 cd4:	48 1b       	sub	r20, r24
 cd6:	59 0b       	sbc	r21, r25
 cd8:	fa 01       	movw	r30, r20
 cda:	ec 54       	subi	r30, 0x4C	; 76
 cdc:	fe 4f       	sbci	r31, 0xFE	; 254
 cde:	80 81       	ld	r24, Z
 ce0:	8a 83       	std	Y+2, r24	; 0x02
	number_array[3] =SMG[ ((number/1000)%10) ];
 ce2:	98 01       	movw	r18, r16
 ce4:	36 95       	lsr	r19
 ce6:	27 95       	ror	r18
 ce8:	36 95       	lsr	r19
 cea:	27 95       	ror	r18
 cec:	36 95       	lsr	r19
 cee:	27 95       	ror	r18
 cf0:	a5 ec       	ldi	r26, 0xC5	; 197
 cf2:	b0 e2       	ldi	r27, 0x20	; 32
 cf4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 cf8:	ac 01       	movw	r20, r24
 cfa:	52 95       	swap	r21
 cfc:	42 95       	swap	r20
 cfe:	4f 70       	andi	r20, 0x0F	; 15
 d00:	45 27       	eor	r20, r21
 d02:	5f 70       	andi	r21, 0x0F	; 15
 d04:	45 27       	eor	r20, r21
 d06:	9a 01       	movw	r18, r20
 d08:	ad ec       	ldi	r26, 0xCD	; 205
 d0a:	bc ec       	ldi	r27, 0xCC	; 204
 d0c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__umulhisi3>
 d10:	96 95       	lsr	r25
 d12:	87 95       	ror	r24
 d14:	96 95       	lsr	r25
 d16:	87 95       	ror	r24
 d18:	96 95       	lsr	r25
 d1a:	87 95       	ror	r24
 d1c:	9c 01       	movw	r18, r24
 d1e:	22 0f       	add	r18, r18
 d20:	33 1f       	adc	r19, r19
 d22:	88 0f       	add	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	88 0f       	add	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	88 0f       	add	r24, r24
 d2c:	99 1f       	adc	r25, r25
 d2e:	82 0f       	add	r24, r18
 d30:	93 1f       	adc	r25, r19
 d32:	48 1b       	sub	r20, r24
 d34:	59 0b       	sbc	r21, r25
 d36:	fa 01       	movw	r30, r20
 d38:	ec 54       	subi	r30, 0x4C	; 76
 d3a:	fe 4f       	sbci	r31, 0xFE	; 254
 d3c:	80 81       	ld	r24, Z
 d3e:	8b 83       	std	Y+3, r24	; 0x03
	
	if (device_status_lcd.leakage)
 d40:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <device_status_lcd+0x2>
 d44:	99 23       	and	r25, r25
 d46:	19 f0       	breq	.+6      	; 0xd4e <make_pure_ppm_number+0x140>
	{
		number_array[3] |= LEAKAGE_ICON;
 d48:	80 61       	ori	r24, 0x10	; 16
 d4a:	8b 83       	std	Y+3, r24	; 0x03
 d4c:	02 c0       	rjmp	.+4      	; 0xd52 <make_pure_ppm_number+0x144>
	}else{
		number_array[3] &= ~LEAKAGE_ICON;
 d4e:	8f 7e       	andi	r24, 0xEF	; 239
 d50:	8b 83       	std	Y+3, r24	; 0x03
	}

}
 d52:	df 91       	pop	r29
 d54:	cf 91       	pop	r28
 d56:	1f 91       	pop	r17
 d58:	0f 91       	pop	r16
 d5a:	08 95       	ret

00000d5c <lcd_update_pure_ppm_display>:
* 入口参数：	unsigned long int	number			要显示的数字

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
void lcd_update_pure_ppm_display(unsigned int number){
 d5c:	cf 93       	push	r28
 d5e:	df 93       	push	r29
 d60:	00 d0       	rcall	.+0      	; 0xd62 <lcd_update_pure_ppm_display+0x6>
 d62:	00 d0       	rcall	.+0      	; 0xd64 <lcd_update_pure_ppm_display+0x8>
 d64:	cd b7       	in	r28, 0x3d	; 61
 d66:	de b7       	in	r29, 0x3e	; 62
	unsigned char cache[4] = {0};
 d68:	19 82       	std	Y+1, r1	; 0x01
 d6a:	1a 82       	std	Y+2, r1	; 0x02
 d6c:	1b 82       	std	Y+3, r1	; 0x03
 d6e:	1c 82       	std	Y+4, r1	; 0x04
	make_pure_ppm_number(number, cache);
 d70:	be 01       	movw	r22, r28
 d72:	6f 5f       	subi	r22, 0xFF	; 255
 d74:	7f 4f       	sbci	r23, 0xFF	; 255
 d76:	0e 94 07 06 	call	0xc0e	; 0xc0e <make_pure_ppm_number>
	write_string_address_tm1726(10, 4, cache);
 d7a:	ae 01       	movw	r20, r28
 d7c:	4f 5f       	subi	r20, 0xFF	; 255
 d7e:	5f 4f       	sbci	r21, 0xFF	; 255
 d80:	64 e0       	ldi	r22, 0x04	; 4
 d82:	8a e0       	ldi	r24, 0x0A	; 10
 d84:	0e 94 06 05 	call	0xa0c	; 0xa0c <write_string_address_tm1726>
}
 d88:	0f 90       	pop	r0
 d8a:	0f 90       	pop	r0
 d8c:	0f 90       	pop	r0
 d8e:	0f 90       	pop	r0
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	08 95       	ret

00000d96 <init_port>:
	---------------------------------------
		TM1726	端口初始化
			SDA				PA0		OUT
			SCL				PA1		OUT
	-------------------------------------*/
	DDRA |= ((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3));
 d96:	8a b3       	in	r24, 0x1a	; 26
 d98:	8f 60       	ori	r24, 0x0F	; 15
 d9a:	8a bb       	out	0x1a, r24	; 26
	
	/*------------------------------------
		ADC		端口初始化
	------------------------------------*/
	PORTF &= ~((0x01<< PF7) | (0x01<<PF6 )|(0x01<<PF5));
 d9c:	e2 e6       	ldi	r30, 0x62	; 98
 d9e:	f0 e0       	ldi	r31, 0x00	; 0
 da0:	80 81       	ld	r24, Z
 da2:	8f 71       	andi	r24, 0x1F	; 31
 da4:	80 83       	st	Z, r24
	DDRF  &= ~((0x01<< PF7) | (0x01<<PF6) |(0x01<<PF5));
 da6:	e1 e6       	ldi	r30, 0x61	; 97
 da8:	f0 e0       	ldi	r31, 0x00	; 0
 daa:	80 81       	ld	r24, Z
 dac:	8f 71       	andi	r24, 0x1F	; 31
 dae:	80 83       	st	Z, r24
	
	/*------------------------------------
		uart	端口初始化
	------------------------------------*/
	DDRE	|=	 (1 << PE1);		//TXD设置为输出
 db0:	11 9a       	sbi	0x02, 1	; 2
	DDRE	&=	~(1 << PE0);		//RXD设置为输入
 db2:	10 98       	cbi	0x02, 0	; 2
	PORTE	&=	 0xFF;				//uart0
 db4:	83 b1       	in	r24, 0x03	; 3
 db6:	83 b9       	out	0x03, r24	; 3
	
	DDRD	|=	 (1 << PD3);		//TXD设置为输出
 db8:	8b 9a       	sbi	0x11, 3	; 17
	DDRD	&=	~(1 << PD2);		//RXD设置为输入
 dba:	8a 98       	cbi	0x11, 2	; 17
	PORTD	&=	 0xFF;				//uart1
 dbc:	82 b3       	in	r24, 0x12	; 18
 dbe:	82 bb       	out	0x12, r24	; 18
	
	/*------------------------------------
		led		端口初始化
	------------------------------------*/
	DDRC	|=	(1 << PC0);			//PC0设置为输出
 dc0:	a0 9a       	sbi	0x14, 0	; 20
	PORTC	|=	(1 << PC0);			//熄灭led
 dc2:	a8 9a       	sbi	0x15, 0	; 21
	
	/*------------------------------------
		beep	端口初始化
	------------------------------------*/
	DDRB	|=	 (1 << PB0);		//PB0设置为输出
 dc4:	b8 9a       	sbi	0x17, 0	; 23
	PORTB	&=	~(1 << PB0);		//蜂鸣器不响
 dc6:	c0 98       	cbi	0x18, 0	; 24

	/*------------------------------------
		TM1726背光灯	端口初始化
	------------------------------------*/
	DDRE	|=	(1 << PE2);			//PE2设置为输出
 dc8:	12 9a       	sbi	0x02, 2	; 2
	PORTE	|=	(1 << PE2);			//打开背光	
 dca:	1a 9a       	sbi	0x03, 2	; 3
	/*------------------------------------
		TM1726串行	端口初始化
			PA0		SDA		设置为输出
			PA1		SCL		设置为输出
	------------------------------------*/	
	DDRA	|=	((1 << PA0) | (1 << PA1));
 dcc:	8a b3       	in	r24, 0x1a	; 26
 dce:	83 60       	ori	r24, 0x03	; 3
 dd0:	8a bb       	out	0x1a, r24	; 26
	PORTA	|=	((1 << PA0) | (1 << PA1));
 dd2:	8b b3       	in	r24, 0x1b	; 27
 dd4:	83 60       	ori	r24, 0x03	; 3
 dd6:	8b bb       	out	0x1b, r24	; 27
		电磁阀	端口初始化
			PE7		进水电磁阀		设置为输出
			PE6		出水电磁阀		设置为输出
			初始化为关闭
	------------------------------------*/	
	DDRE	|=	((1 << PE7) | (1 << PE6));
 dd8:	82 b1       	in	r24, 0x02	; 2
 dda:	80 6c       	ori	r24, 0xC0	; 192
 ddc:	82 b9       	out	0x02, r24	; 2
	PORTE	&= ~((1 << PE7) | (1 << PE6));
 dde:	83 b1       	in	r24, 0x03	; 3
 de0:	8f 73       	andi	r24, 0x3F	; 63
 de2:	83 b9       	out	0x03, r24	; 3
	
	/*------------------------------------
		水泵	端口初始化
	------------------------------------*/	
	DDRB	|=	(1 << PB2);			//PB2设置为输出
 de4:	ba 9a       	sbi	0x17, 2	; 23
	PORTB	&= ~(1 << PB2);			//初始化为关闭
 de6:	c2 98       	cbi	0x18, 2	; 24
	
	/*------------------------------------
		压力开关	端口初始化	
		初始化为输入
	------------------------------------*/	
	DDRB	&= ~((1 << PB6) | (1 << PB7));
 de8:	87 b3       	in	r24, 0x17	; 23
 dea:	8f 73       	andi	r24, 0x3F	; 63
 dec:	87 bb       	out	0x17, r24	; 23
	PORTB	|=	((1 << PB6) | (1 << PB7));
 dee:	88 b3       	in	r24, 0x18	; 24
 df0:	80 6c       	ori	r24, 0xC0	; 192
 df2:	88 bb       	out	0x18, r24	; 24
 df4:	08 95       	ret

00000df6 <init_uart0>:
* 入口参数：无
* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
inline void uart0_rx_array_set_empty(){
	memset(uart0_rx_array , 0 , sizeof(uart1_rx_array));
 df6:	86 e0       	ldi	r24, 0x06	; 6
 df8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 dfc:	87 e4       	ldi	r24, 0x47	; 71
 dfe:	89 b9       	out	0x09, r24	; 9
 e00:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 e04:	8a b1       	in	r24, 0x0a	; 10
 e06:	88 69       	ori	r24, 0x98	; 152
 e08:	8a b9       	out	0x0a, r24	; 10
 e0a:	08 95       	ret

00000e0c <init_uart1>:
 e0c:	ed e9       	ldi	r30, 0x9D	; 157
 e0e:	f0 e0       	ldi	r31, 0x00	; 0
 e10:	80 81       	ld	r24, Z
 e12:	86 60       	ori	r24, 0x06	; 6
 e14:	80 83       	st	Z, r24
 e16:	87 e4       	ldi	r24, 0x47	; 71
 e18:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 e1c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 e20:	ea e9       	ldi	r30, 0x9A	; 154
 e22:	f0 e0       	ldi	r31, 0x00	; 0
 e24:	80 81       	ld	r24, Z
 e26:	88 69       	ori	r24, 0x98	; 152
 e28:	80 83       	st	Z, r24
 e2a:	08 95       	ret

00000e2c <uart0_send_byte>:
 e2c:	5d 9b       	sbis	0x0b, 5	; 11
 e2e:	fe cf       	rjmp	.-4      	; 0xe2c <uart0_send_byte>
 e30:	8c b9       	out	0x0c, r24	; 12
 e32:	08 95       	ret

00000e34 <uart0_send_string>:
 e34:	cf 93       	push	r28
 e36:	df 93       	push	r29
 e38:	ec 01       	movw	r28, r24
 e3a:	88 81       	ld	r24, Y
 e3c:	88 23       	and	r24, r24
 e3e:	31 f0       	breq	.+12     	; 0xe4c <uart0_send_string+0x18>
 e40:	21 96       	adiw	r28, 0x01	; 1
 e42:	0e 94 16 07 	call	0xe2c	; 0xe2c <uart0_send_byte>
 e46:	89 91       	ld	r24, Y+
 e48:	81 11       	cpse	r24, r1
 e4a:	fb cf       	rjmp	.-10     	; 0xe42 <uart0_send_string+0xe>
 e4c:	df 91       	pop	r29
 e4e:	cf 91       	pop	r28
 e50:	08 95       	ret

00000e52 <uart1_send_byte>:
 e52:	eb e9       	ldi	r30, 0x9B	; 155
 e54:	f0 e0       	ldi	r31, 0x00	; 0
 e56:	90 81       	ld	r25, Z
 e58:	95 ff       	sbrs	r25, 5
 e5a:	fd cf       	rjmp	.-6      	; 0xe56 <uart1_send_byte+0x4>
 e5c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 e60:	08 95       	ret

00000e62 <uart1_send_string>:
 e62:	cf 93       	push	r28
 e64:	df 93       	push	r29
 e66:	ec 01       	movw	r28, r24
 e68:	88 81       	ld	r24, Y
 e6a:	88 23       	and	r24, r24
 e6c:	31 f0       	breq	.+12     	; 0xe7a <uart1_send_string+0x18>
 e6e:	21 96       	adiw	r28, 0x01	; 1
 e70:	0e 94 29 07 	call	0xe52	; 0xe52 <uart1_send_byte>
 e74:	89 91       	ld	r24, Y+
 e76:	81 11       	cpse	r24, r1
 e78:	fb cf       	rjmp	.-10     	; 0xe70 <uart1_send_string+0xe>
 e7a:	df 91       	pop	r29
 e7c:	cf 91       	pop	r28
 e7e:	08 95       	ret

00000e80 <bc95_send_string>:
 e80:	cf 93       	push	r28
 e82:	df 93       	push	r29
 e84:	ec 01       	movw	r28, r24
 e86:	0e 94 1a 07 	call	0xe34	; 0xe34 <uart0_send_string>
 e8a:	ce 01       	movw	r24, r28
 e8c:	0e 94 31 07 	call	0xe62	; 0xe62 <uart1_send_string>
 e90:	df 91       	pop	r29
 e92:	cf 91       	pop	r28
 e94:	08 95       	ret

00000e96 <uart1_rx_array_set_empty>:
 e96:	88 ec       	ldi	r24, 0xC8	; 200
 e98:	ea ee       	ldi	r30, 0xEA	; 234
 e9a:	f3 e0       	ldi	r31, 0x03	; 3
 e9c:	df 01       	movw	r26, r30
 e9e:	1d 92       	st	X+, r1
 ea0:	8a 95       	dec	r24
 ea2:	e9 f7       	brne	.-6      	; 0xe9e <uart1_rx_array_set_empty+0x8>
 ea4:	08 95       	ret

00000ea6 <__vector_18>:
* 中断向量：USART0_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART0_RX_vect){
 ea6:	1f 92       	push	r1
 ea8:	0f 92       	push	r0
 eaa:	0f b6       	in	r0, 0x3f	; 63
 eac:	0f 92       	push	r0
 eae:	11 24       	eor	r1, r1
 eb0:	8f 93       	push	r24
 eb2:	9f 93       	push	r25
 eb4:	ef 93       	push	r30
 eb6:	ff 93       	push	r31
	if (uart0_rx_count >= UART0_RX_ARRAY_LEN)
 eb8:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <uart0_rx_count>
 ebc:	88 3c       	cpi	r24, 0xC8	; 200
 ebe:	10 f0       	brcs	.+4      	; 0xec4 <__vector_18+0x1e>
	{
		uart0_rx_count = 0;
 ec0:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <uart0_rx_count>
	}
	while(!(UCSR0A & (1 << RXC0)));		//判断缓冲区是否有数据
 ec4:	5f 9b       	sbis	0x0b, 7	; 11
 ec6:	fe cf       	rjmp	.-4      	; 0xec4 <__vector_18+0x1e>
	uart0_rx_array[uart0_rx_count] = UDR0;
 ec8:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <uart0_rx_count>
 ecc:	9c b1       	in	r25, 0x0c	; 12
 ece:	e8 2f       	mov	r30, r24
 ed0:	f0 e0       	ldi	r31, 0x00	; 0
 ed2:	ed 54       	subi	r30, 0x4D	; 77
 ed4:	fb 4f       	sbci	r31, 0xFB	; 251
 ed6:	90 83       	st	Z, r25
	uart0_rx_count++;
 ed8:	8f 5f       	subi	r24, 0xFF	; 255
 eda:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <uart0_rx_count>
	
}
 ede:	ff 91       	pop	r31
 ee0:	ef 91       	pop	r30
 ee2:	9f 91       	pop	r25
 ee4:	8f 91       	pop	r24
 ee6:	0f 90       	pop	r0
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	0f 90       	pop	r0
 eec:	1f 90       	pop	r1
 eee:	18 95       	reti

00000ef0 <__vector_30>:
* 中断向量：USART1_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART1_RX_vect){
 ef0:	1f 92       	push	r1
 ef2:	0f 92       	push	r0
 ef4:	0f b6       	in	r0, 0x3f	; 63
 ef6:	0f 92       	push	r0
 ef8:	11 24       	eor	r1, r1
 efa:	8f 93       	push	r24
 efc:	9f 93       	push	r25
 efe:	ef 93       	push	r30
 f00:	ff 93       	push	r31
	//如果接收数据的数组长度大于定义的最大长度则将计数清0
	if (uart1_rx_count >= UART1_RX_ARRAY_LEN)
 f02:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <uart1_rx_count>
 f06:	88 3c       	cpi	r24, 0xC8	; 200
 f08:	10 f0       	brcs	.+4      	; 0xf0e <__vector_30+0x1e>
	{
		uart1_rx_count = 0;
 f0a:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <uart1_rx_count>
	}
	
	while( !(UCSR1A & (1<<RXC1)) );				//判断缓冲区是否有数据
 f0e:	eb e9       	ldi	r30, 0x9B	; 155
 f10:	f0 e0       	ldi	r31, 0x00	; 0
 f12:	80 81       	ld	r24, Z
 f14:	88 23       	and	r24, r24
 f16:	ec f7       	brge	.-6      	; 0xf12 <__vector_30+0x22>
	uart1_rx_array[uart1_rx_count] = UDR1;		//保存接收到的数据
 f18:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <uart1_rx_count>
 f1c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 f20:	e8 2f       	mov	r30, r24
 f22:	f0 e0       	ldi	r31, 0x00	; 0
 f24:	e6 51       	subi	r30, 0x16	; 22
 f26:	fc 4f       	sbci	r31, 0xFC	; 252
 f28:	90 83       	st	Z, r25
	uart1_rx_count++;							//计数
 f2a:	8f 5f       	subi	r24, 0xFF	; 255
 f2c:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <uart1_rx_count>
	
	LED_REVERSE;
 f30:	95 b3       	in	r25, 0x15	; 21
 f32:	81 e0       	ldi	r24, 0x01	; 1
 f34:	89 27       	eor	r24, r25
 f36:	85 bb       	out	0x15, r24	; 21
}
 f38:	ff 91       	pop	r31
 f3a:	ef 91       	pop	r30
 f3c:	9f 91       	pop	r25
 f3e:	8f 91       	pop	r24
 f40:	0f 90       	pop	r0
 f42:	0f be       	out	0x3f, r0	; 63
 f44:	0f 90       	pop	r0
 f46:	1f 90       	pop	r1
 f48:	18 95       	reti

00000f4a <__umulhisi3>:
 f4a:	a2 9f       	mul	r26, r18
 f4c:	b0 01       	movw	r22, r0
 f4e:	b3 9f       	mul	r27, r19
 f50:	c0 01       	movw	r24, r0
 f52:	a3 9f       	mul	r26, r19
 f54:	70 0d       	add	r23, r0
 f56:	81 1d       	adc	r24, r1
 f58:	11 24       	eor	r1, r1
 f5a:	91 1d       	adc	r25, r1
 f5c:	b2 9f       	mul	r27, r18
 f5e:	70 0d       	add	r23, r0
 f60:	81 1d       	adc	r24, r1
 f62:	11 24       	eor	r1, r1
 f64:	91 1d       	adc	r25, r1
 f66:	08 95       	ret

00000f68 <strchr>:
 f68:	fc 01       	movw	r30, r24
 f6a:	81 91       	ld	r24, Z+
 f6c:	86 17       	cp	r24, r22
 f6e:	21 f0       	breq	.+8      	; 0xf78 <strchr+0x10>
 f70:	88 23       	and	r24, r24
 f72:	d9 f7       	brne	.-10     	; 0xf6a <strchr+0x2>
 f74:	99 27       	eor	r25, r25
 f76:	08 95       	ret
 f78:	31 97       	sbiw	r30, 0x01	; 1
 f7a:	cf 01       	movw	r24, r30
 f7c:	08 95       	ret

00000f7e <strcpy>:
 f7e:	fb 01       	movw	r30, r22
 f80:	dc 01       	movw	r26, r24
 f82:	01 90       	ld	r0, Z+
 f84:	0d 92       	st	X+, r0
 f86:	00 20       	and	r0, r0
 f88:	e1 f7       	brne	.-8      	; 0xf82 <strcpy+0x4>
 f8a:	08 95       	ret

00000f8c <strstr>:
 f8c:	fb 01       	movw	r30, r22
 f8e:	51 91       	ld	r21, Z+
 f90:	55 23       	and	r21, r21
 f92:	a9 f0       	breq	.+42     	; 0xfbe <strstr+0x32>
 f94:	bf 01       	movw	r22, r30
 f96:	dc 01       	movw	r26, r24
 f98:	4d 91       	ld	r20, X+
 f9a:	45 17       	cp	r20, r21
 f9c:	41 11       	cpse	r20, r1
 f9e:	e1 f7       	brne	.-8      	; 0xf98 <strstr+0xc>
 fa0:	59 f4       	brne	.+22     	; 0xfb8 <strstr+0x2c>
 fa2:	cd 01       	movw	r24, r26
 fa4:	01 90       	ld	r0, Z+
 fa6:	00 20       	and	r0, r0
 fa8:	49 f0       	breq	.+18     	; 0xfbc <strstr+0x30>
 faa:	4d 91       	ld	r20, X+
 fac:	40 15       	cp	r20, r0
 fae:	41 11       	cpse	r20, r1
 fb0:	c9 f3       	breq	.-14     	; 0xfa4 <strstr+0x18>
 fb2:	fb 01       	movw	r30, r22
 fb4:	41 11       	cpse	r20, r1
 fb6:	ef cf       	rjmp	.-34     	; 0xf96 <strstr+0xa>
 fb8:	81 e0       	ldi	r24, 0x01	; 1
 fba:	90 e0       	ldi	r25, 0x00	; 0
 fbc:	01 97       	sbiw	r24, 0x01	; 1
 fbe:	08 95       	ret

00000fc0 <_exit>:
 fc0:	f8 94       	cli

00000fc2 <__stop_program>:
 fc2:	ff cf       	rjmp	.-2      	; 0xfc2 <__stop_program>
