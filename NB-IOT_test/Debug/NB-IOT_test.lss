
NB-IOT_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000512  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a3  0080010a  0080010a  000005b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016df  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce3  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0b  00000000  00000000  00002b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b2  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd2  00000000  00000000  00004026  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_18>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_21>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_30>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	aa 30       	cpi	r26, 0x0A	; 10
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	22 e0       	ldi	r18, 0x02	; 2
  b0:	aa e0       	ldi	r26, 0x0A	; 10
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ad 3a       	cpi	r26, 0xAD	; 173
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  c2:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__vector_21>:
	
	ADMUX =	(ADMUX&0xe0) | channel;			//不改变其他配置，并设置通道
	ADCSRA |= (1 << ADSC);					//启动转换
}

SIGNAL(ADC_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	adc_channel_data_list[adc_interrupt_channel_cache] = (ADCL | ADCH << 8);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	25 b1       	in	r18, 0x05	; 5
  e2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e5 5f       	subi	r30, 0xF5	; 245
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	92 2b       	or	r25, r18
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:
#include "app.h"


int main(void)
{
	port_init();
 10c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <port_init>
	lcd_init();
 110:	0e 94 bc 01 	call	0x378	; 0x378 <lcd_init>
	write_all_ram_tm1726(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 c0 00 	call	0x180	; 0x180 <write_all_ram_tm1726>
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0xe>

0000011c <tm1726_start>:
		LCDNUM[8]=SMGL[*(cache+ len - 2)-48];
		case 1:
		LCDNUM[9]=SMGL[*(cache+ len - 1)-48];
		default: break;
	}
}
 11c:	d8 9a       	sbi	0x1b, 0	; 27
 11e:	d9 9a       	sbi	0x1b, 1	; 27
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <tm1726_start+0x6>
 126:	d8 98       	cbi	0x1b, 0	; 27
 128:	85 e2       	ldi	r24, 0x25	; 37
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <tm1726_start+0xe>
 12e:	d9 98       	cbi	0x1b, 1	; 27
 130:	85 e2       	ldi	r24, 0x25	; 37
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <tm1726_start+0x16>
 136:	08 95       	ret

00000138 <tm1726_stop>:
 138:	d8 98       	cbi	0x1b, 0	; 27
 13a:	d9 9a       	sbi	0x1b, 1	; 27
 13c:	85 e2       	ldi	r24, 0x25	; 37
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <tm1726_stop+0x6>
 142:	d8 9a       	sbi	0x1b, 0	; 27
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <tm1726_stop+0xe>
 14a:	d9 98       	cbi	0x1b, 1	; 27
 14c:	85 e2       	ldi	r24, 0x25	; 37
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <tm1726_stop+0x16>
 152:	08 95       	ret

00000154 <write_byte_tm1726>:
 154:	d8 98       	cbi	0x1b, 0	; 27
 156:	d9 98       	cbi	0x1b, 1	; 27
 158:	24 e0       	ldi	r18, 0x04	; 4
 15a:	2a 95       	dec	r18
 15c:	f1 f7       	brne	.-4      	; 0x15a <write_byte_tm1726+0x6>
 15e:	98 e0       	ldi	r25, 0x08	; 8
 160:	d9 98       	cbi	0x1b, 1	; 27
 162:	80 fd       	sbrc	r24, 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <write_byte_tm1726+0x16>
 166:	d8 98       	cbi	0x1b, 0	; 27
 168:	01 c0       	rjmp	.+2      	; 0x16c <write_byte_tm1726+0x18>
 16a:	d8 9a       	sbi	0x1b, 0	; 27
 16c:	24 e0       	ldi	r18, 0x04	; 4
 16e:	2a 95       	dec	r18
 170:	f1 f7       	brne	.-4      	; 0x16e <write_byte_tm1726+0x1a>
 172:	d9 9a       	sbi	0x1b, 1	; 27
 174:	86 95       	lsr	r24
 176:	91 50       	subi	r25, 0x01	; 1
 178:	99 f7       	brne	.-26     	; 0x160 <write_byte_tm1726+0xc>
 17a:	d9 98       	cbi	0x1b, 1	; 27
 17c:	d8 98       	cbi	0x1b, 0	; 27
 17e:	08 95       	ret

00000180 <write_all_ram_tm1726>:
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	d8 2f       	mov	r29, r24
 186:	d8 9a       	sbi	0x1b, 0	; 27
 188:	d9 9a       	sbi	0x1b, 1	; 27
 18a:	0e 94 8e 00 	call	0x11c	; 0x11c <tm1726_start>
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <write_all_ram_tm1726+0x10>
 194:	80 ec       	ldi	r24, 0xC0	; 192
 196:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 19a:	c2 e1       	ldi	r28, 0x12	; 18
 19c:	d8 9a       	sbi	0x1b, 0	; 27
 19e:	d9 9a       	sbi	0x1b, 1	; 27
 1a0:	dd 23       	and	r29, r29
 1a2:	21 f0       	breq	.+8      	; 0x1ac <write_all_ram_tm1726+0x2c>
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <write_all_ram_tm1726+0x32>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 1b2:	c1 50       	subi	r28, 0x01	; 1
 1b4:	99 f7       	brne	.-26     	; 0x19c <write_all_ram_tm1726+0x1c>
 1b6:	0e 94 9c 00 	call	0x138	; 0x138 <tm1726_stop>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <init_tm1726>:
 1c0:	d8 9a       	sbi	0x1b, 0	; 27
 1c2:	d9 9a       	sbi	0x1b, 1	; 27
 1c4:	0e 94 8e 00 	call	0x11c	; 0x11c <tm1726_start>
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <init_tm1726+0xa>
 1ce:	87 e3       	ldi	r24, 0x37	; 55
 1d0:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 1d4:	0e 94 9c 00 	call	0x138	; 0x138 <tm1726_stop>
 1d8:	08 95       	ret

000001da <write_byte_address_tm1726>:
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	d8 2f       	mov	r29, r24
 1e0:	c6 2f       	mov	r28, r22
 1e2:	d8 9a       	sbi	0x1b, 0	; 27
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <tm1726_start>
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	9b e6       	ldi	r25, 0x6B	; 107
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <write_byte_address_tm1726+0x14>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <write_byte_address_tm1726+0x1a>
 1f4:	00 00       	nop
 1f6:	80 ec       	ldi	r24, 0xC0	; 192
 1f8:	8d 0f       	add	r24, r29
 1fa:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 1fe:	d8 9a       	sbi	0x1b, 0	; 27
 200:	d9 9a       	sbi	0x1b, 1	; 27
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	9b e6       	ldi	r25, 0x6B	; 107
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <write_byte_address_tm1726+0x2c>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <write_byte_address_tm1726+0x32>
 20c:	00 00       	nop
 20e:	8c 2f       	mov	r24, r28
 210:	0e 94 aa 00 	call	0x154	; 0x154 <write_byte_tm1726>
 214:	0e 94 9c 00 	call	0x138	; 0x138 <tm1726_stop>
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <write_string_address_tm1726>:
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	96 0f       	add	r25, r22
 22c:	66 23       	and	r22, r22
 22e:	89 f0       	breq	.+34     	; 0x252 <write_string_address_tm1726+0x34>
 230:	ea 01       	movw	r28, r20
 232:	e9 2e       	mov	r14, r25
 234:	f1 2c       	mov	r15, r1
 236:	9f ef       	ldi	r25, 0xFF	; 255
 238:	e9 1a       	sub	r14, r25
 23a:	f9 0a       	sbc	r15, r25
 23c:	e4 0e       	add	r14, r20
 23e:	f5 1e       	adc	r15, r21
 240:	69 91       	ld	r22, Y+
 242:	11 e0       	ldi	r17, 0x01	; 1
 244:	18 0f       	add	r17, r24
 246:	0e 94 ed 00 	call	0x1da	; 0x1da <write_byte_address_tm1726>
 24a:	81 2f       	mov	r24, r17
 24c:	ce 15       	cp	r28, r14
 24e:	df 05       	cpc	r29, r15
 250:	b9 f7       	brne	.-18     	; 0x240 <write_string_address_tm1726+0x22>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	08 95       	ret

0000025e <make_number_array>:


make_number_array(unsigned int number, unsigned char *number_array){
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <make_number_array+0xe>
 26c:	00 d0       	rcall	.+0      	; 0x26e <make_number_array+0x10>
 26e:	1f 92       	push	r1
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	7b 01       	movw	r14, r22
	
	unsigned char cache[5] = {0};
 276:	8e 01       	movw	r16, r28
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	25 e0       	ldi	r18, 0x05	; 5
 27e:	f8 01       	movw	r30, r16
 280:	11 92       	st	Z+, r1
 282:	2a 95       	dec	r18
 284:	e9 f7       	brne	.-6      	; 0x280 <make_number_array+0x22>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 286:	4a e0       	ldi	r20, 0x0A	; 10
 288:	b8 01       	movw	r22, r16
 28a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__itoa_ncheck>
	itoa(number, cache, 10);
	
	unsigned char len = strlen(cache);
 28e:	f8 01       	movw	r30, r16
 290:	01 90       	ld	r0, Z+
 292:	00 20       	and	r0, r0
 294:	e9 f7       	brne	.-6      	; 0x290 <make_number_array+0x32>
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	8e 2f       	mov	r24, r30
 29a:	80 1b       	sub	r24, r16
 29c:	86 30       	cpi	r24, 0x06	; 6
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <make_number_array+0x44>
 2a0:	85 e0       	ldi	r24, 0x05	; 5
	if(len > 5)
	len = 5;
	
	switch(len)
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	f1 f0       	breq	.+60     	; 0x2e2 <make_number_array+0x84>
 2a6:	28 f4       	brcc	.+10     	; 0x2b2 <make_number_array+0x54>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	a9 f1       	breq	.+106    	; 0x316 <make_number_array+0xb8>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	31 f1       	breq	.+76     	; 0x2fc <make_number_array+0x9e>
 2b0:	3c c0       	rjmp	.+120    	; 0x32a <make_number_array+0xcc>
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	49 f0       	breq	.+18     	; 0x2c8 <make_number_array+0x6a>
 2b6:	85 30       	cpi	r24, 0x05	; 5
 2b8:	c1 f5       	brne	.+112    	; 0x32a <make_number_array+0xcc>
	{
		case 5:
		number_array[0]=SMGL[*(cache+ len - 5)-48];
 2ba:	e9 81       	ldd	r30, Y+1	; 0x01
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e0 53       	subi	r30, 0x30	; 48
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	90 81       	ld	r25, Z
 2c4:	f7 01       	movw	r30, r14
 2c6:	90 83       	st	Z, r25
		case 4:
		number_array[1]=SMGL[*(cache+ len - 4)-48];
 2c8:	ed ef       	ldi	r30, 0xFD	; 253
 2ca:	ff ef       	ldi	r31, 0xFF	; 255
 2cc:	ec 0f       	add	r30, r28
 2ce:	fd 1f       	adc	r31, r29
 2d0:	e8 0f       	add	r30, r24
 2d2:	f1 1d       	adc	r31, r1
 2d4:	e0 81       	ld	r30, Z
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	e0 53       	subi	r30, 0x30	; 48
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	90 81       	ld	r25, Z
 2de:	f7 01       	movw	r30, r14
 2e0:	91 83       	std	Z+1, r25	; 0x01
		case 3:
		number_array[2]=SMGL[*(cache+ len - 3)-48];
 2e2:	ee ef       	ldi	r30, 0xFE	; 254
 2e4:	ff ef       	ldi	r31, 0xFF	; 255
 2e6:	ec 0f       	add	r30, r28
 2e8:	fd 1f       	adc	r31, r29
 2ea:	e8 0f       	add	r30, r24
 2ec:	f1 1d       	adc	r31, r1
 2ee:	e0 81       	ld	r30, Z
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	e0 53       	subi	r30, 0x30	; 48
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	90 81       	ld	r25, Z
 2f8:	f7 01       	movw	r30, r14
 2fa:	92 83       	std	Z+2, r25	; 0x02
		case 2:
		number_array[3]=SMGL[*(cache+ len - 2)-48];
 2fc:	ef ef       	ldi	r30, 0xFF	; 255
 2fe:	ff ef       	ldi	r31, 0xFF	; 255
 300:	ec 0f       	add	r30, r28
 302:	fd 1f       	adc	r31, r29
 304:	e8 0f       	add	r30, r24
 306:	f1 1d       	adc	r31, r1
 308:	e0 81       	ld	r30, Z
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	e0 53       	subi	r30, 0x30	; 48
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	90 81       	ld	r25, Z
 312:	f7 01       	movw	r30, r14
 314:	93 83       	std	Z+3, r25	; 0x03
		case 1:
		number_array[4]=SMGL[*(cache+ len - 1)-48];
 316:	fe 01       	movw	r30, r28
 318:	e8 0f       	add	r30, r24
 31a:	f1 1d       	adc	r31, r1
 31c:	e0 81       	ld	r30, Z
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	e0 53       	subi	r30, 0x30	; 48
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	f7 01       	movw	r30, r14
 328:	84 83       	std	Z+4, r24	; 0x04
		default: break;
	}
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	08 95       	ret

00000342 <lcd_show_number>:
	
	_delay_ms(5000);
	
}

void lcd_show_number(unsigned int number){
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	00 d0       	rcall	.+0      	; 0x348 <lcd_show_number+0x6>
 348:	00 d0       	rcall	.+0      	; 0x34a <lcd_show_number+0x8>
 34a:	1f 92       	push	r1
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
	unsigned char cache[5];
	make_number_array(number, cache);
 350:	be 01       	movw	r22, r28
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	0e 94 2f 01 	call	0x25e	; 0x25e <make_number_array>
	write_string_address_tm1726(5, 5, cache);
 35a:	ae 01       	movw	r20, r28
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	65 e0       	ldi	r22, 0x05	; 5
 362:	85 e0       	ldi	r24, 0x05	; 5
 364:	0e 94 0f 01 	call	0x21e	; 0x21e <write_string_address_tm1726>
}
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <lcd_init>:

const unsigned char  Device[] = "A1111378";

void lcd_init()
{
	init_tm1726();
 378:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <init_tm1726>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	8f eb       	ldi	r24, 0xBF	; 191
 380:	96 e0       	ldi	r25, 0x06	; 6
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <lcd_init+0xa>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <lcd_init+0x14>
 38c:	00 00       	nop
	_delay_ms(200);
	write_all_ram_tm1726(1);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 c0 00 	call	0x180	; 0x180 <write_all_ram_tm1726>
 394:	2f ef       	ldi	r18, 0xFF	; 255
 396:	8f eb       	ldi	r24, 0xBF	; 191
 398:	91 e2       	ldi	r25, 0x21	; 33
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <lcd_init+0x22>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <lcd_init+0x2c>
 3a4:	00 00       	nop
	_delay_ms(1000);
	write_all_ram_tm1726(0);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 c0 00 	call	0x180	; 0x180 <write_all_ram_tm1726>
	
	lcd_show_number(4985);
 3ac:	89 e7       	ldi	r24, 0x79	; 121
 3ae:	93 e1       	ldi	r25, 0x13	; 19
 3b0:	0e 94 a1 01 	call	0x342	; 0x342 <lcd_show_number>
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	8f eb       	ldi	r24, 0xBF	; 191
 3b8:	98 ea       	ldi	r25, 0xA8	; 168
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <lcd_init+0x42>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <lcd_init+0x4c>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <port_init>:
	---------------------------------------
		TM1726	端口初始化
			SDA				PA0		OUT
			SCL				PA1		OUT
	-------------------------------------*/
	DDRA |= ((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3));
 3c8:	8a b3       	in	r24, 0x1a	; 26
 3ca:	8f 60       	ori	r24, 0x0F	; 15
 3cc:	8a bb       	out	0x1a, r24	; 26
	
	/*------------------------------------
		ADC		端口初始化
	------------------------------------*/
	PORTF &= ~((0x01<< PF7) | (0x01<<PF6 )|(0x01<<PF5));
 3ce:	e2 e6       	ldi	r30, 0x62	; 98
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	8f 71       	andi	r24, 0x1F	; 31
 3d6:	80 83       	st	Z, r24
	DDRF  &= ~((0x01<< PF7) | (0x01<<PF6) |(0x01<<PF5));
 3d8:	e1 e6       	ldi	r30, 0x61	; 97
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	8f 71       	andi	r24, 0x1F	; 31
 3e0:	80 83       	st	Z, r24
	
	/*------------------------------------
		uart	端口初始化
	------------------------------------*/
	DDRE	|=	 (1 << PE1);		//TXD设置为输出
 3e2:	11 9a       	sbi	0x02, 1	; 2
	DDRE	&=	~(1 << PE0);		//RXD设置为输入
 3e4:	10 98       	cbi	0x02, 0	; 2
	PORTE	&=	 0xFF;				//uart0
 3e6:	83 b1       	in	r24, 0x03	; 3
 3e8:	83 b9       	out	0x03, r24	; 3
	
	DDRD	|=	 (1 << PD3);		//TXD设置为输出
 3ea:	8b 9a       	sbi	0x11, 3	; 17
	DDRD	&=	~(1 << PD2);		//RXD设置为输入
 3ec:	8a 98       	cbi	0x11, 2	; 17
	PORTD	&=	 0xFF;				//uart1
 3ee:	82 b3       	in	r24, 0x12	; 18
 3f0:	82 bb       	out	0x12, r24	; 18
	
	/*------------------------------------
		led		端口初始化
	------------------------------------*/
	DDRC	|=	(1 << PC0);			//PC0设置为输出
 3f2:	a0 9a       	sbi	0x14, 0	; 20
	PORTC	|=	(1 << PC0);			//熄灭led
 3f4:	a8 9a       	sbi	0x15, 0	; 21
	
	/*------------------------------------
		beep	端口初始化
	------------------------------------*/
	DDRB	|=	 (1 << PB0);		//PB0设置为输出
 3f6:	b8 9a       	sbi	0x17, 0	; 23
	PORTB	&=	~(1 << PB0);		//蜂鸣器不响
 3f8:	c0 98       	cbi	0x18, 0	; 24

	/*------------------------------------
		TM1726背光灯	端口初始化
	------------------------------------*/
	DDRE	|=	(1 << PE2);			//PE2设置为输出
 3fa:	12 9a       	sbi	0x02, 2	; 2
	PORTE	|=	(1 << PE2);			//打开背光	
 3fc:	1a 9a       	sbi	0x03, 2	; 3
	/*------------------------------------
		TM1726串行	端口初始化
			PA0		SDA		设置为输出
			PA1		SCL		设置为输出
	------------------------------------*/	
	DDRA	|=	((1 << PA0) | (1 << PA1));
 3fe:	8a b3       	in	r24, 0x1a	; 26
 400:	83 60       	ori	r24, 0x03	; 3
 402:	8a bb       	out	0x1a, r24	; 26
	PORTA	|=	((1 << PA0) | (1 << PA1));
 404:	8b b3       	in	r24, 0x1b	; 27
 406:	83 60       	ori	r24, 0x03	; 3
 408:	8b bb       	out	0x1b, r24	; 27
 40a:	08 95       	ret

0000040c <__vector_18>:
* 中断向量：USART0_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART0_RX_vect){
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
	while( !(UCSR0A & (1<<RXC0)) );		//判断缓冲区是否有数据
 41e:	5f 9b       	sbis	0x0b, 7	; 11
 420:	fe cf       	rjmp	.-4      	; 0x41e <__vector_18+0x12>
	uart0_rx_array[uart0_rx_count] = UDR0;
 422:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <uart0_rx_count>
 426:	9c b1       	in	r25, 0x0c	; 12
 428:	e8 2f       	mov	r30, r24
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	eb 51       	subi	r30, 0x1B	; 27
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	90 83       	st	Z, r25
	uart0_rx_count++;
 432:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (uart0_rx_count >= UART0_RX_ARRAY_LEN)
 434:	88 3c       	cpi	r24, 0xC8	; 200
 436:	18 f4       	brcc	.+6      	; 0x43e <__vector_18+0x32>
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART0_RX_vect){
	while( !(UCSR0A & (1<<RXC0)) );		//判断缓冲区是否有数据
	uart0_rx_array[uart0_rx_count] = UDR0;
	uart0_rx_count++;
 438:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <uart0_rx_count>
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__vector_18+0x36>
	
	if (uart0_rx_count >= UART0_RX_ARRAY_LEN)
	{
		uart0_rx_count = 0;
 43e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <uart0_rx_count>
	}
}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_30>:
* 中断向量：USART1_RX_vect	接收完成

* 出口参数：无
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART1_RX_vect){
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
	while( !(UCSR1A & (1<<RXC1)) );				//判断缓冲区是否有数据
 466:	eb e9       	ldi	r30, 0x9B	; 155
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	88 23       	and	r24, r24
 46e:	ec f7       	brge	.-6      	; 0x46a <__vector_30+0x16>
	uart1_rx_array[uart1_rx_count] = UDR1;		//保存接收到的数据
 470:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <uart1_rx_count>
 474:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 478:	e8 2f       	mov	r30, r24
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	e4 5e       	subi	r30, 0xE4	; 228
 47e:	fe 4f       	sbci	r31, 0xFE	; 254
 480:	90 83       	st	Z, r25
	uart1_rx_count++;							//计数
 482:	8f 5f       	subi	r24, 0xFF	; 255
	
	//如果接收数据的数组长度大于定义的最大长度则将计数清0
	if (uart1_rx_count >= UART1_RX_ARRAY_LEN)
 484:	88 3c       	cpi	r24, 0xC8	; 200
 486:	18 f4       	brcc	.+6      	; 0x48e <__vector_30+0x3a>
* 返 回 值：无
*-----------------------------------------------------------------------------*/
SIGNAL(USART1_RX_vect){
	while( !(UCSR1A & (1<<RXC1)) );				//判断缓冲区是否有数据
	uart1_rx_array[uart1_rx_count] = UDR1;		//保存接收到的数据
	uart1_rx_count++;							//计数
 488:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uart1_rx_count>
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__vector_30+0x3e>
	
	//如果接收数据的数组长度大于定义的最大长度则将计数清0
	if (uart1_rx_count >= UART1_RX_ARRAY_LEN)
	{
		uart1_rx_count = 0;
 48e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <uart1_rx_count>
	}
}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__itoa_ncheck>:
 4a4:	bb 27       	eor	r27, r27
 4a6:	4a 30       	cpi	r20, 0x0A	; 10
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <__itoa_ncheck+0x12>
 4aa:	99 23       	and	r25, r25
 4ac:	22 f4       	brpl	.+8      	; 0x4b6 <__itoa_ncheck+0x12>
 4ae:	bd e2       	ldi	r27, 0x2D	; 45
 4b0:	90 95       	com	r25
 4b2:	81 95       	neg	r24
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__utoa_common>

000004ba <__utoa_ncheck>:
 4ba:	bb 27       	eor	r27, r27

000004bc <__utoa_common>:
 4bc:	fb 01       	movw	r30, r22
 4be:	55 27       	eor	r21, r21
 4c0:	aa 27       	eor	r26, r26
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	aa 1f       	adc	r26, r26
 4c8:	a4 17       	cp	r26, r20
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__utoa_common+0x14>
 4cc:	a4 1b       	sub	r26, r20
 4ce:	83 95       	inc	r24
 4d0:	50 51       	subi	r21, 0x10	; 16
 4d2:	b9 f7       	brne	.-18     	; 0x4c2 <__utoa_common+0x6>
 4d4:	a0 5d       	subi	r26, 0xD0	; 208
 4d6:	aa 33       	cpi	r26, 0x3A	; 58
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__utoa_common+0x20>
 4da:	a9 5d       	subi	r26, 0xD9	; 217
 4dc:	a1 93       	st	Z+, r26
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	79 f7       	brne	.-34     	; 0x4c0 <__utoa_common+0x4>
 4e2:	b1 11       	cpse	r27, r1
 4e4:	b1 93       	st	Z+, r27
 4e6:	11 92       	st	Z+, r1
 4e8:	cb 01       	movw	r24, r22
 4ea:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <strrev>

000004ee <strrev>:
 4ee:	dc 01       	movw	r26, r24
 4f0:	fc 01       	movw	r30, r24
 4f2:	67 2f       	mov	r22, r23
 4f4:	71 91       	ld	r23, Z+
 4f6:	77 23       	and	r23, r23
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <strrev+0x4>
 4fa:	32 97       	sbiw	r30, 0x02	; 2
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <strrev+0x18>
 4fe:	7c 91       	ld	r23, X
 500:	6d 93       	st	X+, r22
 502:	70 83       	st	Z, r23
 504:	62 91       	ld	r22, -Z
 506:	ae 17       	cp	r26, r30
 508:	bf 07       	cpc	r27, r31
 50a:	c8 f3       	brcs	.-14     	; 0x4fe <strrev+0x10>
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
